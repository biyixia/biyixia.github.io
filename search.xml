<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AOP面向切面编程</title>
    <url>/post/AOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>在编写业务层代码时，除了实现业务接口中的方法外（主业务逻辑），可能还需要一些非业务方法，也称为交叉业务逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SomeService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doOther</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SomeService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了业务方法doSome&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doOther</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了业务方法doOther&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>在业务实现类添加交叉业务逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SomeService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> &#123;</span><br><span class="line">        doLog();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了业务方法doSome&quot;</span>);</span><br><span class="line">        doTrans();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doOther</span><span class="params">()</span> &#123;</span><br><span class="line">        doLog();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了业务方法doOther&quot;</span>);</span><br><span class="line">        doTrans();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doLog</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;非主业务逻辑，在方法开始执行时输出日志&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTrans</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;非主业务逻辑，在方法执行后加入事务日志&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在工具类中定义交叉业务逻辑，供主业务逻辑调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceTools</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doLog</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;非主业务逻辑，在方法开始执行时输出日志&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doTrans</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;非主业务逻辑，在方法执行后加入事务日志&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SomeService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> &#123;</span><br><span class="line">        ServiceTools.doLog();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了业务方法doSome&quot;</span>);</span><br><span class="line">        ServiceTools.doTrans();</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doOther</span><span class="params">()</span> &#123;</span><br><span class="line">        ServiceTools.doLog();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了业务方法doOther&quot;</span>);</span><br><span class="line">        ServiceTools.doTrans();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>上述代码中交叉业务与主业务深度耦合在一起</p>
<ul>
<li>当交叉业务逻辑较多时，业务实现类中会出现大量的交叉业务逻辑代码调用语句，使业务逻辑混杂不清，代码可读性差</li>
<li>当交叉业务逻辑需求复杂时，对于不同的需求分别设计交叉业务逻辑，代码的扩展性差</li>
</ul>
<p>所以，可以采用动态代理方式。在不修改主业务逻辑的前提下，扩展和增强其功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyInvocationHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        ServiceTools.toLog();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        ServiceTools.toTrans();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:/application.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SomeService target;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyInvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInvocationHandler</span>(target);</span><br><span class="line">        <span class="type">SomeService</span> <span class="variable">someService</span> <span class="operator">=</span> (SomeService) Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), handler);</span><br><span class="line">        someService.doSome();</span><br><span class="line">        someService.doOther();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>第三阶段</category>
      </categories>
  </entry>
  <entry>
    <title>DOS常用命令</title>
    <url>/post/DOS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2><span id="dos命令的基础使用">DOS命令的基础使用：</span></h2>
<h3><span id="dir"><code>dir</code></span></h3>
<ul>
<li>查看当前目录，其中dir指directory</li>
</ul>
<h3><span id="mkdirmd"><code>mkdir</code>(md)</span></h3>
<ul>
<li>创建文件夹</li>
</ul>
<span id="more"></span>
<h3><span id="rmdirrd"><code>rmdir</code>(rd)</span></h3>
<ul>
<li>删除文件夹，若要删除非空的文件夹，需要<code>-s</code>来强行删除该文件夹下的所有子文件夹与文件，再加上<code>-q</code>则无需确认（安静模式）</li>
</ul>
<h3><span id="cd"><code>cd</code></span></h3>
<ul>
<li>
<p>可以跳转至当前目录的所有子孙目录，但无法进行跨盘符跳转；若要进行跨盘符跳转，则使用“盘符”+“:”，例如<code>c:</code>,<code>d:</code>,<code>e:</code></p>
</li>
<li>
<p>特别地，<code>cd .\</code>表示当前目录<code>cd ..</code> 表示返回上一级目录,<code>cd \</code> 表示返回根目录</p>
</li>
</ul>
<h3><span id="echo回声"><code>echo</code>(回声)</span></h3>
<ul>
<li><code>echo 123</code>只使用echo + 字符串，则表示打印该字符串</li>
<li><code>echo 123 &gt; d:\hello.txt </code>加上大于号，表示将打印的字符串重定向到指定位置，此时对同一个文件多次echo将会覆盖上次写的内容</li>
<li><code>echo 123 &gt;&gt; d:\hello.txt</code> 两个大于号可对上次写下的内容进行叠加</li>
</ul>
<h3><span id="del"><code>del</code></span></h3>
<ul>
<li>删除文件</li>
<li><code>del *.txt</code> 通配符删除，意为将当前目录下所有后缀为txt的文·件删除</li>
</ul>
<h3><span id="type"><code>type</code></span></h3>
<ul>
<li>仅能查看文本文件内容</li>
</ul>
<h3><span id="cls"><code>cls</code></span></h3>
<ul>
<li>clean sreen 清空屏幕</li>
</ul>
<h3><span id="tree"><code>tree</code></span></h3>
<ul>
<li>以树形显示该目录下的所有文件夹</li>
<li>加上<code>-f</code> 可同时显示该目录下的所有文件</li>
</ul>
<h2><span id="绝对路径与相对路径">绝对路径与相对路径：</span></h2>
<ul>
<li>
<p>绝对路径：从盘符开始的路径</p>
</li>
<li>
<p>相对路径：从当前目录开始的路径</p>
</li>
</ul>
<h2><span id="网络命令">网络命令</span></h2>
<ul>
<li>
<p><code>ping</code> 检查是否可以和其他主机通信</p>
<p><code>-t</code> 不间断发送数据包</p>
</li>
<li>
<p><code>ipconfig</code> 查看网卡信息</p>
<p><code>/all</code> 查看详细的网卡信息</p>
</li>
</ul>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
      <tags>
        <tag>Dos</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/post/Docker%E8%AE%B2%E4%B9%89/</url>
    <content><![CDATA[<ul>
<li>
<p>掌握Docker基础知识，能够理解Docker镜像与容器的概念</p>
</li>
<li>
<p>完成Docker安装与启动</p>
</li>
<li>
<p>掌握Docker镜像与容器相关命令</p>
</li>
<li>
<p>掌握Tomcat Nginx 等软件的常用应用的安装</p>
</li>
<li>
<p>掌握docker迁移与备份相关命令</p>
</li>
<li>
<p>能够运用Dockerfile编写创建容器的脚本</p>
</li>
<li>
<p>能够搭建与使用docker私有仓库</p>
</li>
</ul>
<h1><span id="docker简介">Docker简介</span></h1>
<h2><span id="什么是虚拟化">什么是虚拟化</span></h2>
<blockquote>
<p>将一台物理的计算机，拆分成多个虚拟的计算机</p>
</blockquote>
<p>​	在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。</p>
<p>​	在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件   对资源充分利用</p>
<p>​	虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。</p>
<h2><span id="什么是docker">什么是Docker</span></h2>
<p>​	Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 <a href="https://github.com/docker/docker">GitHub</a> 上进行维护。</p>
<p>​	<img src="/post/Docker%E8%AE%B2%E4%B9%89/1-3.png" alt></p>
<p>​	Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。</p>
<p>​	Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p>
<p>​	在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p>
<p>为什么选择Docker?</p>
<p>（1）上手快。</p>
<p>​	用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。</p>
<p>随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。</p>
<p>（2）职责的逻辑分类</p>
<p>​	使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）”</p>
<p>（3）快速高效的开发生命周期</p>
<p>​	Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。）</p>
<p>（4）鼓励使用面向服务的架构</p>
<p>​	Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序）</p>
<h2><span id="容器与虚拟机比较">容器与虚拟机比较</span></h2>
<p>​	下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。</p>
<p><img src="/post/Docker%E8%AE%B2%E4%B9%89/1-1.png" alt></p>
<p>与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。</p>
<h2><span id="docker-组件">Docker 组件</span></h2>
<h3><span id="docker服务器与客户端">Docker服务器与客户端</span></h3>
<p>​	Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。</p>
<p><img src="/post/Docker%E8%AE%B2%E4%B9%89/1-2.png" alt></p>
<h3><span id="docker镜像与容器">Docker镜像与容器</span></h3>
<p>​	镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。例如：</p>
<p>添加一个文件；</p>
<p>执行一个命令；</p>
<p>打开一个窗口。</p>
<p>也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。</p>
<p>​	Docker可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启动起来的，容器中可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而容器则是启动或者执行阶段。  容器基于镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要的软件或者服务。</p>
<p>所以Docker容器就是：</p>
<p>​	一个镜像格式；</p>
<p>​	一些列标准操作；</p>
<p>​	一个执行环境。</p>
<p>​	Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件。</p>
<p>和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。</p>
<p>Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。</p>
<h3><span id="registry注册中心">Registry（注册中心）</span></h3>
<p>​	Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像（说明：在Docker Hub下载镜像巨慢，可以自己构建私有的Registry）。</p>
<p>​	<a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<h1><span id="docker安装与启动">Docker安装与启动</span></h1>
<h2><span id="安装docker">安装Docker</span></h2>
<p>​	Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。</p>
<p>​	由于我们学习的环境都使用的是CentOS，因此这里我们将Docker安装到CentOS上。注意：这里建议安装在CentOS7.x以上的版本，在CentOS6.x的版本中，安装前需要安装其他很多的环境而且Docker很多补丁不支持更新。</p>
<p>​	请直接挂载课程配套的Centos7.x镜像</p>
<p>（1）yum 包更新到最新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>
<p>（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>
<p>（3）设置yum源为阿里云</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<p>（4）安装docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure>
<p>（5）安装后查看docker版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>
<h2><span id="设置ustc的镜像">设置ustc的镜像</span></h2>
<p>ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。</p>
<p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p>
<p>编辑该文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json  </span><br></pre></td></tr></table></figure>
<p>在该文件中输入如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="docker的启动与停止">Docker的启动与停止</span></h2>
<p><strong>systemctl</strong>命令是系统服务管理器指令</p>
<p>启动docker：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<p>停止docker：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>
<p>重启docker：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>查看docker状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure>
<p>开机启动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>
<p>查看docker概要信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>
<p>查看docker帮助文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker --help</span><br></pre></td></tr></table></figure>
<h1><span id="常用命令">常用命令</span></h1>
<h2><span id="镜像相关命令">镜像相关命令</span></h2>
<h3><span id="查看镜像">查看镜像</span></h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/64b733a61ddac507cc18f52c.jpg" alt></p>
<table>
<thead>
<tr>
<th>列名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>REPOSITORY</td>
<td>镜像名称</td>
</tr>
<tr>
<td>TAG</td>
<td>镜像标签</td>
</tr>
<tr>
<td>IMAGE ID</td>
<td>镜像ID</td>
</tr>
<tr>
<td>CREATED</td>
<td>镜像的创建日期（不是获取该镜像的日期）</td>
</tr>
<tr>
<td>SIZE</td>
<td>镜像大小</td>
</tr>
</tbody>
</table>
<p>这些镜像都是存储在Docker宿主机的/var/lib/docker目录下</p>
<h3><span id="搜索镜像">搜索镜像</span></h3>
<p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/64b734231ddac507cc19fa9b.jpg" alt></p>
<table>
<thead>
<tr>
<th>列明</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>NAME</td>
<td>仓库名称</td>
</tr>
<tr>
<td>DESCRIPTION</td>
<td>镜像描述</td>
</tr>
<tr>
<td>STARS</td>
<td>用户评价，反应一个镜像的受欢迎程度</td>
</tr>
<tr>
<td>OFFICIAL</td>
<td>是否官方</td>
</tr>
<tr>
<td>AUTOMATED</td>
<td>自动构建，表示该镜像由Docker Hub自动构建流程创建的</td>
</tr>
</tbody>
</table>
<h3><span id="拉取镜像">拉取镜像</span></h3>
<p>拉取镜像就是从中央仓库中下载镜像到本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure>
<p>例如，我要下载centos7镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull centos:7</span><br></pre></td></tr></table></figure>
<h3><span id="删除镜像">删除镜像</span></h3>
<p>按镜像ID删除镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像ID</span><br></pre></td></tr></table></figure>
<p>删除所有镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi `docker images -q`</span><br></pre></td></tr></table></figure>
<h2><span id="容器相关命令">容器相关命令</span></h2>
<h3><span id="查看容器">查看容器</span></h3>
<p>查看正在运行的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<p>查看所有容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps –a</span><br></pre></td></tr></table></figure>
<p>查看最后一次运行的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps –l</span><br></pre></td></tr></table></figure>
<p>查看停止的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -f status=exited</span><br></pre></td></tr></table></figure>
<h3><span id="创建与启动容器">创建与启动容器</span></h3>
<p>创建容器命令：docker run</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-i</td>
<td>表示运行容器</td>
</tr>
<tr>
<td>-t</td>
<td>表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端</td>
</tr>
<tr>
<td>–name</td>
<td>为创建的容器命名</td>
</tr>
<tr>
<td>-v</td>
<td>表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上</td>
</tr>
<tr>
<td>-d</td>
<td>在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）</td>
</tr>
<tr>
<td>-p</td>
<td>表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</td>
</tr>
<tr>
<td>-P</td>
<td>表示端口映射，随机端口映射，宿主机的端口是随机的，映射容器的固定端口号</td>
</tr>
</tbody>
</table>
<p>交互式方式创建容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 指定端口映射</span><br><span class="line">docker run -it --name=容器名称 -p 宿主机端口：容器端口 镜像名称:标签 /bin/bash</span><br><span class="line"></span><br><span class="line"># 随机端口映射</span><br><span class="line">docker run -it --name=容器名称 -P 镜像名称:标签 /bin/bash</span><br></pre></td></tr></table></figure>
<p>这时我们通过ps命令查看，发现可以看到启动的容器，状态为启动状态</p>
<p>退出当前容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>守护式方式创建容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -di --name=容器名称 镜像名称:标签</span><br></pre></td></tr></table></figure>
<p>登录守护式容器方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器名称 (或者容器ID)  /bin/bash</span><br></pre></td></tr></table></figure>
<h3><span id="停止与启动容器">停止与启动容器</span></h3>
<p>停止容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop 容器名称（或者容器ID）</span><br></pre></td></tr></table></figure>
<p>启动容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start 容器名称（或者容器ID）</span><br></pre></td></tr></table></figure>
<h3><span id="文件拷贝">文件拷贝</span></h3>
<p>如果我们需要将文件拷贝到容器内可以使用cp命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp 需要拷贝的文件或目录 容器名称:容器目录</span><br></pre></td></tr></table></figure>
<p>也可以将文件从容器内拷贝出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp 容器名称:容器目录 需要拷贝的文件或目录</span><br></pre></td></tr></table></figure>
<h3><span id="目录挂载">目录挂载</span></h3>
<p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。<br>
创建容器 添加-v参数 后边为   宿主机目录:容器目录，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos3 centos:7</span><br></pre></td></tr></table></figure>
<p>如果你共享的是多级的目录，可能会出现权限不足的提示。</p>
<p>这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数  --privileged=true  来解决挂载的目录没有权限的问题</p>
<h3><span id="查看容器ip地址">查看容器IP地址</span></h3>
<p>我们可以通过以下命令查看容器运行的各种数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect 容器名称（容器ID） </span><br></pre></td></tr></table></figure>
<p>也可以直接执行下面的命令直接输出IP地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; 容器名称（容器ID）</span><br></pre></td></tr></table></figure>
<h3><span id="删除容器">删除容器</span></h3>
<p>删除指定的容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm 容器名称（容器ID）</span><br></pre></td></tr></table></figure>
<h1><span id="应用部署">应用部署</span></h1>
<h2><span id="mysql部署">MySQL部署</span></h2>
<p>（1）拉取mysql镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7.34</span><br></pre></td></tr></table></figure>
<p>（2）创建容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -di --name=tensquare_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br><span class="line"></span><br><span class="line"># 创建mysql容器、端口映射、挂载目录</span><br><span class="line">docker run -id --name=mysql -p 1111:3306 -v D:\BaiduNetdiskWorkspace\教学资料\sz2304\stage4\data\mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7.34</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p</td>
<td>代表端口映射，格式为  宿主机映射端口:容器运行端口</td>
</tr>
<tr>
<td>-e</td>
<td>代表添加环境变量  MYSQL_ROOT_PASSWORD  是root用户的登陆密码</td>
</tr>
</tbody>
</table>
<p>（3）远程登录mysql</p>
<p>连接宿主机的IP  ,指定端口为33306</p>
<h2><span id="tomcat部署">tomcat部署</span></h2>
<p>（1）拉取镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull tomcat:7-jre7</span><br></pre></td></tr></table></figure>
<p>（2）创建容器</p>
<p>创建容器  -p表示地址映射</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -di --name=mytomcat -p 9000:8080 </span><br><span class="line">-v /usr/local/webapps:/usr/local/tomcat/webapps tomcat:7-jre7</span><br><span class="line"></span><br><span class="line">docker run -id --name=tomcat -p 8080:8080 tomcat:7-jre7</span><br></pre></td></tr></table></figure>
<h2><span id="redis部署">Redis部署</span></h2>
<p>（1）拉取镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure>
<p>（2）创建容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -di --name=myredis -p 6379:6379 redis</span><br></pre></td></tr></table></figure>
<h1><span id="迁移与备份">迁移与备份</span></h1>
<h2><span id="容器保存为镜像">容器保存为镜像</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit 【容器名】【镜像名】</span><br></pre></td></tr></table></figure>
<h2><span id="镜像备份">镜像备份</span></h2>
<p>将镜像保存为tar文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o 【XXX.tar】 【镜像名】</span><br></pre></td></tr></table></figure>
<h2><span id="镜像恢复与迁移">镜像恢复与迁移</span></h2>
<p>先删除掉原镜像  然后执行此命令进行恢复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load -i 【XXX.tar】</span><br></pre></td></tr></table></figure>
<p>-i 输入的文件</p>
<p>执行后再次查看镜像，可以看到镜像已经恢复</p>
<h1><span id="dockerfile">Dockerfile</span></h1>
<p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。</p>
<p>1、对于开发人员：可以为开发团队提供一个完全一致的开发环境<br>
2、对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了<br>
3、对于运维人员：在部署时，可以实现应用的无缝移植</p>
<h2><span id="常用命令">常用命令</span></h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>FROM image_name:tag</td>
<td>定义了使用哪个基础镜像启动构建流程</td>
</tr>
<tr>
<td>MAINTAINER user_name</td>
<td>声明镜像的创建者</td>
</tr>
<tr>
<td>ENV key value</td>
<td>设置环境变量 (可以写多条)</td>
</tr>
<tr>
<td>RUN command</td>
<td>是Dockerfile的核心部分(可以写多条)</td>
</tr>
<tr>
<td>ADD source_dir/file dest_dir/file</td>
<td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td>
</tr>
<tr>
<td>COPY source_dir/file dest_dir/file</td>
<td>和ADD相似，但是如果有压缩文件并不能解压</td>
</tr>
<tr>
<td>WORKDIR path_dir</td>
<td>设置工作目录</td>
</tr>
</tbody>
</table>
<h2><span id="使用脚本创建镜像">使用脚本创建镜像</span></h2>
<p>创建目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir –p /usr/local/dockerjdk8</span><br></pre></td></tr></table></figure>
<p>下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerjdk8目录</p>
<p>创建文件Dockerfile  <code>vi Dockerfile</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#依赖镜像名称和ID</span><br><span class="line">FROM centos:7</span><br><span class="line">#指定镜像创建者信息</span><br><span class="line">MAINTAINER bjpowernode</span><br><span class="line">#切换工作目录</span><br><span class="line">WORKDIR /usr</span><br><span class="line">RUN mkdir -p /usr/local/java</span><br><span class="line">#ADD 是相对路径jar,把java添加到容器中</span><br><span class="line">ADD jdk-8u171-linux-x64.tar.gz /usr/local/java/</span><br><span class="line"></span><br><span class="line">#配置java环境变量</span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk1.8.0_171</span><br><span class="line">ENV JRE_HOME $JAVA_HOME/jre</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>执行命令构建镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t=&#x27;jdk1.8&#x27; .</span><br></pre></td></tr></table></figure>
<p>注意后边的空格和点，不要省略</p>
<p>查看镜像是否建立完成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA常用快捷键</title>
    <url>/post/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>功能</th>
<th>快捷键</th>
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>执行运行</td>
<td>Shift + F10</td>
<td>万能解错/生成返回值</td>
<td>Alt + Enter</td>
</tr>
<tr>
<td>提示补全</td>
<td>Ctrl +空格(改成 Alt+/)</td>
<td>返回上次查看代码的位置</td>
<td>Ctrl + Alt + 左右箭头</td>
</tr>
<tr>
<td>单行注释</td>
<td>Ctrl + /</td>
<td>查看继承关系</td>
<td>Ctrl + H</td>
</tr>
<tr>
<td>多行注释</td>
<td>Ctrl + Shift + /</td>
<td>格式化代码</td>
<td><strong>Ctrl + Alt + L</strong></td>
</tr>
<tr>
<td>向下复制一行</td>
<td>Ctrl + D</td>
<td>提示方法参数类型</td>
<td>Ctrl + P</td>
</tr>
<tr>
<td>删除一行或多行</td>
<td>Ctrl + Y</td>
<td>复制</td>
<td>Ctrl + C</td>
</tr>
<tr>
<td>向上/下移动一行</td>
<td><strong>Alt+Shift+上或下箭头</strong></td>
<td>撤销</td>
<td>Ctrl + Z</td>
</tr>
<tr>
<td>向下开始新的一行</td>
<td>Shift + Enter</td>
<td>剪切</td>
<td>Ctrl + X</td>
</tr>
<tr>
<td>向上开始新的一行</td>
<td>Ctrl + Alt + Enter</td>
<td>粘贴</td>
<td>Ctrl + V</td>
</tr>
<tr>
<td>查看源码</td>
<td>Ctrl + 鼠标左键</td>
<td>保存</td>
<td>Ctrl + S</td>
</tr>
<tr>
<td>搜索类</td>
<td>Ctrl + N</td>
<td>全选</td>
<td>Ctrl + A</td>
</tr>
<tr>
<td>整体向后移动</td>
<td>Tab</td>
<td>全局查找</td>
<td>Ctrl + Shift+R</td>
</tr>
<tr>
<td>整体向前移动</td>
<td>Shift + Tab</td>
<td>查找任何东西</td>
<td>Shift+Shift</td>
</tr>
<tr>
<td>查看类的结构</td>
<td>Ctrl + F12</td>
<td>查看类的继承结构图</td>
<td>Ctrl + Alt + U</td>
</tr>
<tr>
<td>重构方法变量名</td>
<td>Shift + F6</td>
<td>抽取方法</td>
<td>Ctrl + Alt + M</td>
</tr>
<tr>
<td>大小写转换</td>
<td>Ctrl +Shift + U</td>
<td>最近修改的文件</td>
<td>Ctrl + E</td>
</tr>
<tr>
<td>生成get/set/toString</td>
<td>Alt + Insert</td>
<td>选择粘贴内容</td>
<td>Ctrl + Shift + V</td>
</tr>
<tr>
<td>查看文档说明</td>
<td>Ctrl + Q</td>
<td>优化导入的类</td>
<td>Ctrl + Alt + O</td>
</tr>
<tr>
<td>收起/展开所有方法</td>
<td>Ctrl + Shift + “+/-”</td>
<td>寻找方法被调用的地方</td>
<td>Alt + Alt + F7</td>
</tr>
<tr>
<td>生成surround with</td>
<td>Ctrl + Alt+T</td>
<td>跳到文件尾部</td>
<td>Ctrl + End</td>
</tr>
<tr>
<td>查找</td>
<td>Ctrl + F</td>
<td>跳到文件头部</td>
<td>Ctrl + Home</td>
</tr>
<tr>
<td>查找替换</td>
<td>Ctrl + R</td>
<td>实现/重写方法</td>
<td>Ctrl + O/</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>常用模板</title>
    <url>/post/IDEA%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>模板</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>psvm</strong></td>
<td>可生成 main 方法</td>
</tr>
<tr>
<td><strong>sout</strong></td>
<td>System.out.println() 快捷输出</td>
</tr>
<tr>
<td><strong>soutp</strong></td>
<td>System.out.println(&quot;方法形参名 = &quot; +  形参名);</td>
</tr>
<tr>
<td><strong>soutv</strong></td>
<td>System.out.println(&quot;变量名 = &quot; + 变 量);</td>
</tr>
<tr>
<td><strong>soutm</strong></td>
<td>System.out.println(“当前类名.当前方 法”);</td>
</tr>
<tr>
<td><strong>“abc”.sout</strong></td>
<td>System.out.println(“abc”);</td>
</tr>
<tr>
<td><strong>fori</strong></td>
<td>可生成 for 循环</td>
</tr>
<tr>
<td>iter</td>
<td>可生成增强 for 循环</td>
</tr>
<tr>
<td>itar</td>
<td>可生成普通 for 循环</td>
</tr>
<tr>
<td>list.for</td>
<td>可生成集合 list 的 for 循环 ,for(String s:list){}</td>
</tr>
<tr>
<td><strong>ifn</strong></td>
<td>可生成 if(xxx = null)</td>
</tr>
<tr>
<td><strong>inn</strong></td>
<td>可生成 if(xxx != null)或xxx.nn或 xxx.null</td>
</tr>
<tr>
<td>prsf</td>
<td>可生成 private static final</td>
</tr>
<tr>
<td>psf</td>
<td>可生成 public static final</td>
</tr>
<tr>
<td>psfi</td>
<td>可生成 public static final int</td>
</tr>
<tr>
<td>psfs</td>
<td>可生成 public static final String</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>JDK的安装及环境变量的配置</title>
    <url>/post/JDK%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1><span id="引言">引言</span></h1>
<p>JDK是Java开发的重要工具，安装JDK是学好Java的第一步</p>
<span id="more"></span>
<h1><span id="jdk-的安装">JDK 的安装</span></h1>
<h2><span id="下载">下载</span></h2>
<p>首先通过甲骨文官方下载JDK所需的安装包</p>
<p><a href="https://www.oracle.com/java/technologies/downloads/archive/">Java Archive | Oracle</a></p>
<p>选择需要的JDK版本，通常使用的是JDK8</p>
<img src="https://pic.imgdb.cn/item/6391d5c8b1fccdcd362211e2.png" style="zoom:50%;">
<p>往下找到适配自己系统的JDK，这里演示的是windows64字节</p>
<img src="https://pic.imgdb.cn/item/6391d6b8b1fccdcd362376b7.png" style="zoom: 33%;">
<p>点击下载链接，勾选接受协议，将会跳转至Oracle登录界面，没有Oracle账号还需注册，登录成功即可开始下载</p>
<h2><span id="安装">安装</span></h2>
<ul>
<li>
<p>作为开发人员安装JDK，<strong>设置公共JRE公共功能不可用</strong>，因JDK本身即包含了JRE，无需再次安装，关于JDK： <a href="../Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0">Java语言概述</a></p>
</li>
<li>
<p>其次，安装的路径下<strong>不得存在中文</strong>，</p>
</li>
</ul>
<img src="https://pic.imgdb.cn/item/6391d82cb1fccdcd3625d862.png" style="zoom: 80%;">
<h1><span id="环境变量的配置">环境变量的配置</span></h1>
<h2><span id="查看环境变量">查看环境变量</span></h2>
<p>鼠标右击此电脑点击属性，对于win11的系统，点击设备规格下的高级系统设置，点击环境变量</p>
<img src="https://pic.imgdb.cn/item/6391de65b1fccdcd362eea05.png" style="zoom: 80%;">
<h2><span id="java_home">JAVA_HOME</span></h2>
<p>点击系统变量中的新建，添加一个名为JAVA_HOME的变量，变量值为JDK的安装路径</p>
<img src="https://pic.imgdb.cn/item/6391de3db1fccdcd362eb8e5.png" style="zoom: 80%;">
<h2><span id="path">Path</span></h2>
<p>点击系统变量中的编辑，点击新建，输入<code>%JAVA_HOME%\bin</code></p>
<img src="https://pic.imgdb.cn/item/6392fd2db1fccdcd36c029a3.png" style="zoom:80%;">
<h2><span id="classpath">CLASSPATH</span></h2>
<p>同理添加一个名为CLASSPATH的变量，变量值为</p>
<p><code> .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code></p>
<p>这里需注意：</p>
<ul>
<li>CLASSPATH变量中的字符必须是英文字符</li>
<li>此处的%JAVA_HOME%意为对上一个JAVA_HOME的引用，即JDK的安装路径</li>
</ul>
<img src="https://pic.imgdb.cn/item/6391e15eb1fccdcd3633b5d5.png" style="zoom: 80%;">
<p>随后一路确定，即配置完成</p>
<h1><span id="测试">测试</span></h1>
<p>win+r查看cmd，输入<code>java -version</code>查看JDK版本信息</p>
<img src="https://pic.imgdb.cn/item/6391e1f1b1fccdcd36358bae.png" style="zoom: 80%;">
<h1><span id="总结">总结</span></h1>
<h2><span id="为什么要配置环境变量">为什么要配置环境变量?</span></h2>
<h3><span id="path">path</span></h3>
<p>将JDK的bin目录写入系统环境变量path中</p>
<ol>
<li>
<p>JDK编译原理：编译源码时需要在DOS命令行中输入命令，执行JDK的bin目录下的某个可执行文件(.exe)；</p>
<p>windows首先在当前目录下查找是否存在所指的可执行文件，若没有找到，再到path环境变量指定的目录中查找，若仍未找到，则报错</p>
</li>
<li>
<p>若未配置path变量：通过绝对路径找到JDK的bin目录后才能使用相应的命令</p>
</li>
<li>
<p>若已配置path变量：在DOS命令行中的任何路径下都能使用相应的命令</p>
</li>
</ol>
<h3><span id="java_home">JAVA_HOME</span></h3>
<p>将JDK目录写入JAVA_HOME环境变量中，再将JAVA_HOME配置给其他需要配置JDKbin目录的环境变量</p>
<ol>
<li>若未配置JAVA_HOME：
<ol>
<li>当多个环境变量配置了JDK的bin目录时，修改JDK版本号也就需要修改所有关联JDK的环境变量</li>
</ol>
</li>
<li>若已配置JAVA_HOME：
<ol>
<li>修改JDK路径只需要更新JAVA_HOME的路径</li>
<li>部分第三方软件约定使用JAVA_HOME来指定JDK路径（Tomcat）</li>
</ol>
</li>
</ol>
<h3><span id="classpath一般不需配置">CLASSPATH（一般不需配置）</span></h3>
<p>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</p>
<blockquote>
<ol>
<li>不同路径由<code>;</code>隔开</li>
<li><code>.</code>指的是当前路径</li>
<li>其余两条路径<code> %JAVA_HOME%\lib\dt.jar</code>、<code>%JAVA_HOME%\lib\tools.jar</code>。</li>
</ol>
</blockquote>
<p>将上述写入CLASSPATH环境变量中</p>
<ol>
<li>
<p>源码编译后生成的字节码文件，执行文件需要通过DOS命令行中输入执行命令，交由JVM执行处理</p>
<p>JVM的类加载器从CLASSPATH路径中查找字节码文件，JDK1.5及以上CLASSPATH默认为当前路径</p>
</li>
<li>
<p>若未配置CLASSPATH：JVM无法查找不在当前目录下的字节码文件（报错）</p>
</li>
<li>
<p>若配置CLASSPATH：JVM可以执行CLASSPATH路径中的字节码文件</p>
</li>
</ol>
<p>一般而言，对于要编译运行的代码会在当前路径进行，因此，CLASSPATH一般不需要配置</p>
<p><strong>CLASSPATH中为什么要有当前路径</strong></p>
<p>因为未配置CLASSPATH会从当前目录下找字节码文件，而<strong>配置了CLASSPATH后只会从CLASSPATH的路径下寻找</strong></p>
<p><strong>当两个类被分别放在不同目录下，但两个类之间存在调用另一个类的方法，如何使两个类正常运行？</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;11111111&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test2</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args&#123;</span></span><br><span class="line"><span class="params">		System.out.println(<span class="string">&quot;222222222&quot;</span>)</span>;</span><br><span class="line">     	test1.show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>test2类调用了test1类的方法，经过测试我们无法直接编译test2.Java源文件</p>
<p><img src="https://pic.imgdb.cn/item/639318d0b1fccdcd36f02e1e.png" alt></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac -classpath &quot;另一个类所处目录路径&quot; test2.java</span><br></pre></td></tr></table></figure>
<p>通过Java命令-classpath修改CLASSPATH路径，实现对test2的编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -classpath .;&quot;另一个类所处目录路径&quot; test2</span><br></pre></td></tr></table></figure>
<p>执行.class文件时，仅配置了另一个类所处目录的路径会找不到当前要执行的test2.class，因此加上当前目录，即可运行</p>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>JVM内存结构</title>
    <url>/post/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/101495810">JVM内存模型（详解） - 知乎 (zhihu.com)</a></p>
<p><img src="https://pic.imgdb.cn/item/63ae5b6208b6830163cf8eca.png" alt="JVM内存模型"></p>
<h3><span id="程序计数器program-counter-register">程序计数器（Program Counter Register）</span></h3>
<p>是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令：分支、跳转、循环、异常处理、线程恢复等基础操作都会依赖这个计数器来完成。每个线程都有独立的程序计数器，用来在线程切换后能恢复到正确的执行位置，各条线程之间的计数器互不影响，独立存储。所以它是一个“线程私有”的内存区域。</p>
<h3><span id="本地方法栈-native-method-stack">本地方法栈（ Native Method Stack）</span></h3>
<p>本地方法栈和虚拟机栈所发挥的作用是很相似的，它们之间的区别是虚拟机栈为虚拟机执行Java方法（字节码）服务，而本地方法栈则为虚拟机使用到的Native方法（由其它语言实现）服务。</p>
<span id="more"></span>
<h3><span id="虚拟机栈vm-stack">虚拟机栈（VM Stack）</span></h3>
<p>JVM栈是线程私有的内存区域。主要存放方法执行数据</p>
<ol>
<li>每个方法执行时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法返回地址等信息</li>
<li>局部变量表存放各种基本数据类型、对象引用（reference类型，指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress类型（指向了一跳字节码指令的地址）</li>
<li>动态连接（Dynamic Linking）通过每个栈帧都包含一个指向该栈帧所属方法（常量池）的引用，在<strong>运行期间</strong>将指向该方法的<a href="../Java%E5%8A%A0%E8%BD%BD%E5%8F%8A%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/#%E8%A7%A3%E6%9E%90">符号引用</a>转化为直接引用
<ol>
<li>静态解析：在类加载的解析阶段或者第一次使用时将指向该方法的符号引用转化为直接引用，</li>
</ol>
</li>
</ol>
<h3><span id="堆heap">堆（Heap）</span></h3>
<p>通常情况下，它占用的空间是所有内存区域中最大的</p>
<ol>
<li>存储实例对象、数组、成员变量</li>
<li>堆由垃圾收集器自动回收，堆区由各子线程共享使用</li>
<li>堆的内存空间既可以固定大小，也可运行时动态地调整</li>
</ol>
<h3><span id="方法区method-area">方法区（Method Area）</span></h3>
<p>线程共享的内存区域</p>
<ol>
<li>存储字节码文件，包含所有的class文件和static变量(静态域)、常量(常量池)、即时编译后的代码等数据</li>
<li>静态域：存放类中以static声明的静态成员变量</li>
<li>常量池：在编译期间就将一部分数据存放于该区域，包含以final修饰的基本数据类型的常量值、String字符串。（在java6时它是方法区的一部分；1.7又把他放到了堆内存中；1.8之后出现了元空间，它又回到了方法区）</li>
</ol>
<h3><span id="类成员存储">类成员存储</span></h3>
<h3><span id="前提">前提</span></h3>
<p><a href="../%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%8F%8A%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86">类加载及执行原理</a></p>
<h3><span id="属性存储">属性存储</span></h3>
<p>属性根据声明位置不同分为成员变量和局部变量</p>
<ol>
<li>局部变量声明在方法体中，在程序执行过程中随着方法被调用一起入栈，存储在栈的栈帧的局部变量表中</li>
<li>成员变量分为静态变量和实例变量
<ol>
<li>静态变量在类加载的准备阶段分配在方法体的静态域中，并设置初始值</li>
<li>实例变量则在程序执行中和对象实例一起存放在堆中</li>
</ol>
</li>
</ol>
<h3><span id="方法存储">方法存储</span></h3>
<p>方法根据是否用static修饰可以分为静态方法和实例方法</p>
<ol>
<li>实例方法：创建对象实例时，对象实例和该对象中的实例方法被存放在堆中，通过实例对象的引用调用实例方法</li>
<li>静态方法：随着类加载而加载到方法区中，但不会自动执行，可通过类名.方法名访问</li>
</ol>
<h4><span id="实例方法调用过程">实例方法调用过程</span></h4>
<ol>
<li>在JVM中的一个进程中，每个线程都会拥有一个<strong>方法调用栈</strong>，用于跟踪线程运行中一系列的方法调用过程</li>
<li>当线程调用一个方法时就会向方法栈中压入一个新栈帧。<strong>栈帧</strong>是用于支持虚拟机进行方法调用和方法执行的数据结构，也是虚拟机运行时数据区中的虚拟机栈的栈元素。</li>
<li>每个<strong>方法从调用开始至执行结束的过程</strong>，都对应着一个栈帧在虚拟机栈里面从<strong>入栈到出栈的过程</strong></li>
<li>当方法执行完成时，该栈帧就会<strong>弹出栈帧的元素作为这个方法的返回值</strong>（参数传递），并且清除这个栈帧</li>
<li><strong>栈顶</strong>的栈帧就是当前正在执行的方法</li>
<li>每个栈帧都包含一个<strong>指向运行时常量池中该栈帧所属方法的引用</strong>，持有这个引用是为了支持方法调用过程中的动态连接</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Function</span> <span class="variable">function</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Function</span>();  <span class="comment">//function是对象引用存在栈中，new Funciotn()的实例放在堆中（包含方法区中的类型信息(方法信息等)引用等）。</span></span><br><span class="line">        function.out2();  <span class="comment">//调用out2方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Function</span>&#123; <span class="comment">//运行时把加载之后的Function的信息存入方法区（类型信息、常量、静态变量、方法信息等）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了out1方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out2</span><span class="params">()</span>&#123;</span><br><span class="line">        out1();   <span class="comment">//这块调用out1主要是为了展示栈帧和栈帧中的动态链接</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行了out2方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>启动Java虚拟机进程，通过<a href="../%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%8F%8A%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86">类加载机制</a>加载编译后的.class文件</p>
</li>
<li>
<p>JVM定位到方法区中静态方法Main()的字节码，将main方法转换为栈帧压入方法调用栈，并开始顺序执行它的指令：</p>
<blockquote>
<p>Function function = new Function();<br>
function.out2();</p>
</blockquote>
</li>
<li>
<p>Function function = new Function():</p>
<ol>
<li>加载Function类。 把Function类的相关信息存放在了方法区中</li>
<li>JVM在堆中为一个新的Function类的实例分配内存。该实例有着指向方法区的Function类的类型信息的引用（内存地址）</li>
<li>使function变量指向堆区中的Function实例。即function变量有指向Function类的实例的引用。变量function为局部变量，因此它会被JVM存放到执行main()方法的方法调用栈中</li>
</ol>
</li>
<li>
<p>function.out2():</p>
<ol>
<li>
<p>将根据局部变量function的引用，定位到堆中的Function类的实例，再根据Function类的实例的引用，定位到方法区中Function类的类型信息（包括类，静态变量，静态方法，常量和成员方法），从而获取out2()方法的字节码</p>
</li>
<li>
<p>将out2()方法压入方法调用栈，并顺序执行out2()方法中的指令</p>
<blockquote>
<p>out1();<br>
System.out.println(“我是Yi_ding的方法”);</p>
</blockquote>
<ol>
<li>out2()方法调用out1()方法。根据动态链接（在运行时期将常量池中指向方法的符号引用转换为直接引用）来获取out1()方法的直接引用，并将out1()方法压入方法调用栈，并顺序执行out1()方法中的指令</li>
<li>输出&quot;执行了out1方法&quot;</li>
<li>out1()方法执行完成，out1()方法出栈</li>
</ol>
</li>
<li>
<p>输出&quot;执行了out2方法&quot;</p>
</li>
<li>
<p>out2()方法执行完成，out2()方法出栈</p>
</li>
</ol>
</li>
<li>
<p>main()方法执行完成，main()方法出栈，程序执行结束</p>
</li>
</ol>
<img src="https://pic.imgdb.cn/item/63b2fb02be43e0d30e96d7da.jpg" style="zoom:150%;">
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>Java加载及执行原理</title>
    <url>/post/Java%E5%8A%A0%E8%BD%BD%E5%8F%8A%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2><span id="执行原理">执行原理</span></h2>
<p>编程人员编写.Java源文件，经过编译器编译(javac)成.class字节码文件，字节码文件通过JVM的类加载器加载至执行引擎，执行引擎执行(java)字节码文件并与操作系统交互。</p>
<span id="more"></span>
<p><img src="https://pic.imgdb.cn/item/6393113db1fccdcd36e17411.png" alt="执行过程"></p>
<h3><span id="编译阶段">编译阶段</span></h3>
<p>D:\下创建test01.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>在当前目录下进行编译，并在当前目录下生成test01.class字节码文件</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/02/130bf3bc382780ee.png" alt></p>
</li>
<li>
<p>在其他路径下通过绝对路径进行编译，仍在源码文件所在目录下生成字节码文件</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/02/782b383f69589ba7.png" alt></p>
</li>
<li>
<p>在1、2的基础上，使用-d 指定字节码文件生成目录</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/02/af54a909625867df.png" alt></p>
</li>
</ol>
<h3><span id="运行阶段">运行阶段</span></h3>
<ol>
<li>
<p>一般情况下，在当前目录下编译后会同时生成字节码文件，可通过当前路径执行</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/02/7f4e27cb96dcc047.png" alt></p>
</li>
<li>
<p>无法通过绝对路径找到类文件并执行</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/02/b2dce9cb62d3b626.png" alt></p>
</li>
</ol>
<h3><span id="执行不同路径下且存在调用的两个源文件">执行不同路径下且存在调用的两个源文件</span></h3>
<p>D:\下创建test01.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test02.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>D:\test\下创建test02.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>无论是通过绝对路径还是当前路径都无法独立编译test01.java</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/02/caf29fba40fbf402.png" alt></p>
</li>
<li>
<p>可通过两个文件的绝对路径同时进行编译（不适用声明了包的情况）</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/02/80e02d460eefa549.png" alt></p>
</li>
<li>
<p>配置CLASSPATH环境变量为两个文件的路径后，可以在不同路径下找到字节码文件并执行（不适用声明了包的情况）</p>
</li>
</ol>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/02/6e6926b3fc5f7887.png" alt></p>
<p><strong>package与import</strong></p>
<ol>
<li>
<p>package：从项目路径到当前文件夹，文件夹间由 . 隔开</p>
</li>
<li>
<p>import：从项目路径到调用的类文件，（不在同一文件夹下的的源文件调用需要导入）</p>
<blockquote>
<p>不建议用*表示某个文件夹下的所有文件,当导入的包数量过多时，使用*容易发生类名冲突</p>
</blockquote>
</li>
<li>
<p>导入声明和包的声明必须从同一个项目路径开始</p>
</li>
</ol>
<p>在Test02.java中声明包，项目路径为包含了src的文件夹</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Test01.java中导入Test02</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src;</span><br><span class="line"><span class="keyword">import</span> src.main.Test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Test02.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>必须在指定的项目路径下，通过绝对路径编译Test01.java（自动编译导入的文件）</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/02/8870e5d31d536773.png" alt></p>
</li>
<li>
<p>运行时在指定的项目路径下，通过包名.类名执行</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/02/2bf77240219f1aa9.png" alt></p>
</li>
<li>
<p>也可以通过-cp指定到项目路径下，通过包名.类名执行</p>
<p><img src="/post/Java%E5%8A%A0%E8%BD%BD%E5%8F%8A%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/C:%5CUsers%5Cmomo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230202151851177.png" alt="image-20230202151851177"></p>
</li>
</ol>
<p><strong>静态导入</strong></p>
<p>访问不同路径下的源文件的静态成员，一般使用 类名.方法名或类名.属性名，使用静态导入即可直接使用方法名或属性名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> src.main.Test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        show();	<span class="comment">//直接通过方法名访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="类加载的过程">类加载的过程</span></h2>
<p><img src="https://pic.imgdb.cn/item/63d672baface21e9ef12a400.jpg" alt></p>
<p>加载、验证、准备、解析和初始化5个阶段</p>
<h3><span id="加载">加载</span></h3>
<ol>
<li>通过类的全限定名来获取定义此类的二进制字节流</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>
<li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li>
</ol>
<h3><span id="验证">验证</span></h3>
<p>目的是确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全</p>
<h3><span id="准备">准备</span></h3>
<p>正式为类中定义的变量（即静态变量）分配内存并设置类变量初始值</p>
<ul>
<li>
<p>从概念上讲，这些变量所使用的内存都应当在方法区中进行分配，但方法区本身是一个逻辑上的区域（在JDK7及之前，HotSpot使用永久代来实现方法区时，实现是完全符合这种逻辑概念的；而在JDK8及之后，类变量则会随着Class对象一起存放在Java堆中，这时候“类变量在方法区”就完全是一种对逻辑概念的表述了）</p>
</li>
<li>
<p>内存分配只包括类变量，而不包括实例变量。实例变量将会在对象实例化时随着对象一起分配在Java堆中。</p>
</li>
<li>
<p>初始值通常指数据类型的零值。赋值指令是程序被编译后，存放于类构造器()方法之中，所以赋值动作要到类的初始化阶段才会被执行。</p>
</li>
</ul>
<h3><span id="解析">解析</span></h3>
<p>所有目标方法都是通过符号引用（在Class文件的常量池中）来调用。在类加载的解析阶段，会将部分<strong>符号引用</strong>转化为<strong>直接引用</strong>。这些符号引用所属的方法在程序运行前就有一个可确定的调用版本，且在运行期不可改变（编译期可知，运行期不可变）。换句话说，调用目标在程序代码写好、编译器进行编译那一刻就已经确定下来。</p>
<p>主要指静态方法和私有方法，前者与类型直接关联，后者在外部不可被访问，这两种方法各自的特点决定了它们都不可能通过继承或别的方式重写出其他版本，因此它们都适合在类加载阶段进行解析。</p>
<p>主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符</p>
<blockquote>
<p>符号引用：以一组符号来描述所引用的目标。符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。</p>
<p>直接引用：直接引用是可以直接指向目标的指针。相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。</p>
</blockquote>
<ul>
<li>
<p>虚拟机实现时可以自行判断，是在类被加载器加载时，还是等到符号引用将被使用时，对常量池中的符号引用进行解析</p>
</li>
<li>
<p>解析阶段中对它们的可访问性（public、protected、 private、）进行检查</p>
</li>
</ul>
<h3><span id="初始化">初始化</span></h3>
<p>Java虚拟机真正开始执行类中编写的Java程序代码</p>
<ul>
<li>
<p>准备阶段时，变量已经赋过一次系统要求的初始零值，而在初始化阶段，则会根据程序代码来初始化类变量和其他资源</p>
</li>
<li>
<p>初始化阶段是执行类构造器&lt;clint&gt;()方法的过程。</p>
</li>
</ul>
<h3><span id="ltclintgt方法">&lt;clint&gt;()方法</span></h3>
<ol>
<li>
<p>&lt;clint&gt;()不是代码中程序员直接编写的方法，它是Javac编译器的自动生成物</p>
</li>
<li>
<p>&lt;clint&gt;()方法由编译器自动收集并合并类中的所有类变量的赋值动作和静态代码块中的语句，收集的顺序与语句在源文件中出现的顺序一致</p>
</li>
<li>
<p>JVM会保证在子类的&lt;clint&gt;()方法执行前，父类的&lt;clint&gt;()方法已经执行完毕。&lt;clint&gt;()方法与类的实例构造函数不同，它不需要显式地调用父类构造器，父类的&lt;clint&gt;()方法会优先先执行，也就意味着父类的静态语句块要优先于子类的变量赋值操作，具体查看<a href="../%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F">类加载的初始化顺序</a></p>
</li>
<li>
<p>如果类中没有静态语句块、对变量的赋值操作，编译器可以不为这个类生成&lt;clint&gt;()方法</p>
</li>
<li>
<p>即使接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成&lt;clint&gt;()方法。但接口与类不同的是，父接口的&lt;clint&gt;()方法不需要先于子接口的&lt;clint&gt;()方法执行，接口的实现类在初始化时也不会先执行接口的&lt;clint&gt;()方法。因为只有当父接口中定义的变量被使用时，父接口才会被初始化。</p>
</li>
</ol>
<h3><span id="源文件-类-字节码文件">源文件、类、字节码文件</span></h3>
<ul>
<li>源文件中可包含一个或多个类</li>
<li>源文件中至多有一个类被public修饰，当源文件中有public修饰类，原文件名必须与public修饰类名一致，当源文件中没有public修饰类，则源文件名与类名没有关系</li>
<li>在编译的过程中，对应每个类会生成相应的.class字节码文件，也就是说，当源文件中存在多个类时，编译完成后，会生成多个与类名一致的.class字节码文件</li>
<li>执行过程中，只需要指定字节码文件运行</li>
</ul>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>Java文档注释</title>
    <url>/post/Java%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<h1><span id="引言">引言</span></h1>
<ul>
<li>
<p>注释可以提高代码的可读性，清晰完整的注释便于程序调试的过程</p>
</li>
<li>
<p>于编程者而言，书写注释是编程路上必须具有的良好习惯</p>
</li>
<li>
<p>对代码的解释说明,就像产品的说明书一样,良好的注释会减少团队的沟通成本</p>
</li>
</ul>
<span id="more"></span>
<ul>
<li>单行注释	/注释文字/</li>
<li>多行注释    /<em>注释文字</em>/     多行注释中不能有多行注释嵌套</li>
</ul>
<h1><span id="文档注释">文档注释</span></h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span>	指定java程序的作者</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> 指定源文件的版本</span></span><br><span class="line"><span class="comment"><span class="doctag">@since</span> 自从哪个版本号开始就存在了</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的程序的说明文档。</p>
<p>操作方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javadoc –d mydoc –author –version FileName.java</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>Java语言概述</title>
    <url>/post/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1><span id="介绍">介绍</span></h1>
<p>Java 是一种<strong>高级的、面向对象的、健壮的、多线程的、可跨平台的</strong>程序设计语言</p>
<span id="more"></span>
<h1><span id="java语言的特点">Java语言的特点</span></h1>
<h2><span id="简单">简单</span></h2>
<p>Java相较于C语言<strong>少了复杂的指针，仅支持单继承</strong></p>
<h2><span id="面向对象封装-继承-多态">面向对象（封装、继承、多态）</span></h2>
<h2><span id="健壮">健壮</span></h2>
<p>Java相较于C语言，<strong>无需开发人员对内存进行管理</strong>，Java本身预留一条线程监测内存并自动申请或释放（GC机制）</p>
<h2><span id="多线程">多线程</span></h2>
<p>Java支持<strong>多条线程并发进行</strong></p>
<h2><span id="跨平台">跨平台</span></h2>
<p>通过Java语言编写的应用程序可以在<strong>不同系统环境下运行</strong>（JVM）</p>
<h1><span id="java技术体系平台">Java技术体系平台</span></h1>
<h2><span id="javase">JavaSE</span></h2>
<p>Java标准版，主要面向<strong>桌面级应用程序</strong>的开发，为JavaEE、JavaME提供基础</p>
<h2><span id="javaee">JavaEE</span></h2>
<p>Java企业版，主要用于<strong>企业应用的、部署在服务器端的Java应用程序</strong>的开发</p>
<h2><span id="javame">JavaME</span></h2>
<p>Java微型版，支持Java在<strong>嵌入式等移动终端</strong>上运行</p>
<h2><span id="三者之间的关系">三者之间的关系</span></h2>
<p>JavaEE和JavaME都包含了JavaSE，因此学习JavaSE是学习JavaEE、JavaME的基础</p>
<img src="https://pic.imgdb.cn/item/6391cce1b1fccdcd36138138.png" alt="三者之间关系" style="zoom: 50%;">
<h1><span id="jvm-jre-jdk三者关系">JVM、JRE、JDK三者关系</span></h1>
<h2><span id="jvmjava-virtual-machine">JVM（Java Virtual Machine）</span></h2>
<p>Java虚拟机，Java源代码经过编译后生成的字节码需要通过Java虚拟机才能在不同的操作系统环境下运行。Java虚拟机是Java实现跨平台运行的关键。</p>
<p>JVM如何实现Java跨平台运行？</p>
<ul>
<li>对于不同的系统环境，提供了相对应的Java虚拟机</li>
<li>JVM接收源代码编译后的字节码，屏蔽了操作系统下的底层运行原理</li>
</ul>
<img src="https://pic.imgdb.cn/item/6391d2a8b1fccdcd361c1520.png" alt="JVM实现原理" style="zoom: 50%;">
<h2><span id="jrejava-runtime-environment">JRE（Java Runtime Environment）</span></h2>
<p>Java运行环境，JRE包括JVM以及一些Java基本类库，JRE可满足运行Java应用程序的需求。</p>
<h2><span id="jdkjava-development-kit">JDK（Java Development Kit）</span></h2>
<p>Java开发工具包，JDK包括JRE以及Java开发工具，提供给开发人员使用</p>
<img src="https://pic.imgdb.cn/item/6391e28cb1fccdcd363743c4.png" style="zoom:50%;">
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>linux</title>
    <url>/post/Linux/</url>
    <content><![CDATA[<h1><span id="linux命令">Linux命令</span></h1>
<p>服务器版的Linux是没有图形化界面的，只能通过在控制台输入Linux命令来操作系统，类似在windows下使用DOS命令。学习Linux，主要是学习Linux的各种命令。</p>
<p>在学习命令之前，让我们先来了解一下Linux命令的格式，包含3个部分（[]表示可选）：</p>
<p>Linux命令格式：<strong>command</strong> <strong>[options]</strong> <strong>[arguments]</strong></p>
<p><strong>command：命令名称，必需的</strong></p>
<p><strong>options：选项，可选的</strong></p>
<p><strong>arguments：参数，可选的</strong></p>
<p>命令名称、选项以及参数之间使用空格分隔，不同的命令完成不同的操作，关键是选项和参数（比较容易混淆）：</p>
<p><strong>选项</strong><em><strong>options：*<strong>选项是调整命令行为的因素，选项不同决定了命令的结果不同。选项又分为</strong>长选项和短选项</strong>。<strong>短选项（<strong><strong>short options</strong></strong>）</strong>：1. 格式多为中划线+选项，选项多为单个字母或数字，当有多个短选项时，各选项之间使用空格隔开，例如-a，-b，-2，-c  -d等。2. 大多短选项可以组合，例如-a -b，可以简写为-ab3. 大多短选项都有与之对应的长选项，但如果有短选项，一般不使用长选项 短选项：-h  与之对应的长选项： --help <strong>长选项（long</strong> <strong>options</strong>**）</em><em>：1. 格式为两个中划线+选项，选项多为一个单词，例如–help，–list等2. 都是完整的单词，通常不能组合  <strong>参数</strong></em>**arguments：***参数表示命令的操作对象，例如，在Linux中，查看目录使用ls，不加参数时显示的是当前目录，也可以加参数，例如：ls /dev，则查看 /dev 目录</p>
<p>简单总结：命令操作的对象叫参数，选项用来指定操作的方式。比如说杀猪，杀是命令，猪就是参数，而选项是杀猪的方式，可以是残忍的杀：一刀捅死，不死再来一刀；也可以是温柔的杀：让它吃到撑死，幸福的死去。。。</p>
<p>Linux的命令成千上万，课程中不能一一涉及，也没有必要一一涉及，根据程序员在日常工作中的需求，总结出如下几种供学习使用。</p>
<p>提示：Linux中很多（不是所有）命令对选项和参数的顺序没有要求，但通常选项在前，参数在后</p>
<h2><span id="目录切换命令">目录切换命令</span></h2>
<p>在windows中通过图形化界面和鼠标可以任意切换需要进入的目录，而Linux必须通过cd命令切换目录。</p>
<p>目录结构</p>
<p>![img](file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml5020\wps1.jpg)</p>
<p><strong>命令</strong>：cd 目录</p>
<p><strong>说明</strong>：从当前目录，切换到其它目录</p>
<p><strong>选项</strong>：无</p>
<p><strong>参数</strong>：目标目录</p>
<p><strong>示例</strong>：</p>
<p>cd					切换到当前用户的主目录</p>
<p>cd  /				切换到系统根目录</p>
<p>cd  /usr			切换到根目录下的usr目录</p>
<p>cd  demo		切换到当前目录下的demo目录</p>
<p>cd  …			切换到当前目录的上一层目录</p>
<p>cd ~				切换到用户主目录</p>
<p>cd -				切换到上一个所在目录（上一个是指你上一个访问的路径，相当于http协议的来路）</p>
<p><strong>小提示：输入<strong><strong>clear</strong></strong>命令清屏，或者是****Ctrl</strong> <strong>+ L</strong></p>
<h2><span id="目录操作命令">目录操作命令</span></h2>
<h3><span id="查看目录">查看目录★★★★★</span></h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>选项</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>ls</td>
<td>-a   -l</td>
<td>目录路径，默认为当前目录</td>
</tr>
</tbody>
</table>
<p><strong>说明</strong>：ls(list)，该命令用于查看指定目录中的文件和文件夹</p>
<p><strong>选项</strong>：</p>
<p>-a(all)	表示所有，包括隐藏的文件和文件夹，在Linux中，以点开头的文件都是隐藏文件</p>
<p>-l(list)	使用详细格式列表</p>
<p><strong>示例</strong>：</p>
<p>ls			查看当前目录中的文件，不包含隐藏文件</p>
<p>ls -a		查看当前目录下的所有文件，包括隐藏的</p>
<p>ls -a -l	使用详细格式列表查看当前目录下的所有文件，选项还可以连着写：ls -al</p>
<p>ls /			查看根目录/中的文件，不包含隐藏文件</p>
<p>ls -al  /		使用详细格式列表查看根目录下的所有文件，选项和参数的顺序不影响结果，还可以这样写：ls / -al</p>
<p>小提示：ls -l 可以缩写成ll</p>
<h3><span id="创建目录">创建目录</span></h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>创建目录</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>命令名称</td>
<td>mkdir</td>
<td>(make directory)</td>
</tr>
<tr>
<td>选项</td>
<td>[-p]</td>
<td>(parents) 用于一次创建多级目录，避免上级目录不存在或已存在报错</td>
</tr>
<tr>
<td>选项</td>
<td>[-v]</td>
<td>(verbose) 显示创建信息</td>
</tr>
<tr>
<td>参数</td>
<td>目录1 目录2 …</td>
<td>创建目录，可以一次创建多个目录，多个目录之间使用空格</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>mkdir demo</td>
<td>在根目录下创建demo目录</td>
</tr>
<tr>
<td>mkdir a b</td>
<td>在当前目录下创建a和b两个目录</td>
</tr>
<tr>
<td>mkdir -v /demo/c</td>
<td>创建/demo/c目录，并显示创建信息</td>
</tr>
<tr>
<td>mkdir -p /demo/d/a</td>
<td>创建/demo/d/a，如果不加p选项，则a的上级目录不存在会报错</td>
</tr>
</tbody>
</table>
<p>在创建目录时，建议都加上选项-p，即使创建的目录已经存在，也不会发生错误</p>
<h3><span id="改名和剪切移动">改名和剪切（移动）</span></h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>创建目录</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>命令名称</td>
<td>mv</td>
<td>(move)</td>
</tr>
<tr>
<td>参数</td>
<td>原名 新名</td>
<td>将源文件重命名</td>
</tr>
<tr>
<td>参数</td>
<td>文件1 文件2… 目标目录</td>
<td>将源文件移动到指定的目录</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>mv a b</td>
<td>如果b不存在，表示将a改名为b，如果b（目录）存在，表示将a移动到b</td>
</tr>
<tr>
<td>mv a b c</td>
<td>将a和b移动到c</td>
</tr>
</tbody>
</table>
<h3><span id="复制目录">复制目录</span></h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>创建目录</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>命令名称</td>
<td>cp</td>
<td>(copy)</td>
</tr>
<tr>
<td>选项</td>
<td>[-v]</td>
<td>(verbose) 显示复制进度及详细信息</td>
</tr>
<tr>
<td>选项</td>
<td>[-r]</td>
<td>(recursive) 如果复制的是目录，则递归复制目录及其子目录内的所有内容</td>
</tr>
<tr>
<td>参数</td>
<td>文件1  文件2 …  目标目录</td>
<td>将多个指定的文件复制到目标目录</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>cp -r a b c</td>
<td>将a和b复制到c目录</td>
</tr>
<tr>
<td>cp -vr /demo/c  b</td>
<td>将/demo/c复制到b目录，并显示相关信息</td>
</tr>
<tr>
<td>cp  1.txt  a</td>
<td>复制1.txt到a目录下</td>
</tr>
<tr>
<td>cp  1.txt  a/11.txt</td>
<td>复制1.txt到a目录下，并改名为11.txt</td>
</tr>
</tbody>
</table>
<p>./  当前目录</p>
<p>…/	上级目录</p>
<h3><span id="删除目录">删除目录</span></h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>创建目录</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>命令名称</td>
<td>rm</td>
<td>(remove)</td>
</tr>
<tr>
<td>选项</td>
<td>[-r]</td>
<td>(recursive) 如果删除的是目录，则递归删除目录及其子目录内的所有内容</td>
</tr>
<tr>
<td>选项</td>
<td>[-f]</td>
<td>(force) 强制删除。忽略不存在的文件，并且在删除时不给出确认的提示信息</td>
</tr>
<tr>
<td>选项</td>
<td>[-v]</td>
<td>(verbose) 显示删除进度及详细信息</td>
</tr>
<tr>
<td>参数</td>
<td>文件1 文件2 …</td>
<td>将多个指定的文件复制到目标目录</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>rm -r /demo/c</td>
<td>删除/demo/c目录，删除过程中需要输入y以确认删除</td>
</tr>
<tr>
<td>rm -rf /demo/b</td>
<td>不要询问，强制删除demo/b目录</td>
</tr>
<tr>
<td>rm -rf a b</td>
<td>不要询问，强制删除a和b两个文件</td>
</tr>
<tr>
<td>rm -rfv /demo/*</td>
<td>删除/demo目录下的所有文件，并显示相关信息</td>
</tr>
</tbody>
</table>
<p>提示：为了方便记忆，无论删除任何目录或文件，都直接使用rm -rf 文件…</p>
<h2><span id="文件操作命令">文件操作命令</span></h2>
<h3><span id="创建文件">创建文件</span></h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>创建目录</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>命令名称</td>
<td>touch</td>
<td>/</td>
</tr>
<tr>
<td>参数</td>
<td>文件1 文件2 …</td>
<td>创建多个空文本文件</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>touch /demo/test</td>
<td>在/demo目录下创建文件&quot;test&quot;，该文件是文本文件，只是没有后缀名</td>
</tr>
</tbody>
</table>
<h3><span id="修改文件">修改文件★★★★★</span></h3>
<ol>
<li><code>vim 文件名</code>：进入“命令模式”，此时还不能编辑</li>
<li>按下 <code>i</code>：从命令模式，进入“编辑模式”，对文件进行编辑</li>
<li>编辑完成，按下<code>esc</code>从“编辑模式”回到“命令模式”</li>
<li>输入<code>:wq</code>，从命令模式进入底行模式，保存并退出</li>
</ol>
<h4><span id="命令模式">命令模式</span></h4>
<p>进入插入模式：</p>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>i(insert)</td>
<td>在光标前插入</td>
</tr>
<tr>
<td>shift + i</td>
<td>在光标当前行开始插入</td>
</tr>
<tr>
<td>a</td>
<td>在光标后插入</td>
</tr>
<tr>
<td>shift + a</td>
<td>在光标当前行末尾插入</td>
</tr>
<tr>
<td>o</td>
<td>在光标当前行的下一行插入新行</td>
</tr>
<tr>
<td>shift + o</td>
<td>在光标当前行的上一行插入新行</td>
</tr>
</tbody>
</table>
<p>进入底行模式：</p>
<p>“:”或 “/”或 “?”</p>
<p>其他操作：</p>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>yy</td>
<td>单行复制，复制光标所在的行</td>
</tr>
<tr>
<td>nyy</td>
<td>多行复制，将光标移动到将要复制的首行处，复制n行，n是一个数字</td>
</tr>
<tr>
<td>p</td>
<td>粘贴，将光标移动到将要粘贴的行处</td>
</tr>
<tr>
<td>gg</td>
<td>定位到文本的第一行</td>
</tr>
<tr>
<td>shift + g</td>
<td>到文本的最后一行</td>
</tr>
<tr>
<td>dd</td>
<td>删除光标所在行</td>
</tr>
<tr>
<td>ndd</td>
<td>删除从光标开始的n行</td>
</tr>
</tbody>
</table>
<h4><span id="插入模式">插入模式</span></h4>
<p>只有在该模式下，才可以做文字输入</p>
<p>按「ESC」可以回到命令行模式。</p>
<h4><span id="底行模式">底行模式</span></h4>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>:q</td>
<td>quit，退出vim（没有做任何修改时）</td>
</tr>
<tr>
<td>:q!</td>
<td>强制退出不保存</td>
</tr>
<tr>
<td>:w</td>
<td>write，保存不退出</td>
</tr>
<tr>
<td>:wq</td>
<td>保存后退出</td>
</tr>
<tr>
<td>/字符串</td>
<td>从光标位置往后查找指定的字符串  按n查找下一个匹配的结果  Shift+n上一个匹配结果</td>
</tr>
<tr>
<td>?字符串</td>
<td>从光标位置往前查找指定的字符串</td>
</tr>
</tbody>
</table>
<h3><span id="查看文件">查看文件</span></h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>创建目录</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>命令名称</td>
<td>cat</td>
<td>/</td>
</tr>
<tr>
<td>命令名称</td>
<td>tac</td>
<td></td>
</tr>
<tr>
<td>命令名称</td>
<td>less</td>
<td></td>
</tr>
<tr>
<td>命令名称</td>
<td>more</td>
<td></td>
</tr>
<tr>
<td>命令名称</td>
<td>head</td>
<td></td>
</tr>
<tr>
<td>命令名称</td>
<td>tail</td>
<td></td>
</tr>
<tr>
<td>参数</td>
<td>文件</td>
<td>每种方式都可以查看文件，但是查看的方式不同</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>head /etc/sudo.conf -n 10</code></td>
<td>查看最前面10行(默认)，Ctrl+C结束</td>
</tr>
<tr>
<td><code>tail /etc/sudo.conf -n 10</code></td>
<td>查看最后面10行(默认)，Ctrl+C结束</td>
</tr>
<tr>
<td><code>cat -n /etc/sudo.conf</code></td>
<td>只能显示最后一屏内容，-n表示显示行号</td>
</tr>
<tr>
<td><code>tac /etc/sudo.conf</code></td>
<td>只能显示最前一屏内容，并且是倒着的</td>
</tr>
</tbody>
</table>
<p><code>less /etc/sudo.conf</code></p>
<table>
<thead>
<tr>
<th>操作</th>
<th>按键</th>
</tr>
</thead>
<tbody>
<tr>
<td>向下一行</td>
<td>回车或向下键</td>
</tr>
<tr>
<td>向上一行</td>
<td>向上键</td>
</tr>
<tr>
<td>上下翻页</td>
<td>PgUp和PgDn，或者ctrl+f(forward)向下翻页，ctrl+b(back)向上翻</td>
</tr>
<tr>
<td>上下翻半页</td>
<td>u (up)  d (down)</td>
</tr>
<tr>
<td>进入编辑模式</td>
<td>按 v (vim)</td>
</tr>
<tr>
<td>退出</td>
<td>按q (quit)</td>
</tr>
<tr>
<td>搜索</td>
<td>/ + 【搜索关键字】+回车</td>
</tr>
</tbody>
</table>
<p><code>more  /etc/sudo.conf</code></p>
<p>查看内容，并显示已查看内容的百分比</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>按键</th>
</tr>
</thead>
<tbody>
<tr>
<td>向下一行</td>
<td>回车</td>
</tr>
<tr>
<td>向上一行</td>
<td>无</td>
</tr>
<tr>
<td>上下翻页</td>
<td>ctrl+f(forward)向下翻页，ctrl+b(back)向上翻</td>
</tr>
<tr>
<td>进入编辑模式</td>
<td>按 v (vim)</td>
</tr>
<tr>
<td>退出</td>
<td>按q (quit) 或看完自动退出</td>
</tr>
</tbody>
</table>
<h3><span id="删除文件-复制-改名-剪切">删除文件、复制、改名、剪切</span></h3>
<p>见目录相关的操作</p>
<h3><span id="压缩文件">压缩文件</span></h3>
<p>windows的压缩文件的扩展名  .zip/.rar</p>
<p>linux中的打包文件：.tar  把多个文件打包，体积不变</p>
<p>linux中的压缩文件：.gz	 把多个文件压缩成一个文件，体积变小</p>
<p>linux中打包并压缩的文件：.tar.gz</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>创建目录</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>命令名称</td>
<td>tar</td>
<td>(make directory)</td>
</tr>
<tr>
<td>选项</td>
<td>[-z]</td>
<td>调用gzip压缩命令进行压缩</td>
</tr>
<tr>
<td>选项</td>
<td>[-c]</td>
<td>创建压缩文件</td>
</tr>
<tr>
<td>选项</td>
<td>[-v]</td>
<td>显示过程</td>
</tr>
<tr>
<td>选项</td>
<td>[-f]</td>
<td>指定压缩后的文件名</td>
</tr>
<tr>
<td>参数</td>
<td>处理后的文件名 被处理的文件路径</td>
<td>创建目录，可以一次创建多个目录，多个目录之间使用空格</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>tar  -zcvf  xxx.tar.gz  /demo/*</td>
<td>打包并压缩/demo下的所有文件，压缩后的压缩包指定名称为xxx.tar.gz</td>
</tr>
</tbody>
</table>
<h3><span id="解压文件">解压文件</span></h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>创建目录</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>命令名称</td>
<td>tar</td>
<td>(make directory)</td>
</tr>
<tr>
<td>选项</td>
<td>[-x]</td>
<td>解压</td>
</tr>
<tr>
<td>选项</td>
<td>[-v]</td>
<td>显示过程</td>
</tr>
<tr>
<td>选项</td>
<td>[-f]</td>
<td>指定解压后的文件名</td>
</tr>
<tr>
<td>参数</td>
<td>压缩文件 [-C 目录]</td>
<td>C表示解压到哪个目录</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>tar -xvf xxx.tar.gz</td>
<td>将xxx.tar.gz解压到当前目录下</td>
</tr>
</tbody>
</table>
<h2><span id="其他命令">其他命令</span></h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>查看帮助</td>
<td>(命令名称) --help</td>
<td>mkdir --help</td>
</tr>
<tr>
<td>显示当前位置</td>
<td>pwd</td>
<td></td>
</tr>
<tr>
<td>显示所有的进程</td>
<td>ps -ef</td>
<td></td>
</tr>
<tr>
<td>结束进程</td>
<td>kill [-9] pid （9表示强制，pid是进程的id）</td>
<td>kill -9 123，强制结束进程id为123的进程</td>
</tr>
</tbody>
</table>
<h3><span id="关键字搜索">关键字搜索</span></h3>
<p><code>grep -i (--color)</code>：  要搜索的字符串或文件，-i表示忽略大小写 --color表示高亮显示</p>
<p>如搜索/etc/sudu.conf文件中包含字符串to的行：<code>grep -i  to /etc/sudo.conf (--color)</code></p>
<h3><span id="管道命令">管道命令</span></h3>
<p><code>命令1 | 命令2</code>：将前一个命令的输出作为后一个命令的输入（参数）</p>
<p>如查看当前系统中所有的进程中包括Administ字符串的进程：<code>ps -ef | grep -i Administ</code></p>
<p><img src="https://pic.imgdb.cn/item/64b1f22f1ddac507cce0b2f6.jpg" alt></p>
<h3><span id="网络通信命令">网络通信命令</span></h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ifconfig</td>
<td>查看当前系统的网卡信息</td>
</tr>
<tr>
<td>ping 192.168.1.123</td>
<td>查看与某台机器的连接情况</td>
</tr>
<tr>
<td>netstat -nao</td>
<td>查看当前系统的端口使用</td>
</tr>
<tr>
<td>reboot</td>
<td>重启命令</td>
</tr>
<tr>
<td>halt</td>
<td>立即关机</td>
</tr>
</tbody>
</table>
<h1><span id="文件上传-下载">文件上传、下载</span></h1>
<h2><span id="sftp了解">sftp（了解）</span></h2>
<ol>
<li>
<p>按Alt + p打开sftp窗口，在sftp窗口中，一样可以使用命令来操作Linux中的文件，例如：</p>
</li>
<li>
<p>切换到根目录：cd /</p>
<p>在根目录下创建abc目录：mkdir /abc</p>
<p>查看当前所在的目录：pwd</p>
<p>但是有些命令无法使用，例如软件安装命令rpm等，因此一般只使用sftp上传文件</p>
</li>
<li>
<p>还可以像操作Linux那样来作本地文件，例如：</p>
<p>切换到本地d盘：lcd d:/</p>
<p>在d盘下创建abc目录：lmkdir d:/abc</p>
<p>查看在本地的当前位置：lpwd</p>
<p>规律就是在命令前加小写的l（唉偶。。。）</p>
</li>
<li>
<p>新建目录/usr/soft，一般软件包都放在这，并进入该目录</p>
</li>
<li>
<p>mkdir /usr/soft</p>
<p>cd /usr/soft</p>
</li>
<li>
<p>上传本地文件</p>
</li>
<li>
<p>上传本地文件到Linux：put -r 文件…</p>
<p>下载Linux文件到本地：get -r 文件…</p>
</li>
</ol>
<p>可以先使用lcd命令进入要上传的文件所在的目录（过程中多使用Tab键提示，多使用lpwd查看本地当前所在的位置）</p>
<p>然后输入命令：put -r 文件… 或者 put -r 文件全路径</p>
<p>​	注意：如果上传或下载的文件中有文件夹，必须使用-r(递归)，如果只是文件，可以不加</p>
<p>其它技巧：Ctrl+U  可以快速删除已输入的命令</p>
<h2><span id="rzsz重点">rzsz（重点）</span></h2>
<p>使用rz命令完成文件上传，默认没有rz命令，需要安装才能使用</p>
<h3><span id="安装rzsz">安装rzsz</span></h3>
<p>网络安装</p>
<ol>
<li>使用图形化界面工具将资料中的 “软件仓库文件/CentOS-Base.repo”上传到Linux的 /etc/yum.repos.d/ 目录下</li>
<li>执行安装命令 yum install lrzsz</li>
</ol>
<p>文件上传：输入命令rz，回车，会弹出选择文件的窗口，双击要上传的文件，添加到上传列表，可以一次上传多个文件，点击OK开始上传</p>
<p>文件下载：输入命令sz 文件…  回车即可</p>
<p>文件上传和下载的默认位置（可选设置）</p>
<p>![img](file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml1840\wps1.jpg)</p>
<p>![img](file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml1840\wps2.jpg)</p>
<h1><span id="软件安装命令">软件安装命令</span></h1>
<table>
<thead>
<tr>
<th>命令</th>
<th>创建目录</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>命令名称</td>
<td>rpm</td>
<td>/</td>
</tr>
<tr>
<td>选项</td>
<td>[-i]</td>
<td>安装指定的软件</td>
</tr>
<tr>
<td>选项</td>
<td>[-e]</td>
<td>删除指定的软件</td>
</tr>
<tr>
<td>选项</td>
<td>[-U]</td>
<td>升级指定的软件</td>
</tr>
<tr>
<td>选项</td>
<td>[-q] 软件包</td>
<td>查询指定软件包</td>
</tr>
<tr>
<td>选项</td>
<td>[-a]</td>
<td>查询所有软件包，需要配合选项q一起使用</td>
</tr>
<tr>
<td>选项</td>
<td>[-h]</td>
<td>显示指令执行过程</td>
</tr>
<tr>
<td>选项</td>
<td>[-v]</td>
<td>显示安装进度</td>
</tr>
<tr>
<td>选项</td>
<td>[–nodeps]</td>
<td>不验证软件包之间的依赖  a依赖b软件  直接安装a，不让安装</td>
</tr>
<tr>
<td>选项</td>
<td>[–nosignature]</td>
<td>安装时，不进行签名验证</td>
</tr>
<tr>
<td>选项</td>
<td>[–replacepkgs]</td>
<td>如果已经安装，则重新安装</td>
</tr>
<tr>
<td>参数</td>
<td>软件包</td>
<td>创建多个空文本文件</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>rpm  -ivh  rpm文件</td>
<td>安装</td>
</tr>
<tr>
<td>rpm  -e  --nodeps  软件名</td>
<td>删除</td>
</tr>
<tr>
<td>rpm  -Uvh  rpm文件</td>
<td>升级</td>
</tr>
<tr>
<td>rpm -qa | grep -i mysql</td>
<td>查看</td>
</tr>
</tbody>
</table>
<h1><span id="安装jre">安装JRE</span></h1>
<table>
<thead>
<tr>
<th>jdk</th>
<th>jre</th>
</tr>
</thead>
<tbody>
<tr>
<td>开发工具和jre</td>
<td>java软件的运行环境</td>
</tr>
</tbody>
</table>
<p>查看当前Linux系统是否已经安装java</p>
<p><code>rpm -qa | grep -i java</code></p>
<p>卸载查找到的openJDK</p>
<p>rpm -e --nodeps java-XXX</p>
<p>使用rz命令上传jre到linux，或者使用图形化界面，解压jdk到/usr/soft</p>
<p>​	cd /usr/soft</p>
<p>​	tar -xvf  jre-8u211-linux-x64.tar.gz</p>
<ol start="5">
<li>配置jdk环境变量</li>
</ol>
<p>​	编辑配置文件/etc/profile：vim /etc/profile</p>
<p>​	Shift+g快速定位到该文件的最下方，然后按o，在当前行的下一行插入如下内容：jre1.8.0_211</p>
<p>​	#set java environment</p>
<p>​	JAVA_HOME=/usr/soft/jre1.8.0_211</p>
<p>​	PATH=$JAVA_HOME/bin:$PATH</p>
<p>​	CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</p>
<p>​	export JAVA_HOME PATH CLASSPATH</p>
<p>![img](file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml1840\wps5.jpg)</p>
<ol start="6">
<li>重新加载/etc/profile配置文件</li>
</ol>
<p>命令：. /etc/profile <strong>或</strong> source /etc/profile</p>
<p>![img](file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml1840\wps6.jpg)</p>
<p>\7. 测试安装： 输入 java</p>
<p>![img](file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml1840\wps7.jpg)</p>
<h1><span id="安装mysql">安装MySQL</span></h1>
<p>步骤：</p>
<p>\1. 查看CentOS自带的mysql</p>
<p>命令：rpm -qa | grep -i mysql</p>
<p>![img](file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml1840\wps8.jpg)</p>
<p>\2. 将自带的mysql卸载</p>
<p>命令：rpm -e --nodeps mysql-libs-5.1.73-8.el6_8.x86_64</p>
<p>![img](file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml1840\wps9.jpg)</p>
<p>\3. 使用rz命令上传MySQL到linux</p>
<p>\4. 解压MySQL到/usr/soft/下的mysql目录</p>
<p>cd /usr/soft</p>
<p>mkdir mysql</p>
<p>tar -xvf MySQL-5.6.36-1.el6.x86_64.rpm-bundle.tar -C mysql</p>
<p>![img](file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml1840\wps10.jpg)</p>
<p>\5. 在/usr/soft/mysql下安装mysql</p>
<p>切换到mysql：cd /usr/soft/mysql</p>
<p>安装服务器端：rpm -ivh MySQL-server-5.6.36-1.el6.x86_64.rpm --nosignature</p>
<p>安装客户端：rpm -ivh MySQL-client-5.6.36-1.el6.x86_64.rpm --nosignature</p>
<p>\6. 启动mysql</p>
<p>service mysql start</p>
<p>\7. 将mysql加到系统服务中并设置开机启动</p>
<p>加入到系统服务：chkconfig --add mysql</p>
<p>自动启动：chkconfig mysql on</p>
<p>\8. 登录mysql</p>
<p>mysql安装好后会生成一个临时随机密码，存储位置在，查看密码：head /root/.mysql_secret</p>
<p>mysql -uroot -p密码 回车</p>
<p>\9. 修改mysql的密码</p>
<p>set password = password(‘123456’);</p>
<p>\10. 开启mysql的远程登录权限</p>
<p>默认情况下mysql为安全起见，不支持远程登录mysql，所以需要设置开启	远程登录mysql的权限</p>
<p>登录mysql后输入如下命令：</p>
<p>grant all privileges on <em>.</em> to ‘root’ @‘%’ identified by ‘123456’;</p>
<p>flush privileges;</p>
<p>此处的密码必须和步骤9中的一致！</p>
<p>\11. 开放Linux的对外访问的端口3306</p>
<p>/sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</p>
<p>/etc/rc.d/init.d/iptables save —将修改永久保存到防火墙中</p>
<p>\12. 修改mysql的编码方式为utf8</p>
<p>mysql默认使用的编码方式是：latin1，需要修改为utf8，当前编码方式可以执行如下<strong>SQL</strong>进行查看</p>
<p>show variables like ‘character%’;</p>
<p>show variables like ‘coll%’;</p>
<p>![img](file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml1840\wps11.jpg)</p>
<p>mysql的配置信息在/usr/my.cnf中，编辑该文件，添加如下配置：</p>
<p>vim /usr/my.cnf</p>
<p>[mysqld]</p>
<p>…</p>
<p>character_set_server=utf8</p>
<p>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</p>
<p>[client]</p>
<p>default-character-set=utf8</p>
<p>如下图所示：</p>
<p>![img](file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml1840\wps12.jpg)</p>
<p>编辑完成之后，按ESC，输入&quot;:wq&quot;保存并退出</p>
<p>重启mysql服务器，service mysql restart</p>
<p>再次执行<strong>SQL</strong>查看编码方式：</p>
<p>![img](file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml1840\wps13.jpg)</p>
<h1><span id="安装tomcat">安装Tomcat</span></h1>
<ol>
<li>
<p>上传Tomcat到linux上</p>
</li>
<li>
<p>解压Tomcat到/usr/soft下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/soft</span><br><span class="line">tar -xvf  apache-tomcat-9.0.65.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>开放Linux的对外访问的端口8080</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport <span class="number">8080</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line">/etc/rc.d/init.d/iptables save </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动tomcat，进入bin目录下 <code>./startup.sh</code></p>
</li>
<li>
<p>关闭tomcat，进入bin目录下<code>./shutdown.sh</code></p>
</li>
</ol>
<p>注意：在linux中执行某个文件时，一定要加&quot;./&quot;，不能直接文件名，否则会当做命令来执行</p>
<h1><span id="项目部署">项目部署</span></h1>
]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown 入门使用</title>
    <url>/post/Markdown%20%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2><span id="介绍">介绍</span></h2>
<p>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书等。</p>
<span id="more"></span>
<h2><span id="标题">标题</span></h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 标题1</span></span><br><span class="line"><span class="section">## 标题2</span></span><br><span class="line"><span class="section">### 标题3</span></span><br><span class="line"><span class="section">#### 标题4</span></span><br><span class="line"><span class="section">##### 标题5</span></span><br><span class="line"><span class="section">###### 标题6</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h1><span id="标题1">标题1</span></h1>
<h2><span id="标题2">标题2</span></h2>
<h3><span id="标题3">标题3</span></h3>
<h4><span id="标题4">标题4</span></h4>
<h5><span id="标题5">标题5</span></h5>
<h6><span id="标题6">标题6</span></h6>
</blockquote>
<h2><span id="列表">列表</span></h2>
<h3><span id="有序列表">有序列表</span></h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">把大象放进冰箱：</span><br><span class="line"><span class="bullet">1.</span> 打开冰箱</span><br><span class="line"><span class="bullet">2.</span> 把大象放进冰箱</span><br><span class="line"><span class="bullet">3.</span> 关上冰箱</span><br></pre></td></tr></table></figure>
<blockquote>
<p>把大象放进冰箱:</p>
<ol>
<li>打开冰箱</li>
<li>把大象放进冰箱</li>
<li>关上冰箱</li>
</ol>
</blockquote>
<h3><span id="无序列表">无序列表</span></h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">无序列表：</span><br><span class="line"><span class="bullet">-</span> 所爱扥就</span><br><span class="line"><span class="bullet">-</span> 撒欧丹发腮</span><br><span class="line"><span class="bullet">-</span> 哦啊赛季反扒</span><br></pre></td></tr></table></figure>
<blockquote>
<p>无序列表：</p>
<ul>
<li>所爱扥就</li>
<li>撒欧丹发腮</li>
<li>哦啊赛季反扒</li>
</ul>
</blockquote>
<h2><span id="任务列表">任务列表</span></h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">明天要做的事：	</span><br><span class="line"><span class="bullet">-</span> [ ] 吃饭	//每个字符之间由空格隔开	</span><br><span class="line"><span class="bullet">-</span> [ ] 睡觉</span><br><span class="line"><span class="bullet">-</span> [ ] 打豆豆</span><br></pre></td></tr></table></figure>
<blockquote>
<p>明天要做的事：</p>
<ul>
<li>[x] 吃饭</li>
<li>[x] 睡觉</li>
<li>[ ] 打豆豆</li>
</ul>
</blockquote>
<h2><span id="代码块">代码块</span></h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">``` c      //选择语言</span></span><br><span class="line"><span class="code">int main()&#123;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;<span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">&gt;&#125;</span><br><span class="line">```markdown</span><br><span class="line"></span><br><span class="line">## 数学公式：</span><br><span class="line"></span><br><span class="line">``` markdown</span><br><span class="line">$$</span><br><span class="line">\frac&#123;\partial f&#125;&#123;\partial x&#125; = <span class="number">2</span>\<span class="built_in">sqrt</span>&#123;a&#125;x</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>$$<br>
\frac{\partial f}{\partial x} = 2\sqrt{a}x<br>
$$</p>
</blockquote>
<h2><span id="表格">表格</span></h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">|姓名|年龄|成绩|</span><br><span class="line">|:--|--:|:-----:| </span><br><span class="line"><span class="code">			//冒号靠左为左对齐，靠右为右对齐，两边都有冒号为居中对齐</span></span><br><span class="line"><span class="code">|张三|18|90|</span></span><br><span class="line"><span class="code">|李四|20|89|</span></span><br></pre></td></tr></table></figure>
<blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">姓名</th>
<th style="text-align:right">年龄</th>
<th style="text-align:center">成绩</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">张三</td>
<td style="text-align:right">18</td>
<td style="text-align:center">90</td>
</tr>
<tr>
<td style="text-align:left">李四</td>
<td style="text-align:right">20</td>
<td style="text-align:center">89</td>
</tr>
</tbody>
</table>
</blockquote>
<h2><span id="脚注">脚注</span></h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是一条注释[^注释]</span><br><span class="line">[<span class="symbol">^注释</span>]:<span class="link">这是注释的注释。</span></span><br><span class="line"> ---</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是一条注释<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
<hr>
</blockquote>
<h2><span id="超链接">超链接</span></h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">百度</span>](<span class="link">http://www.baidu.com &quot;一个搜索引擎&quot;</span>)</span><br><span class="line">[<span class="string">百度</span>][<span class="symbol">id</span>]</span><br><span class="line">[<span class="symbol">id</span>]:<span class="link">http://www.baidu.com &quot;一个搜索引擎&quot;</span></span><br><span class="line"></span><br><span class="line">请参考[<span class="string">标题1</span>](<span class="link">#标题</span>)</span><br><span class="line"></span><br><span class="line">URL：</span><br><span class="line">http://www.baidu.com</span><br><span class="line"></span><br><span class="line">![<span class="string">百度</span>](<span class="link">https://imgse.com/i/z2p2JH&quot;百度搜索&quot;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://www.baidu.com" title="一个搜索引擎">百度</a><br>
<a href="http://www.baidu.com" title="一个搜索引擎">百度</a></p>
<p>请参考<a href="#%E6%A0%87%E9%A2%98">标题1</a></p>
<p>URL：<br>
<a href="http://www.baidu.com">http://www.baidu.com</a></p>
<p><img src="https://pic.imgdb.cn/item/63914551b1fccdcd36559921.png%22%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%22" alt="百度"></p>
</blockquote>
<h2><span id="字体变化">字体变化</span></h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line"><span class="strong">**加粗**</span></span><br><span class="line"><span class="code">`行内代码printf()`</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line">:smile:</span><br><span class="line">$\theta=x^2$</span><br><span class="line">H~2~O,x^2^</span><br><span class="line">==这是一段高亮文字==</span><br></pre></td></tr></table></figure>
<blockquote>
<p><em>斜体</em><br>
<strong>加粗</strong><br>
<code>行内代码printf()</code><br>
<u>下划线</u><br>
😄<br>
$\theta=x^2$<br>
H<sub>2</sub>O,x<sup>2</sup><br>
==这是一段高亮文字==</p>
</blockquote>
<h2><span id="参考视频">参考视频</span></h2>
<iframe src="//player.bilibili.com/player.html?aid=327623069&bvid=BV1JA411h7Gw&cid=171385214&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>这是注释的注释。 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
  </entry>
  <entry>
    <title>Object类</title>
    <url>/post/Object%E7%B1%BB/</url>
    <content><![CDATA[<p>Object类是所有类的根类,如果一个类没有显示的继承其他类,默认继承Object</p>
<p>Object的类型变量可以指向任意类型的子类对象</p>
<span id="more"></span>
<h2><span id="int-hashcode">int hashCode()</span></h2>
<p>返回该对象的哈希码值 ，可以类似的看做虚拟内存地址</p>
<p>hashCode作用是用于散列表（hash算法）中的一个参数（寻找到一个数组下标位）【用于HashSet集合去重重复的关键参数之一】</p>
<ul>
<li>引用类型（注意是没有重写过hashCode）Object计算hashCode是以对象的地址为基本数据，进行二进制换算</li>
<li>String对象的字符序列一样，则hashCode一样</li>
<li>值类型的数值一旦一样，则hashCode一样</li>
<li>布尔的哈希值true=1231,false=1237</li>
</ul>
<p><strong>String对象的hashCode设计</strong></p>
<ul>
<li>目标是达到较为均匀的散列效果，每个字符串的 hashCode 足够独特</li>
<li>字符串中的每个字符都可以表现为一个数字，称为 $S_i$，其中 i 的范围是 0 ~ n - 1</li>
<li>散列公式为： $S_0∗31^{(n-1)}+ S_1∗31^{(n-2)}+ … S_i ∗ 31^{(n-1-i)}+ …S_{(n-1)}∗31^0$</li>
<li>31 代入公式有较好的散列特性，并且 31 * h 可以被优化为
<ul>
<li>即 $32 ∗h -h $</li>
<li>即 $2^5  ∗h -h$</li>
<li>即 $h≪5  -h$</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hash;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span> val[] = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">            h = <span class="number">31</span> * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="classltgt-getclass">Class&lt;?&gt; getClass()</span></h2>
<p>返回此对象的运行时类。看创建对象是哪个类</p>
<table>
<thead>
<tr>
<th>getClass()</th>
<th>getClass().getName()</th>
<th>getClass().getSimpleName()</th>
</tr>
</thead>
<tbody>
<tr>
<td>class  包名.类名</td>
<td>包名.类名</td>
<td>类名</td>
</tr>
</tbody>
</table>
<h2><span id="string-tostring">String toString()</span></h2>
<p>返回该对象的字符串表示。</p>
<ul>
<li>
<p>默认实现 类的全限定名@hashcode的十六进制</p>
</li>
<li>
<p>自定义类如果不想按照上面的格式输出 需要重写toString()</p>
</li>
</ul>
<h2><span id="protected-void-finalize">protected void finalize()</span></h2>
<p>当对象不再被程序使用时，垃圾回收器将会将其回收</p>
<p>垃圾回收是在后台运行的，我们无法命令垃圾回收器马上回收资源，但是我们可 以告诉他，尽快回收资源（<strong>System.gc</strong> 和 Runtime.getRuntime().gc()）</p>
<p>垃圾回收器在回收某个对象的时候，首先会调用该对象的 finalize 方法</p>
<p>GC 主要针对堆内存 当垃圾收集器将要收集某个垃圾对象时将会调用 finalize，建议不要使用此方法，因为此方法的运行时间不确定，如果执行此方法出现错误，程序不会报告，仍然继续运行</p>
<h2><span id="boolean-equalsobject-obj">boolean equals(Object obj)</span></h2>
<p>指示其他某个对象是否与此对象“相等”。</p>
<h2><span id="和-equals-区别">== 和 equals 区别?</span></h2>
<table>
<thead>
<tr>
<th>== 比较运算符</th>
<th>equals是object中的方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>既可以比较基本数据类型 也可以比较引用数据类型</td>
<td>只能比较引用数据类型</td>
</tr>
<tr>
<td>对于引用数据类型，比较的是地址</td>
<td>默认情况下equals方法底层使用==实现, 和 equals比较结果是一样</td>
</tr>
<tr>
<td></td>
<td>可重写成比较属性是否相等</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;<span class="comment">//存储在方法区同一地址下</span></span><br><span class="line">System.out.println(str1 == str2);<span class="comment">//true</span></span><br><span class="line">System.out.println(str1.equals(str2));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(str3 == str4);<span class="comment">//false</span></span><br><span class="line">System.out.println(str3.equals(str4));<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>比较引用数据类型，使用equals更好</p>
<p>对于File、String、Date及包装类来说，是比较类型及内容而不考虑引用的是否是同一个对象；</p>
<p>原因：在这些类中重写了Object类的 equals()方法</p>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>SSM</title>
    <url>/post/SSM/</url>
    <content><![CDATA[<h2><span id="环境搭建">环境搭建</span></h2>
<h3><span id="导入依赖">导入依赖</span></h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以统一的定义依赖的版本号，方便修改，避免版本号不一致;子标签名称自定义--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-version</span>&gt;</span>5.3.20<span class="tag">&lt;/<span class="name">spring-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">mybatis-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="springmvc">SpringMVC</span></h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="servlet">Servlet</span></h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet原生技术的相关依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="spring">Spring</span></h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring框架基础环境依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="comment">&lt;!--与spring-webmvc重复--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- aop程序所需的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring框架和junit结合使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--junit单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="mybatis-数据库">Mybatis、数据库</span></h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--spring和mybatis结合使用的依赖包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis框架的环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DBUtils工具类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql数据库的驱动包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库连接池，阿里巴巴的德鲁伊连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分页插件jar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="其他">其他</span></h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- lombok，省略实体类中的相关的方法定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志相关依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jboss-vfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.16.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--json数据转换包，将其他数据类型，转换为String字符串(json字符串)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      src/main/java目录下默认情况下只对.java文件进行编译。</span></span><br><span class="line"><span class="comment">      该配置可以添加其它类型的文件也进行编译。</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="配置文件">配置文件</span></h3>
<h4><span id="springapplicationxml">SpringApplication.xml</span></h4>
<ol>
<li>IOC注解扫描</li>
<li>AOP注解驱动</li>
<li>mybatis.xml
<ol>
<li>导入外部资源文件</li>
<li>数据库连接池及连接配置</li>
<li>日志配置</li>
<li>SqlSessionFactory</li>
</ol>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--IOC和DI的注解扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.dao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.service&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--AOP的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--从mybatis中转移过来的--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入外部的资源文件  classpath: 表示路径，加入一个文件名即可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--提供一个数据源,连接池负责处理登录数据库的信息，可以把连接池对象交给具体操作数据库的那个工具类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;configuration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.session.Configuration&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.apache.ibatis.logging.stdout.StdOutImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--依然需要mybatis的SqlSessionFactory工厂的。负责获取连接对象,</span></span><br><span class="line"><span class="comment">    需要被MapperScannerConfigurer加载</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用一个数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置mybatis运行的日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configuration&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;configuration&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--实体类类名简化,如果是多个包可以使用数组类型，如果是一个包可以使用字符串类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.bjpowernode.pojo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--若mapper.xml配置在mapper文件夹的xml文件夹下，则需要声明以下--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/bjpowernode/mapper/xml/*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--分页插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--读取mybatis框架的配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;configurer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--统一配置mapper文件所在的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.bjpowernode.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--读取上方配置好的工程对象,引用的是一个对象但是使用的是value,左边的变量是String类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--=======================使用AOP完成事务管理控制=========================--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用spring框架提供好类完成事务管理，此种写法称之为声明式事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--针对事务管理的类DataSourceTransactionManager进行进一步的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--针对service中的方法进行细节化的事务管理配置</span></span><br><span class="line"><span class="comment">                区分CRUD</span></span><br><span class="line"><span class="comment">                写法支持通配模式；可以自己定义service中的方法哪些要添加事务管理，哪些不需要添加</span></span><br><span class="line"><span class="comment">                name:service中的方法名，add*表示以add开头的任意名称</span></span><br><span class="line"><span class="comment">                rollback-for:表示name中的方法要添加事务管理，如果发生异常需要回滚，爆出一个异常Exception</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;insert*&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;READ_COMMITTED&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;edit*&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;del*&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;abc*&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transFer&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果是查询的方法，是不需要事务管理的</span></span><br><span class="line"><span class="comment">            read-only:表示事务只读，不添加事务管理</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过AOP的方式完成最终的绑定，最终的效果--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--service方法的位置,使用切入点表达式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *..service..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="springmvc-configxml">SpringMVC-config.xml</span></h4>
<ol>
<li>注解扫描</li>
<li>注解驱动</li>
<li>请求静态资源</li>
<li>视图解析器</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.web&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注解驱动:框架提供的一系列的简化写法,推荐不论用或不用，都添加--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--响应结果的前缀，页面之前的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--响应结果的前缀，页面之后的扩展名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="webxml">web.xml</span></h4>
<ol>
<li>servlet添加SpringMVC配置</li>
<li>listener添加Spring配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span> <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--配置springMVC的核心控制器，可以让框架能够接收请求--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--读取springMVC的核心配置文件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--添加一个监听器，目的是为了读取spring配置文件(spring中自动读取mybatis配置文件)--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--加载spring配置文件，自动的被上面的监听器读取--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springApplication.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--字符编码过滤器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="crud">CRUD</span></h2>
<p><a href="https://github.com/biyixia/java-code.git">https://github.com/biyixia/java-code.git</a></p>
]]></content>
      <categories>
        <category>第三阶段</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot</title>
    <url>/post/Spring%20Boot/</url>
    <content><![CDATA[<h2><span id="说明">说明</span></h2>
<p>​	springboot作为引擎启动程序，不是一个新的框架，可以将ssm以更简洁的方式完成应用；<br>
​	之前的ssm程序需要模块化，一堆配置，服务器等等，现在只需要使用springboot简化配置。<br>
​</p>
<p>使用springboot的前提:<br>
1.需要搞定Spring Framework<br>
2.更多的是处理web应用，需要搞定springMVC<br>
3.程序可能需要数据库的支持，需要搞定JDBC体系(mybatis)<br>
4.web应用需要服务器的支持，需要搞定服务器软件(tomcat)<br>
springboot的特点:<br>
1.可以快速的创建spring应用，快速启动(启动器)<br>
2.可以快速加载第三方配置，简化程序的配置，以最少的内容快速启动</p>
<p>注意：之前的配置现在依然是需要的，只不过之前是需要程序员自己定义，现在是将这些配置<br>
全部交给springboot内部完成。</p>
<h2><span id="创建springboot工程">创建springboot工程</span></h2>
<ol>
<li>Spring官方：<a href="https://start.spring.io">https://start.spring.io</a></li>
<li>阿里云：<a href="https://start.aliyun.com">https://start.aliyun.com</a></li>
<li>Spring Boot：<a href="https://start.springboot.io">https://start.springboot.io</a></li>
</ol>
<p>注意:程序需要编译，打包等操作，可能会出现打包时有异常（跳过测试检查）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="工程结构">工程结构</span></h2>
<p>​	static:springboot中专门存放页面的路径(webapp目录),名称是不能改变的。<br>
​	application.properties：名称固定的配置文件,键值对模式的配置文件，<br>
​						    之前的所有配置都可以在这个文件中，<br>
​							使用的全部都是默认值。<br>
​							还有一种配置文件是.yml文件。<br>
​	注解扫描问题:<br>
​		1.在启动器的类之上添加注解扫描(不推荐使用)<br>
​				@ComponentScan(basePackages = {“com.bjpowernode.controller”,“com.bjpowernode.service”})<br>
​		2.启动器所在的包，所有的注解都可以被自动识别，可以将所有的程序放在此位置，<br>
​				注解就会被自动的识别。<br>
​	注意：手动将程序中的所有内容打包时，可能会提示有问题:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="视图层使用jsp">视图层使用jsp</span></h2>
<p>官方不推荐</p>
<p><strong>视图模块添加处理jsp页面的依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>配置jsp文件编译输出的路径</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.jsp<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>创建webapp文件夹为页面的根目录(可以放入jsp了),允许添加视图解析器</strong></p>
<pre><code>    静态资源(图片,js,css.....)放在/resources/static
</code></pre>
]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/post/SpringMVC/</url>
    <content><![CDATA[<h2><span id="导入依赖">导入依赖</span></h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="配置文件">配置文件</span></h2>
<h3><span id="springmvc-configxml">SpringMVC-config.xml</span></h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注解扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.web&quot;</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--响应结果的前缀，页面之前的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--响应结果的前缀，页面之后的扩展名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注解驱动:框架提供的一系列的简化写法,推荐不论用或不用，都添加--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="webxml">web.xml</span></h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置springMVC的核心控制器，可以让框架能够接收请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--讀取SpringMVC核心配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:SpringMVC-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--控制Servlet实例化時間--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="匹配优先级">匹配优先级</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/helloWorld&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestServlet运行了................&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/helloWorld&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello01</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorldController运行了................&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述Servlet与Controller对应的请求都是“/helloWorld”，但是由于@WebServlet注解相当于直接在web.xml中配置</p>
<p>当有一个“/helloWorld”请求时，先访问web.xml，其中的@WebServlet(“/helloWorld”)优先级高于 “/”，因此不会向下执行Controller中的hello01，而执行TestServlet中的doGet方法。</p>
<h2><span id="web-inf">WEB-INF</span></h2>
<ol>
<li>WEB-INF目录可以称之为是安全文件夹，此目录可以保护和限制前端页面；</li>
<li>此目录下的所有子目录以及所有的资源，不允许通过路径拼接访问，也不允许响应重定向跳转(限制)，只允许请求转发的方式跳转此页面(保护)。</li>
<li>推荐：后面可以将前端页面(不包含静态资源)，放入此文件夹。</li>
</ol>
<h2><span id="常用注解">常用注解</span></h2>
<h3><span id="controller">@Controller</span></h3>
<ol>
<li>@Component注解的别名</li>
<li>在类（控制器）上使用，将此类的实例交给spring容器管理</li>
</ol>
<h3><span id="requestmapping">@RequestMapping</span></h3>
<ol>
<li>在类和方法使用，确定访问路径和类及类中方法的映射关系</li>
<li>在类上使用时，value值作为一级路径(模块)存在，方便团队分模块开发</li>
<li>在方法上使用时，value值作为二级路径，表示模块中的不同功能</li>
<li>路径可以是uri变量，并且通过@PathVariable注解获取作为方法的参数。也可以是通配符来筛选请求地址</li>
</ol>
<p><strong>常用属性</strong></p>
<ol>
<li>value***：一级或二级路径</li>
<li>method : 限定请求方式，只能使用指定的请求方式，没有该属性则表示不限制请求方式</li>
<li>params 指定请求的时候必须携带指定的参数(或者参数及其对应值)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello.html&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/jsp/success.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只能使用post方式来访问</span></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;hello2.html&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;hello2.html&quot;)</span> <span class="comment">// 同上</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/jsp/success.jsp&quot;</span>;</span><br><span class="line">        <span class="comment">//使用视图解析器后可简写成 return &quot;success.jsp&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;hello3.html&quot;, params = &#123;</span></span><br><span class="line"><span class="meta">            &quot;username&quot;, // 必须携带username参数，不限制值</span></span><br><span class="line"><span class="meta">            &quot;type=1&quot;    // 必须携带type参数，值必须是1</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/jsp/success.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="requestparam">@RequestParam</span></h3>
<ol>
<li>@RequestParam:框架帮助程序接收请求参数（将参数封装成map集合）</li>
<li>属性“defaultValue”设置默认值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;request06&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello06</span><span class="params">(<span class="meta">@RequestParam(defaultValue =&quot;女1&quot;)</span> String sex)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;DemoRequestController类接收到了请求&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(sex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; <span class="comment">//默认使用的请求转发跳转到一个页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="cookievalue了解">@CookieValue(了解)</span></h3>
<p>获取指定cookie的值</p>
<h2><span id="springmvc的请求传统请求">SpringMVC的请求（传统请求）</span></h2>
<h3><span id="接收请求参数重点掌握">接收请求参数(重点掌握)</span></h3>
<h4><span id="简单类型">简单类型</span></h4>
<ol>
<li>8种基本数据类型(包括包装类型)和String类型</li>
<li>方法中的参数名和请求参数的名称保持一致</li>
<li>如果使用的是基本数据类型，必须有数据，否则因为默认值的原因，程序会出现500的异常</li>
<li>如果是String对象字符串，可以不赋值，使用null来表示</li>
<li>推荐写法: 将基本数据类型改为包装类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;request02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello02</span><span class="params">(Integer id,String name,Double score)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;DemoRequestController类接收到了请求&quot;</span>);</span><br><span class="line">	<span class="comment">//http://localhost:8080/request02?id=123&amp;&amp;name=biyixia&amp;&amp;score=100</span></span><br><span class="line">    System.out.println(id);<span class="comment">//123</span></span><br><span class="line">    System.out.println(name);<span class="comment">//biyixia</span></span><br><span class="line">    System.out.println(score);<span class="comment">//100.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; <span class="comment">//默认使用的请求转发跳转到一个页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="对象类型pojo">对象类型pojo</span></h4>
<p>对象类型数据(自定义类型数据)， 直接在方法中声明需要封装的pojo，请求参数名称需要和类中的属性名一致！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;request03&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello03</span><span class="params">(Account account)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;DemoRequestController类接收到了请求&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(account);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; <span class="comment">//默认使用的请求转发跳转到一个页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="数组类型">数组类型</span></h4>
<ol>
<li>
<p>请求参数名和数组的名称一致</p>
</li>
<li>
<p>请求参数的格式：</p>
<ol>
<li>
<p>常规写法： <code>http://127.0.0.1/request04?ids=1&amp;ids=2&amp;ids=234</code></p>
</li>
<li>
<p>简化写法(如需使用，需要添加框架的注解驱动)：<code>http://127.0.0.1/request04?ids=1,2,3,4,5,100,50,20</code></p>
<blockquote>
<p>注解驱动：框架提供的一系列的简化写法</p>
<p><code>&lt;mvc:annotation-driven/&gt;</code></p>
</blockquote>
</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;request04&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello04</span><span class="params">(Integer[] ids)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;DemoRequestController类接收到了请求&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(Arrays.toString(ids));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; <span class="comment">//默认使用的请求转发跳转到一个页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="集合类型">集合类型</span></h4>
<ol>
<li>请求任意数量任意类型任意名称的参数，需要添加@RequestParam注解帮助程序接收请求参数</li>
<li>太灵活了，使用频率不高</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;request05&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello05</span><span class="params">(<span class="meta">@RequestParam</span> Map map)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;DemoRequestController类接收到了请求&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(map);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; <span class="comment">//默认使用的请求转发跳转到一个页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="时间类型">时间类型</span></h4>
<ol>
<li>
<p>默认格式：2023/06/13 16:19:50</p>
</li>
<li>
<p>其他方式：需要添加注解，单独定义时间格式模板(如果使用了注解定义了时间格式模板，默认的/不让使用)</p>
<blockquote>
<p>2023-06-13 16:19:50、2023年06月13日 16:19:50</p>
</blockquote>
</li>
<li>
<p>说明:在今后的程序中，针对时间格式一个项目只会存在一种规则，一种时间格式就够了。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;request07&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello07</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:ss:mm&quot;)</span> Date date)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;DemoRequestController类接收到了请求&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(date);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; <span class="comment">//默认使用的请求转发跳转到一个页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="post请求中文过滤器会使用">post请求中文过滤器（会使用）</span></h3>
<ol>
<li>POST方式请求中文参数时会出现乱码的情况（由于进行了数据处理），因此需要使用过滤器统一字符编码</li>
<li>spring已经提供了一个过滤器CharacterEncodingFilter,我们只需要去web.xml中配置即可</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置字符编码过滤器--&gt;</span></span><br><span class="line">&lt;**filter**&gt;</span><br><span class="line">  &lt;**filter-name**&gt;CharacterEncodingFilter&lt;/**filter-name**&gt;</span><br><span class="line">  &lt;**filter-class**&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/**filter-class**&gt;</span><br><span class="line">  &lt;**init-param**&gt;</span><br><span class="line">    <span class="comment">&lt;!--指定post请求的编码--&gt;</span></span><br><span class="line">    &lt;**param-name**&gt;encoding&lt;/**param-name**&gt;</span><br><span class="line">    &lt;**param-value**&gt;utf-8&lt;/**param-value**&gt;</span><br><span class="line">  &lt;/**init-param**&gt;</span><br><span class="line">&lt;/**filter**&gt;</span><br><span class="line">&lt;**filter-mapping**&gt;</span><br><span class="line">  &lt;**filter-name**&gt;CharacterEncodingFilter&lt;/**filter-name**&gt;</span><br><span class="line">  &lt;**url-pattern**&gt;/*&lt;/**url-pattern**&gt;</span><br><span class="line">&lt;/**filter-mapping**&gt;  </span><br></pre></td></tr></table></figure>
<h3><span id="获得原生servletapi重要">获得原生ServletAPI(重要)</span></h3>
<h4><span id="在目标方法中添加参数">在目标方法中添加参数</span></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;request09&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello09</span><span class="params">(</span></span><br><span class="line"><span class="params">        HttpServletRequest request,</span></span><br><span class="line"><span class="params">        HttpServletResponse response,</span></span><br><span class="line"><span class="params">        HttpSession session</span></span><br><span class="line"><span class="params">                      )</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;DemoRequestController类接收到了请求&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    System.out.println(request);</span><br><span class="line">    System.out.println(response);</span><br><span class="line">    System.out.println(session);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; <span class="comment">//默认使用的请求转发跳转到一个页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="通过注入的方式">通过注入的方式</span></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*<span class="comment">// 一般web的组件在进行注入时，required改为false，防止注入不成功时报错！*</span></span><br><span class="line">  <span class="meta">@Autowired(required = **false**)</span></span><br><span class="line">  **<span class="keyword">private</span>** HttpServletRequest request;</span><br><span class="line">  <span class="meta">@Autowired(required = **false**)</span></span><br><span class="line">  **<span class="keyword">private</span>** HttpServletResponse response;</span><br><span class="line">  <span class="meta">@Autowired(required = **false**)</span></span><br><span class="line">  **<span class="keyword">private</span>** HttpSession session;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;request10&quot;)</span></span><br><span class="line">  **<span class="keyword">public</span>** String <span class="title function_">hello10</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(request);</span><br><span class="line">    System.out.println(response);</span><br><span class="line">    System.out.println(session);</span><br><span class="line">    **<span class="keyword">return</span>** <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="请求静态资源处理会用">请求静态资源处理(会用)</span></h3>
<p>每个web服务器都实现了servlet-api和jsp-api,提供了两个servlet(DefaultServlet和JspServlet)</p>
<ol>
<li>
<p>修改dispatcherservlet的匹配规则（web.xml）</p>
<blockquote>
<p>将 / 修改为 *.do,这样的话,页面中所有的连接都需要改成 xx.do.这样的话我们的前端控制器就只处理以&quot;.do&quot;结尾的请求了.其他的请求交给服务器来处理</p>
</blockquote>
</li>
<li>
<p>通过springMVC框架自定义映射关系（spring-mvc.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--建立静态资源映射关系</span></span><br><span class="line"><span class="comment">  mapping:虚拟路径，可以自己定义，用于页面中的编写路径(推荐使用真实路径)</span></span><br><span class="line"><span class="comment">  location:项目中资源的路径，真实路径，必须是静态资源的真实路径</span></span><br><span class="line"><span class="comment">  cache-period：在客户端（浏览器）缓存的时间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/static/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/static/&quot;</span> <span class="attr">cache-period</span>=<span class="string">&quot;#&#123;3600*24*10&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>开启静态资源servlet支持(spring-mvc.xml)</p>
<p>任意的目录，任意的静态资源都可以任意使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>说明:在服务器接收请求时，优先使用框架处理请求,如果遇到静态资源参与时，框架无法处理，服务器就会将请求交给tomcat的DefaultServlet来处理。</p>
</li>
</ol>
<h3><span id="与">/* 与 /**</span></h3>
<table>
<thead>
<tr>
<th></th>
<th>/*</th>
<th>/**</th>
</tr>
</thead>
<tbody>
<tr>
<td>web.xml(url-pattern)</td>
<td>所有的子目录以及所有子目录中的所有资源</td>
<td>无意义</td>
</tr>
<tr>
<td>SpringMVC-config.xml</td>
<td>目录中的所有资源,不包含子目录</td>
<td>表示所有的资源(所有的子目录以及所有子目录中的所有资源)</td>
</tr>
</tbody>
</table>
<h2><span id="springmvc的响应">SpringMVC的响应</span></h2>
<p>分为全局刷新与局部刷新两种情况</p>
<h3><span id="全局刷新拼接路径">全局刷新（拼接路径）</span></h3>
<ol>
<li>请求：超链接，表单，地址栏</li>
<li>响应：请求转发，响应重定向</li>
<li>整个浏览器被新的数据覆盖,浏览器需要加载，渲染页面</li>
</ol>
<p>全局刷新情况下，可使用3种不同的返回值，分别为String、ModelAndView和void</p>
<h4><span id="string类型">String类型</span></h4>
<ol>
<li>
<p>默认使用请求转发跳转到一个页面，可以结合试图解析器</p>
<p><code>return &quot;success&quot;;</code></p>
</li>
<li>
<p>使用请求转发跳转到一个页面，不能结合视图解析器；固定单词forward:</p>
<p><code>return &quot;forward:/WEB-INF/jsp/success.jsp&quot;;</code></p>
</li>
<li>
<p>使用响应重定向的方式跳转到一个页面，不能结合视图解析器；固定单词redirect:</p>
<p><code>return &quot;redirect:/WEB-INF/jsp/success.jsp&quot;;</code></p>
</li>
</ol>
<h4><span id="modelandview类型">ModelAndView类型</span></h4>
<ol>
<li>
<p>自动生成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;request03&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">hello02</span><span class="params">(ModelAndView modelAndView)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;DemoRequestController类接收到了请求&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放键值对护具,实际上就是request对象作用域</span></span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;key01&quot;</span>,<span class="string">&quot;value01&quot;</span>);</span><br><span class="line">    <span class="comment">//存放一个页面名称(结合视图解析器)</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>自己创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;request04&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">hello04</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;DemoRequestController类接收到了请求&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放键值对护具,实际上就是request对象作用域</span></span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;key01&quot;</span>,<span class="string">&quot;value01&quot;</span>);</span><br><span class="line">    <span class="comment">//存放一个页面名称(结合视图解析器)</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4><span id="void类型">void类型</span></h4>
<p>使用servlet原生对象处理响应，没有返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;request02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello02</span><span class="params">(HttpServletRequest request，HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;DemoRequestController类接收到了请求&quot;</span>);</span><br><span class="line">    <span class="comment">//请求转发</span></span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/success.jsp&quot;</span>).forward(request,response);</span><br><span class="line">    <span class="comment">//响应重定向</span></span><br><span class="line">    <span class="comment">//response.sendRedirect(&quot;&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="model和modelmap不推荐">Model和ModelMap（不推荐）</span></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;request05&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello05</span><span class="params">(Model model)</span> &#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;DemoRequestController类接收到了请求&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放数据</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;key02&quot;</span>,<span class="string">&quot;value02&quot;</span>);</span><br><span class="line">    <span class="comment">//存放数据</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;key03&quot;</span>,<span class="string">&quot;value03&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;request06&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello06</span><span class="params">(ModelMap modelMap)</span> &#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;DemoRequestController类接收到了请求&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放数据</span></span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;key02&quot;</span>,<span class="string">&quot;value02&quot;</span>);</span><br><span class="line">    <span class="comment">//存放数据</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;key03&quot;</span>,<span class="string">&quot;value03&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="局部刷新ajax请求">局部刷新（Ajax请求）</span></h3>
<ol>
<li>请求:jquery中的ajax函数发送任意的请求</li>
<li>响应:底层使用的是打印流返回结果，目前使用的是注解完成</li>
<li>在浏览器的内部，发起请求，获取数据，改变页面的部分内容。其余的页面无需加载和渲染，网络中的数据传输量少，给用户感觉好，通过Ajax实现</li>
</ol>
<p>可以使用任意类型的返回值，通过SpringMVC框架实现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入jQuery--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/static/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 页面加载完成事件</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params">$</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#sendBtn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&quot;/request_ajax_01&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(data);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#sendBtn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&quot;/request_ajax_02&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(data);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#sendBtn3&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&quot;request_ajax_03&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 发送json字符串时，必须使用post请求</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 内容的编码类型</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">contentType</span>:<span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// json字符串，键值必须使用双引号</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">data</span>:<span class="string">&#x27;&#123;&quot;aid&quot;:1001,&quot;name&quot;:&quot;admin&quot;,&quot;balance&quot;:500.0&#125;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// JSON.stringify可以将js对象转换为json字符串</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//data: JSON.stringify(&#123; aid: 1001, name: &quot;tom&quot;, balance: 500.0 &#125;),</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                     * jQuery会根据dataType对结果进行处理，</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                     * 如果后台设置了content-type为application/json，则此处可以不指定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                     * 但最好是明确指定为json，这样即便后台不设置content-type，jQuery也会处理</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                     */</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 打印对象，不能看出对象中包含哪些属性</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(data);</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// JSON.stringify可以将js对象转换为json字符串，方便查看对象结构</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>( <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data) );</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(data.<span class="property">success</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(data.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;sendBtn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;原生的方式发送ajax请求&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;sendBtn2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;框架的方式发送ajax请求_@ResponseBody&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;sendBtn3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;框架的方式发送ajax请求_@RequestBody&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;request_ajax_01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getRequestAjax01</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接收到了请求！！！！！！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回浏览器一个结果</span></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    <span class="comment">//out.write(&quot;getRequestAjax01方法返回的结果&quot;);//返回一个字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="number">1000.5</span>);</span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(account);</span><br><span class="line">    out.write(json);<span class="comment">//返回的是一个对象(集合)</span></span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前提：若要使用RequestBody和ResponseBody必须导入jackson依赖</p>
<h4><span id="responsebody">@ResponseBody</span></h4>
<p>表示方法的返回值直接以Json格式写入Http response body中，而不是解析为跳转路径。</p>
<p>只处理局部刷新(完成打印流的输出，json数据的类型转换)</p>
<p>返回值类型没有任何限制了，可以是任意的返回值类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;request_ajax_02&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Account <span class="title function_">getRequestAjax02</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接收到了请求！！！！！！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">1002</span>,<span class="string">&quot;abcd&quot;</span>,<span class="number">2000.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="requestbody了解">@RequestBody(了解)</span></h4>
<ol>
<li>用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)；</li>
<li>必须用POST方式进行提交</li>
<li>在后端的同一个接收方法里，@RequestBody与@RequestParam()可以同时使用，@RequestBody最多只能有一个，而@RequestParam()可以有多个。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;request_ajax_03&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map <span class="title function_">getRequestAjax03</span><span class="params">(<span class="meta">@RequestBody</span> Account account)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接收到了请求！！！！！！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;请求参数:&quot;</span>+account);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>()&#123;&#123;</span><br><span class="line">        put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;新增成功!!!!!!!!&quot;</span>);</span><br><span class="line">        put(<span class="string">&quot;flag&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="restful风格请求">RestFul风格请求</span></h2>
<p>所有的rest风格请求必须建立在局部刷新的基础上</p>
<p>传统请求与RestFul请求中都含有请求名称、请求方式、请求参数，但两者唯一区分请求的标准不同</p>
<table>
<thead>
<tr>
<th>传统请求</th>
<th>RestFul请求</th>
</tr>
</thead>
<tbody>
<tr>
<td>可以出现&quot;?&quot; “&amp;” 键值对 “/”</td>
<td>仅 “/”</td>
</tr>
<tr>
<td>主要通过请求名称唯一区分不同请求(请求方式辅助)</td>
<td>主要通过请求方式唯一区分不同请求(请求参数辅助)</td>
</tr>
</tbody>
</table>
<h3><span id="pathvariable">@PathVariable</span></h3>
<p>映射 URL 绑定的占位符，将 URL中{xxx}占位符参数绑定到控制器处理方法的入参中</p>
<p>一般与@RequestMapping(method = RequestMethod.GET)一起使用</p>
<p>1、若方法参数名称和需要绑定的url中变量名称一致时,可以简写:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUser/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.selectUser(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、若方法参数名称和需要绑定的url中变量名称不一致时，写成:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUserById/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String userName)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.selectUser(userName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="restcontroller">@RestController</span></h3>
<ol>
<li>等同于@Controller + @ResponseBody</li>
<li>若控制器中的所有方法返回的是json格式数据，而不是跳转页面，可以直接在类上标注@RestController，而不用在每个方法中标注@ResponseBody，简化了开发过程。</li>
</ol>
<h3><span id="put请求无法获取数据">put请求无法获取数据</span></h3>
<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.FormContentFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="文件上传">文件上传</span></h2>
<h3><span id="导入依赖">导入依赖</span></h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="配置springmvc">配置SpringMVC</span></h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置：id必须为multiPartResolver--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multiPartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置单次上传文件总大小最大值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;50*1024*1024&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置单次上传每个文件大小的最大值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSizePerFile&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;1*1024*1024&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="前端请求">前端请求</span></h3>
<p>表单处理，必须为post请求</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;upload.do&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    导入：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;files&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span> &gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<h3><span id="后端接收">后端接收</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;upload.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile[] files)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line">        <span class="comment">//获取上传文件名</span></span><br><span class="line">        System.out.println(file.getOriginalFilename());</span><br><span class="line">        <span class="comment">//为了避免上传文件名一致导致的已上传的文件被覆盖，需处理文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + file.getOriginalFilename();</span><br><span class="line">        System.out.println(fileName);</span><br><span class="line">        <span class="comment">//创建保存上传文件的目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\upload&quot;</span>+getPath(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">File</span>(path).mkdirs();</span><br><span class="line">        <span class="comment">//保存上传文件</span></span><br><span class="line">        file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(path+<span class="string">&quot;\\&quot;</span>+fileName));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理目录的分离：</span></span><br><span class="line"><span class="comment"> *   level 目录深度:表示有几层</span></span><br><span class="line"><span class="comment"> *   count 目录数量:每一层的目录个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回生成的路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPath</span><span class="params">(<span class="type">int</span> count, <span class="type">int</span> level)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; level; i++) &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        result.append(<span class="string">&quot;\\&quot;</span>);</span><br><span class="line">        result.append((random.nextInt(count) + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>避免文件名重复：UUID随机数作为名称</li>
<li>避免文件夹文件过多：尽可能存放在不同的目录中(自己定义)</li>
</ol>
<h2><span id="统一异常处理与信息返回">统一异常处理与信息返回</span></h2>
<h3><span id="统一错误友好页面webxml">统一错误友好页面（web.xml）</span></h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--友好错误页面配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">location</span>&gt;</span>/500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="异常处理">异常处理</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span><span class="comment">//专门用于异常处理的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理空指针异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(NullPointerException.class)</span><span class="comment">//传入什么类型，处理什么类型的异常</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">NullPointException</span><span class="params">(Exception e,HttpServletRequest request)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springMVC_error&quot;</span>;<span class="comment">//跳转一个异常处理页面，结合视图解析器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理所有的异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span><span class="comment">//传入什么类型，处理什么类型的异常</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">myException</span><span class="params">(Exception e,HttpServletRequest request)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springMVC_error02&quot;</span>;<span class="comment">//跳转一个异常处理页面，结合视图解析器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="拦截器interceptor">拦截器Interceptor</span></h2>
<p>类似于Filter过滤器，对处理器(方法)进行前置拦截 和 后置 拦截操作。</p>
<h3><span id="实现handlerinterceptor接口prehandle方法">实现HandlerInterceptor接口preHandle方法</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Intercepter1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">  <span class="comment">// 拦截处理程序（Controller）的调用，返回false表示处理程序不会被调用</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;拦截到了请求：&quot;</span> + request.getRequestURI());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="配置拦截器springmvcxml">配置拦截器（springmvc.xml）</span></h3>
<ol>
<li>指定拦截哪些资源</li>
<li>放行拦截中的哪些资源</li>
</ol>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  拦截器配置，当配置多个拦截器时</span></span><br><span class="line"><span class="comment">    1. 拦截顺序根据配置的顺序进行拦截</span></span><br><span class="line"><span class="comment">    2. 如果第一个拦截器中return false，则之后与请求路径匹配的拦截器不会执行</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      /test/\  拦截/test目录下的资源</span></span><br><span class="line"><span class="comment">      /test/  拦截/test目录及其子目录下的资源</span></span><br><span class="line"><span class="comment">    --&gt;</span>*</span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/test/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.web.intercepter.Intercepter1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/test/test1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.web.intercepter.Intercepter2&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<h3><span id="过滤器和拦截器面试题">过滤器和拦截器(面试题)</span></h3>
<p>过滤器能够实现的功能，使用拦截器也可以实现</p>
<p><strong>关系（Filter、Servlet、Interceptor、Controller）图：</strong></p>
<p>web服务器组件：Filter、Servlet</p>
<p>SpringMVC的组件：Interceptor、Controller</p>
<p><img src="https://pic.imgdb.cn/item/6490f5fe1ddac507cc5b916d.jpg" alt></p>
<table>
<thead>
<tr>
<th></th>
<th>过滤器</th>
<th>拦截器</th>
</tr>
</thead>
<tbody>
<tr>
<td>执行顺序</td>
<td>先执行过滤器Filter</td>
<td>再执行拦截器Intercepter</td>
</tr>
<tr>
<td>组件</td>
<td>web服务器的组件</td>
<td>SpringMVC的组件</td>
</tr>
<tr>
<td>处理请求</td>
<td>可以拦截所有请求</td>
<td>只能拦截SpringMVC核心处理器（DispatcherServlet）处理范围内的资源</td>
</tr>
<tr>
<td>使用场景</td>
<td>处理和数据相关的需求，字符集过滤器CharacterEncodingFilter（解决中文乱码）、FormContentFilter（解决put请求获取不到表单数据的问题）</td>
<td>用于权限的控制，例如某些功能需要登录才能访问！又如某些功能需要会员才能使用。</td>
</tr>
</tbody>
</table>
<h3><span id="登录权限拦截器案例">登录权限拦截器案例</span></h3>
<p>用户没有登录的情况下，除了登录页面和静态资源以外，不给访问！强制跳转到登录界面！</p>
<h2><span id="springmvc的执行流程面试题">SpringMVC的执行流程(面试题)</span></h2>
<p><img src="https://pic.imgdb.cn/item/6490f61d1ddac507cc5bb2b6.jpg" alt></p>
<table>
<thead>
<tr>
<th>组件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>核心控制器</td>
<td>整个流程控制的核心，调用其他组件处理用户的请求，简化Servlet共有行为的处理。</td>
</tr>
<tr>
<td>处理器映射器</td>
<td>根据请求对象(中的url)获取到对应的处理程序执行链对象，该对象中包括处理程序 Handler（Controller） 和拦截器 Interceptor</td>
</tr>
<tr>
<td>处理器适配器</td>
<td>执行处理程序 Handler 的对象，处理器映射器负责查找处理程序，而处理程序中的参数的封装，都是处理器适配器完成的，例如通过参数的声明直接获取参数</td>
</tr>
<tr>
<td>视图解析器</td>
<td>将逻辑视图解析为View对象（真实资源文件对象），对处理程序（Controller中的每个方法都是一个处理程序）的返回值（视图）进行解析！例如：方法返回String类型时，返回redirect:/路径表示重定向，这都是视图解析器在完成</td>
</tr>
<tr>
<td>处理程序</td>
<td>处理业务逻辑（特有行为），Controller中的每个方法都是一个处理程序</td>
</tr>
<tr>
<td>拦截器</td>
<td>类似过滤器，权限控制，例如登录权限</td>
</tr>
<tr>
<td>Model</td>
<td>存放渲染视图所需的数据</td>
</tr>
<tr>
<td>View</td>
<td>JSP、HTML，渲染 View</td>
</tr>
</tbody>
</table>
<h3><span id="执行流程">执行流程</span></h3>
<ol>
<li>用户发起请求到核心控制器 DispatcherServlet</li>
<li>处理器映射器 HandlerMapping 根据请求对象获取处理器执行链 HandlerExecutionChain。包括处理程序Handler和拦截器Interceptor数组</li>
<li>为处理程序查找合适的处理器适配器 HandlerAdapter，该对象用于真正的调用处理程序Handler</li>
<li>处理器适配器 HandlerAdapter 调用处理程序 Handler，返回模型和视图对象 ModelAndView</li>
<li>核心控制器请求视图解析器去进行视图解析（将逻辑视图转化成完整的视图地址）</li>
<li>核心控制器将Model交给View进行视图渲染</li>
<li>View将结果响应给浏览器</li>
</ol>
<p>我们需要做的事情:</p>
<ol>
<li>在web.xml中配置核心控制器DispatcherServlet</li>
<li>编写处理器（controller）和 视图（jsp）</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>SpringMVC拦截器</title>
    <url>/post/SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<h2><span id="什么是拦截器">什么是拦截器</span></h2>
<p>SpringMVC中的interceptor拦截器</p>
<p>依赖于web框架，基于Java的反射机制实现，属于面向切面编程（AOP）的一种运用。由于拦截器是基于web框架的调用，因此可以使用Spring的依赖注入（DI）进行一些业务操作，同时一个拦截器实例在一个 controller生命周期之内可以多次调用。</p>
<p>它主要的作用是拦截指定的用户请求，并进行相应的预处理与后处理。</p>
<p>使用的aop的思想，多个Controller中集中到拦截器统一处理</p>
<p><strong>应用场景</strong></p>
<ul>
<li>日志记录：记录请求信息的日志，以便进行信息监控、信息统计、计算PV（Page View）等。</li>
<li>权限检查：如登录检测，进入处理器检测是否登录，如果没有直接返回到登录页面；</li>
<li>性能监控：有时候系统在某段时间莫名其妙的慢，可以通过拦截器在进入处理器之前记录开始时间，在处理完后记录结束时间，从而得到该请求的处理时间（如果有反向代理，如apache可以自动记录）；</li>
<li>通用行为：读取cookie得到用户信息并将用户对象放入请求，从而方便后续流程使用，还有如提取Locale、Theme信息等，只要是多个Controller中的处理方法都需要的，我们就可以使用拦截器实现。</li>
</ul>
<h2><span id="拦截器执行时机">拦截器执行时机</span></h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>preHandle</td>
<td>请求前（即控制类方法执行前）执行，通过返回true，拦截返回false</td>
</tr>
<tr>
<td>postHandle</td>
<td>请求结束（即控制类方法执行后），且此时仍未相应到界面时执行，可以改变响应结果</td>
</tr>
<tr>
<td>afterCompletion</td>
<td>请求结束（即控制类方法执行后），同时已经响应界面执行，可以用于清理对象、关闭资源</td>
</tr>
</tbody>
</table>
<p><img src="https://pic.imgdb.cn/item/64141a80a682492fcc3f3a71.jpg" alt></p>
<h2><span id="拦截器实现">拦截器实现</span></h2>
<ol>
<li>实现HandlerInterceptor拦截器接口</li>
<li>在spring-mvc.xml配置文件注册</li>
</ol>
<h3><span id="注册拦截器">注册拦截器</span></h3>
<p><strong>拦截器支持的通配符</strong></p>
<ol>
<li>*	:包括当前路径所有   /admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截</li>
<li>/**  :包括路径及其子路径</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--映射要拦截的请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**/*.action&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置放行的请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/login.action&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/loginErr.action&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置拦截器的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.interceptor.MyInterceptor&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="实现handlerinterceptor拦截器接口">实现HandlerInterceptor拦截器接口</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throw</span> Exception&#123;</span><br><span class="line">        <span class="comment">//准备请求地址</span></span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle准备请求地址:&quot;</span>+request.getRequestURI());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拦截请求地址，检测是否登录</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();        <span class="comment">//可以从request对象获取HttpSession对象</span></span><br><span class="line">        <span class="keyword">if</span>(session!=<span class="literal">null</span> &amp;&amp; session.getAttribute(<span class="string">&quot;user&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//response.sendRedirect(&quot;/login.html&quot;);ajax则会请求失败，要使用其他的控制器周转</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/user/loginErr.action&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle请求结束准备响应界面：....................&quot;</span>+request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion请求响应结束：....................&quot;</span>+request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="拦截器链多拦截器">拦截器链（多拦截器）</span></h2>
<p>如果多个拦截器能够对相同的请求进行拦截，则多个拦截器会形成一个拦截器链，主要理解拦截器链中各个拦截器的执行顺序。拦截器链中多个拦截器的执行顺序，与拦截器的配置顺序有关，先配置的先执行。也可以通过@Order指定顺序。</p>
<h2><span id="拦截器与过滤器">拦截器与过滤器</span></h2>
<h3><span id="过滤器">过滤器</span></h3>
<p>依赖于servlet容器。在实现上基于函数回调，可以对几乎所有请求进行过滤，但是缺点是一个过滤器实例，只能在容器初始化时调用一次。使用过滤器的目的是用来做一些过滤操作，比如：在过滤器中修改字符编码； 在过滤器中修改HttpServletRequest的一些参数，包括：过滤低俗文字、危险字符等。</p>
<h3><span id="拦截器">拦截器</span></h3>
<p>在AOP（Aspect-Oriented Programming）中用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。拦截是AOP的一种实现策略。</p>
<blockquote>
<p>在 Webwork的中文文档的解释为——拦截器是动态拦截Action调用的对象。它提供了一种机制可以使开发者可以定义在一个action执行的前后执行的代码，也可以在一个action执行前阻止其执行。同时也是提供了一种可以提取action中可重用的部分的方式。</p>
</blockquote>
<table>
<thead>
<tr>
<th>拦截器</th>
<th>过滤器</th>
</tr>
</thead>
<tbody>
<tr>
<td>SpringMVC提供，SpringMVC容器中创建</td>
<td>servlet中的对象，tomcat服务器创建</td>
</tr>
<tr>
<td>实现HandlerInterceptor</td>
<td>继承HttpFilter</td>
</tr>
<tr>
<td>验证请求，拦截请求</td>
<td>设置request，response的参数，属性的，侧重对数据过滤的</td>
</tr>
<tr>
<td>三个执行时间点</td>
<td>一个执行时间点</td>
</tr>
<tr>
<td>侧重拦截对Controller方法，不会拦截jsp/html/css/image/js</td>
<td>可以处理jsp，js，html等等</td>
</tr>
<tr>
<td>通常对处理器Controller进行拦截，只能拦截dispatcherServlet处理的请求</td>
<td>几乎对所有请求过滤</td>
</tr>
<tr>
<td></td>
<td>过滤器是在拦截器之前先执行的</td>
</tr>
</tbody>
</table>
<p>使用Interceptor的好处是Interceptor本身是Spring管理的Bean，因此注入任意Bean都非常简单。</p>
]]></content>
      <categories>
        <category>第三阶段</category>
      </categories>
  </entry>
  <entry>
    <title>Tomcat安装与配置</title>
    <url>/post/Tomcat%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2><span id="下载与安装">下载与安装</span></h2>
<p><a href="https://tomcat.apache.org/download-90.cgi">Tomcat官网</a></p>
<p><img src="https://pic.imgdb.cn/item/64959f7a1ddac507cc218315.jpg" alt></p>
<p><img src="https://pic.imgdb.cn/item/64959fd01ddac507cc222a69.jpg" alt></p>
<h2><span id="配置">配置</span></h2>
<p>JAVA_HOME</p>
<p>计算机右键 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量</p>
<ol>
<li>在系统环境变量中新建 <code>CATALINA_HOME</code> 环境变量，值为<code>D:\java\apache-tomcat-9.0.76</code>（安装目录）</li>
<li>修改 Path ，在 Path 后添加： <code>%CATALINA_HOME%\lib</code>、<code>%CATALINA_HOME%\bin</code>、<code>%CATALINA_HOME%\lib\servlet-api.jar</code></li>
</ol>
<p>注意：</p>
<ol>
<li>环境变量中变量名对大小写不敏感，可将CATALINA_HOME小写，但需要保持一致</li>
<li>在环境变量中，如果新建有两个相同仅大小写不同的的变量名，会覆盖设置。如：path和PATH</li>
</ol>
<h2><span id="tomcat文件目录">Tomcat文件目录</span></h2>
<ol>
<li>bin：可执行文件（启动文件startup.bat、关闭文件shutdown.bat）</li>
<li>conf：配置文件（修改端口号：server.xml，建议将server.xml备份）</li>
<li>lib：依赖的jar包</li>
<li>log：日志文件（记录出错等信息）</li>
<li>temp：临时文件</li>
<li>webapps：可执行的项目。默认作为存放开发项目的目录</li>
<li>work：存放由jsp翻译成的.java源文件,以及编译的.class字节码文件(jsp -&gt;java -&gt;class)<br>
其他文件</li>
</ol>
<h2><span id="启动tomcat">启动Tomcat</span></h2>
<ol>
<li>
<p>在.<code>D:\java\apache-tomcat-9.0.76\bin</code>目录下，双击<code>startup.bat</code>打开窗口，双击<code>shutdown.bat</code>关闭窗口。</p>
<p>如果点startup.bat窗口的×直接关闭，可能会造成关闭异常</p>
<p><img src="https://pic.imgdb.cn/item/6495aa681ddac507cc34bebf.jpg" alt></p>
</li>
<li>
<p>通过命令行窗口打开。<code>D:\java\apache-tomcat-9.0.76\bin</code>路径下打开命令行窗口，输入命令：<code>startup</code>，出现如下对话框，表明服务启动成功。<code>shutdown</code>关闭</p>
<p><img src="https://pic.imgdb.cn/item/6495ab3a1ddac507cc35f912.jpg" alt></p>
</li>
</ol>
<h2><span id="常见问题">常见问题</span></h2>
<h3><span id="闪退">闪退</span></h3>
<p>环境变量配置不正确</p>
<ol>
<li>JAVA_HOME中的路径不能用分号结尾，如C:\Program Files\Java\jdk1.8.0_121</li>
<li>JAVA_HOME的路径是JDK路径，而不是JRE的路径。</li>
<li>CATALINA_HOME中的路径不能以\结尾。</li>
<li>在环境变量中修改添加变量时，一定要注意分号、空格，是否有多余的字母。</li>
</ol>
<h3><span id="乱码">乱码</span></h3>
<p>打开startup.bat后汉字乱码</p>
<ol>
<li>在D:\java\apache-tomcat-9.0.76\conf下打开logging.properties文件</li>
<li>将java.util.logging.ConsoleHandler.encoding = UTF-8 替换为java.util.logging.ConsoleHandler.encoding = GBK</li>
<li>idea的输出窗口中不会产生乱码，如果输出乱码，参考文章：IDEA 控制台Tomcat Catalina Log 和 Tomcat Localhost Log乱码？</li>
</ol>
<h3><span id="与其他服务的端口号冲突">与其他服务的端口号冲突</span></h3>
<p>tomcat端口号默认8080，如果和其他服务的端口号冲突，则可对端口号进行修改</p>
<ol>
<li>
<p>在<code>D:\java\apache-tomcat-9.0.76\conf</code>下打开server.xml文件，在文件的69行左右，将port=&quot;8080&quot;修改为指定的某一端口号，重新启动。端口号：网络编程-传输层</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2><span id="访问tomcat">访问Tomcat</span></h2>
<p>先打开startup.bat，再打开浏览器，在地址栏中输入http://localhost:8080或localhost:8080回车，如果看到Tomcat自带的一个JSP页面，说明JDK和Tomcat已搭建成功。</p>
<h2><span id="常见状态码">常见状态码</span></h2>
<p>200：一切正常<br>
300/301：页面重定向 （跳转）<br>
404：资源不存在<br>
403：权限不足 （如果访问a目录，但是a目录设置 不可见）<br>
500：服务器内部错误（代码有误）<br>
其他编码：积累</p>
<h2><span id="卸载tomcat">卸载Tomcat</span></h2>
<p>直接删除Tomcat目录，并删除已配置的环境变量</p>
]]></content>
      <categories>
        <category>第三阶段</category>
      </categories>
  </entry>
  <entry>
    <title>String类</title>
    <url>/post/String%E7%B1%BB/</url>
    <content><![CDATA[<h2><span id="创建对象">创建对象</span></h2>
<ol>
<li>new关键字创建对象，对象存储在堆中</li>
<li>赋值字面量（常量），字面量存储在字符串常量池中</li>
<li>赋值变量为地址引用，并没有创建新的对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接new关键字创建对象</span></span><br><span class="line">String str1=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hzj&quot;</span>);</span><br><span class="line"><span class="comment">//直接赋值字面量</span></span><br><span class="line">String str2=<span class="string">&quot;hzj&quot;</span>;</span><br><span class="line"><span class="comment">//直接赋值变量</span></span><br><span class="line">String str3=str1;</span><br></pre></td></tr></table></figure>
<p><strong>字符串常量池</strong></p>
<ul>
<li>字符串常量唯一存储在字符串常量池中</li>
</ul>
<h3><span id="new关键字创建字符串对象">new关键字创建字符串对象</span></h3>
<ul>
<li>首先在堆中创建字符串对象实例，该对象实例持有字符串常量池中相应字面量的引用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hzj&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hzj&quot;</span>);</span><br><span class="line">System.out.println(str1==str2);<span class="comment">//false 不同引用指向同一个地址</span></span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63d661ffface21e9eff0129a.jpg" alt="new关键字创建字符串对象"></p>
<p><strong>获取字面量地址</strong></p>
<p>通过字符串实例对象的intern（）方法可以获取存储在字符串常量池中的字面量地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;hzj&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hzj&quot;</span>);</span><br><span class="line"><span class="comment">//intern()方法改变字符串对象的地址指向常量池地址</span></span><br><span class="line">str2=str2.intern();</span><br><span class="line">System.out.println(str1==str2);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p><strong>赋值字面量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hzj&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hzj&quot;</span>);</span><br><span class="line">str1=str1.intern();</span><br><span class="line">str2=str2.intern();</span><br><span class="line">System.out.println(str1==str2);	<span class="comment">//true  通过获取常量池中的地址直接指向字面量，相当于字面量赋值</span></span><br></pre></td></tr></table></figure>
<p><img src="/post/String%E7%B1%BB/D:%5C%E6%95%99%E5%AD%A6%E8%B5%84%E6%96%99%5Chzj%5Csz2212%5C008-String%5CString.assets%5Cimage-20230129121338872.png" alt="image-20230129121338872"></p>
<h3><span id="变量赋值">变量赋值</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hzj&quot;</span>);</span><br><span class="line">str2=str1;</span><br><span class="line">System.out.println(str1==str2); 	<span class="comment">//true   同一对象同一引用指向同一个地址</span></span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63d665adface21e9eff7c0d0.jpg" alt="变量赋值"></p>
<p><strong>为什么推荐使用字面量赋值的方式创建字符串对象，而不是通过new关键字创建</strong></p>
<ul>
<li>使用new关键字创建字符串内容相同的多个对象时，这些对象地址不同却有着一同指向字符串常量池的引用，造成了空间的浪费</li>
<li>使用字面量赋值的方式创建字符串对象，栈中的局部变量直接指向字符串常量池的同一个字面量</li>
</ul>
<h2><span id="运算符连接字符串">+运算符连接字符串</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1=<span class="string">&quot;hzj&quot;</span>;<span class="comment">//hzj</span></span><br><span class="line">String str2=<span class="string">&quot;hz&quot;</span>+<span class="string">&quot;j&quot;</span>;<span class="comment">//hzj</span></span><br><span class="line">String str3=<span class="string">&quot;hz&quot;</span>;<span class="comment">//hz</span></span><br><span class="line">String str4=str3+<span class="string">&quot;j&quot;</span>;</span><br><span class="line">System.out.println(str1==str2);		<span class="comment">//true</span></span><br><span class="line">System.out.println(str1==str4);		<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p><strong>为什么str2相当于str1字面量赋值</strong></p>
<ul>
<li>str2中为<strong>两个字面量</strong>通过+连接，由于字面量（常量）在程序执行过程中不会发生改变</li>
<li>因此在编译生成字节码文件中，编译器会自动去掉加号完成字符串的拼接</li>
<li>str2直接指向常量池&quot;hzj&quot;</li>
</ul>
<p><strong>同样使用+运算符，为什么str4不能等同str1的字面量赋值</strong></p>
<ul>
<li>
<p>str4中是<strong>变量和字面量</strong>通过+连接，由于变量在程序执行过程中可能发生改变</p>
</li>
<li>
<p>因此编译器不会自动完成字符串拼接，而是使用StringBuilder对象的append方法进行相加，最后通过toString返回结果</p>
<p>toString方法中会使用new关键字创建字符串对象</p>
</li>
<li>
<p>str4指向的是toString生成的字符串对象</p>
</li>
</ul>
<h3><span id="循环中使用拼接字符串">循环中使用+拼接字符串</span></h3>
<ul>
<li>通过查看字节码文件，循环中多次创建了StringBuilder和String对象，极大地浪费内存</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">    <span class="comment">//String注意不要再循环的时候使用+号</span></span><br><span class="line">    str=str+i;</span><br><span class="line">&#125;        </span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63d670b9face21e9ef0e9bac.jpg" alt></p>
<h3><span id="直接使用stringbuilder或stringbuffer">直接使用StringBuilder或StringBuffer</span></h3>
<ol>
<li>StringBuffer是线程安全；StringBuilder是线程不安全</li>
<li>循环体外创建StringBuilder或StringBuffer对象，避免内存浪费</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">StringBuilder stringBuilder=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">    stringBuilder.append(i);</span><br><span class="line">&#125;</span><br><span class="line">str=stringBuilder.toString();</span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63d67062face21e9ef0ded1f.jpg" alt></p>
<h3><span id="查看字节码文件细节">查看字节码文件细节</span></h3>
<p><strong>javap命令</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javap -v xxxx.class</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63d67201face21e9ef112b6a.jpg" alt></p>
<p><strong>idea插件jclasslib</strong></p>
<p><img src="https://pic.imgdb.cn/item/63d67227face21e9ef117b76.jpg" alt></p>
]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
  </entry>
  <entry>
    <title>SpringSecurity与oauth2</title>
    <url>/post/SpringSecurity%E4%B8%8Eoauth2/</url>
    <content><![CDATA[<h1><span id="springsecurity">SpringSecurity</span></h1>
<h2><span id="简介">简介</span></h2>
<p><code>Spring Security</code>是一个能够为基于Spring的企业应用系统提供<strong>声明式</strong>（注解）的安全访问控制解决方案的安全框架</p>
<p>它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring IoC，DI（控制反转Inversion of Control ,DI:Dependency Injection 依赖注入）和AOP（面向切面编程）功能</p>
<p>为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作</p>
<hr>
<h2><span id="基础概念">基础概念</span></h2>
<h3><span id="认证登录">认证（登录）</span></h3>
<p>认证能够保护系统的隐私数据与资源，让用户以合法的身份访问系统的资源</p>
<p>认证是判断一个用户的身份是否合法的过程</p>
<p><strong>认证的场景</strong></p>
<ol>
<li>登录请求：在初次使用注册后，输入账号和密码登录微信的过程</li>
<li>非登录请求：用户去访问要求验证用户的身份信息的系统资源（url接口）时，身份合法方可继续访问，不合法则拒绝访问</li>
</ol>
<p><strong>常用认证方式</strong></p>
<p>用户名密码登录，二维码登录，手机短信登录，指纹认证等方式</p>
<p><strong>保持登录状态</strong></p>
<p>为了避免用户通过认证后访问系统资源仍需重复认证，系统需要将用户的信息保存，从而保持用户的登录状态，常见的保持登录状态的方式有：session会话、token令牌，其中session常应用与java web项目中</p>
<table>
<thead>
<tr>
<th>方式</th>
<th>服务端</th>
<th>客户端</th>
</tr>
</thead>
<tbody>
<tr>
<td>session认证成功后</td>
<td>在session中保存用户信息</td>
<td>在cookie中保存sesssion_id</td>
</tr>
<tr>
<td>token认证成功后</td>
<td>服务端生成token并在Redis中保存</td>
<td>在cookie或localStorage中保存token</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>方式</th>
<th>客户端请求</th>
<th>服务端</th>
</tr>
</thead>
<tbody>
<tr>
<td>session校验</td>
<td>携带 session_id和cookie中的用户信息</td>
<td>验证sesion中是否存在该用户信息</td>
</tr>
<tr>
<td>token校验</td>
<td>携带 token</td>
<td>验证Redis中该token是否有效</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>对比</th>
<th>基于session的认证方式（Servlet规范定制）</th>
<th>基于token的认证方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>服务端存储位置</td>
<td>存储session，占用内存资源</td>
<td>不需要存储token</td>
</tr>
<tr>
<td>客户端存储方式</td>
<td>需要支持cookie</td>
<td>不限制存储方式</td>
</tr>
</tbody>
</table>
<p><strong>token令牌</strong></p>
<img src="file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml3808\wps1.jpg" alt="img" style="zoom:67%;"> 
<p>鉴权  判断用户是否有访问某个资源的权限</p>
<p>根据用户的权限控制用户使用资源的过程</p>
<h3><span id="授权">授权</span></h3>
<p>为认证通过的用户授予访问指定资源的权限，从而对用户的隐私数据进行更详细的划分</p>
<p>授权是用户认证通过后根据用户的权限来控制用户访问资源的过程（有则访问，无则拒绝）</p>
<p><strong>授权的数据模型（RBAC）</strong></p>
<p>用户 角色 权限</p>
<p>Who对What(which)进行How操作</p>
<table>
<thead>
<tr>
<th>概念</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>主体（Subject）</td>
<td>用户或程序，需要访问系统资源</td>
</tr>
<tr>
<td>资源（Resource）</td>
<td>功能资源（菜单、页面、按钮，每个功能对应一个url）、实体资源（资源类型和资源实例）</td>
</tr>
<tr>
<td>权限（Permission）</td>
<td>规定用户能否操作指定资源，如用户查询权限、用户添加权限</td>
</tr>
</tbody>
</table>
<img src="file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml3808\wps2.png" alt="img" style="zoom:50%;"> 
<table>
<thead>
<tr>
<th>主体</th>
<th>主体和角色</th>
<th>角色</th>
<th>角色和权限</th>
<th>权限（包括资源）</th>
<th>资源</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户id、账号、密码、…</td>
<td>用户id、角色id、…</td>
<td>角色id、角色名称、…</td>
<td>角色 id、权限id、…</td>
<td>权限id、权限标识、权限名称、资源名称、资源访问地址、…</td>
<td>资源id、资源名称、访问地址、…</td>
</tr>
</tbody>
</table>
<img src="file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml3808\wps4.png" alt="img" style="zoom:50%;"> 
<h3><span id="rbac">RBAC</span></h3>
<p>把<strong>权限</strong>打包给角色，分配给<strong>用户</strong></p>
<p>一般指基于角色的访问控制，至少需要五张表实现，是实施面向企业安全策略的一种有效的访问控制方式</p>
<table>
<thead>
<tr>
<th>基于角色的访问控制（Role-Based Access Control）</th>
<th>基于资源的访问控制（Resource-Based Access Control）</th>
</tr>
</thead>
<tbody>
<tr>
<td>按角色进行授权</td>
<td>按资源（或权限）进行授权</td>
</tr>
<tr>
<td>当角色与权限关系变化时，要修改相关授权代码，系统可扩展性差</td>
<td>定义权限标识无需修改授权代码系统可扩展性强</td>
</tr>
</tbody>
</table>
<hr>
<h2><span id="快速开始">快速开始</span></h2>
<h3><span id="导入springsecurity依赖">导入SpringSecurity依赖</span></h3>
<p>在pom.xml文件中添加如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以及Spring Boot、Nacos注册、配置、mybatisPlus、dataSource</p>
<h3><span id="添加注解enablewebsecurity">添加注解<code>@EnableWebSecurity</code></span></h3>
<p>在引导类中添加注解：<code>@EnableWebSecurity</code>开启SpringSecurity认证操作（5.X版本后默认就是开启）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.bjpowernode.mapper&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(LoginApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="添加控制器">添加控制器</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">helloSecurity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Spring Boot Security&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//根据Security上下文获取认证的用户信息</span></span><br><span class="line">        <span class="keyword">return</span> SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="启动服务并请求资源">启动服务并请求资源</span></h3>
<p>SpringSecurity默认拦截所有请求，转发至/login</p>
<p><img src="https://pic.imgdb.cn/item/64cb7e851ddac507ccf1cfb9.jpg" alt></p>
<ol>
<li>若没有配置任何用户信息：可通过用户名：<code>user</code>、密码：服务启动日志中显示的密码进行登录</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Using generated security password: 0b509b4e-7f8e-4d18-97f0-348ff455489e</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>可以在<code>application.cml</code>中配置用户信息进行登录，基于配置文件管理security用户，配置后第一种方法失效</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>可以在[配置文件中配置用户信息进行登录](# 基于内存的认证及授权方式)，配置后前两种方法失效</li>
</ol>
<p>登录（认证）过后即可正常访问资源</p>
<hr>
<p>如何为不同的用户分配角色或权限呢？</p>
<h2><span id="授权操作">授权操作</span></h2>
<h3><span id="基于内存的认证及授权方式">基于内存的认证及授权方式</span></h3>
<p>添加自定义配置类<code>WebSecurityConfigServer</code>，配置用户信息以及用户登录成功后拥有的权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfigServer</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="comment">//SpringSecurity 5起强制要求密码要加密，声明密码加密器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BCryptPasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//基于内存配置用户信息及授权信息</span></span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">            <span class="comment">//用户名</span></span><br><span class="line">            .withUser(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">            <span class="comment">//密码，必须根据BCrypt加密器对密码加密</span></span><br><span class="line">            .password(passwordEncoder().encode(<span class="string">&quot;123&quot;</span>))</span><br><span class="line">            <span class="comment">//权限信息，授权操作</span></span><br><span class="line">            .authorities(</span><br><span class="line">                <span class="string">&quot;m:save&quot;</span>,</span><br><span class="line">                <span class="string">&quot;m:query&quot;</span>,</span><br><span class="line">                <span class="string">&quot;m:update&quot;</span>,</span><br><span class="line">                <span class="string">&quot;m:delete&quot;</span>,</span><br><span class="line">                <span class="string">&quot;user:save&quot;</span>,</span><br><span class="line">                <span class="string">&quot;user:query&quot;</span>,</span><br><span class="line">                <span class="string">&quot;user:update&quot;</span>,</span><br><span class="line">                <span class="string">&quot;user:delete&quot;</span></span><br><span class="line">            )</span><br><span class="line">            <span class="comment">//角色信息，授权操作，若同时配置角色和权限，则角色失效</span></span><br><span class="line">            <span class="comment">//.roles()</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//默认拦截所有请求，将所有请求转发至/login，SpringSecurity自带的表单登录</span></span><br><span class="line">        <span class="built_in">super</span>.configure(http);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时仅为指定用户添加了权限，但权限并没有映射到响应的资源，因此需要鉴权后才能测试授权的效果</p>
<h4><span id="获取当前登录用户信息">获取当前登录用户信息</span></h4>
<ol>
<li><strong>直接在参数中注入Principal对象</strong></li>
</ol>
<p>此对象是登录后自动写入UsernamePasswordAuthenticationToken类中，未认证则返回null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;userInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Principal <span class="title function_">getUserInfo</span><span class="params">(Principal principal)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> principal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong><code>SecurityContextHolder.getContext()</code>获取安全上下文对象</strong></li>
</ol>
<p>保存在 ThreadLocal，未认证则创建一个authentication属性为null的empty安全上下文对象</p>
<h3><span id="基于数据库的认证及授权方式">基于数据库的认证及授权方式</span></h3>
<p>配置类中设置基于数据库的认证及授权方式：<code>auth.userDetailsService(userService);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfigServer</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserServiceImpl userService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//基于数据库配置用户信息及授权信息</span></span><br><span class="line">        auth.userDetailsService(userService);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//使用默认表单进行登录操作</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                <span class="comment">//.and();</span></span><br><span class="line">                <span class="comment">//鉴权方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>登录时将调用传入参数<code>userService</code>中重写的<code>loadUserByUsername(String name)</code>方法，根据用户名查询用户及其拥有的权限</li>
<li>该方法返回User对象也需要分别实现7个方法</li>
</ol>
<h4><span id="userserviceimpl实现userdetailsservice接口"><code>userServiceImpl</code>实现<code>UserDetailsService</code>接口</span></h4>
<p>重写<code>UserDetailsService</code>接口的<code>loadUserByUsername(String username)</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">UserService</span>, UserDetailsService &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//根据用户名查询用户信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;().eq(User::getLoginAct, username)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//若存在当前用户，则查询该用户拥有的权限</span></span><br><span class="line">        <span class="keyword">if</span> (!ObjectUtils.isEmpty(user)) &#123;</span><br><span class="line">            List&lt;String&gt; authorities = userMapper.getPerCodeList(user.getId());</span><br><span class="line">            user.setAuthorities(authorities);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="user实现userdetails接口"><code>User</code>实现<code>UserDetails</code>接口</span></h4>
<p>重写<code>UserDetails</code>以下7个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(value =&quot;tbl_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, UserDetails &#123;</span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;,type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;loginAct&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String loginAct;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;loginPwd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String loginPwd;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;lockState&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lockState;</span><br><span class="line">    ...</span><br><span class="line">        <span class="meta">@TableField(exist = false)</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; authorities;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> authorities.stream()</span><br><span class="line">            .map(SimpleGrantedAuthority::<span class="keyword">new</span>)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//是以下代码的简写</span></span><br><span class="line">        <span class="comment">//List&lt;SimpleGrantedAuthority&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line">        <span class="comment">//for (String authority : authorities) &#123;</span></span><br><span class="line">        <span class="comment">//    list.add(new SimpleGrantedAuthority(authority));</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//return list;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getLoginPwd();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.loginAct;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前用户是否过期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getLockState().equals(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前用户账号是否被锁定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getLockState().equals(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前用户凭证是否过期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getLockState().equals(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前用户是否可用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getLockState().equals(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="鉴权操作">鉴权操作</span></h2>
<p>将根据如下不同的资源请求（控制器）匹配权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">helloSecurity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Spring Boot Security&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//根据Security上下文获取认证的用户信息</span></span><br><span class="line">        <span class="keyword">return</span> SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;m/query&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">query</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="string">&quot;查询管理员&quot;</span>;&#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;m/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="string">&quot;新增管理员&quot;</span>;&#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;m/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="string">&quot;修改管理员&quot;</span>;&#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;m/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="string">&quot;删除管理员&quot;</span>;&#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;user/query&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryUser</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="string">&quot;查询用户&quot;</span>;&#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;user/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">saveUser</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="string">&quot;新增用户&quot;</span>;&#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;user/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateUser</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="string">&quot;修改用户&quot;</span>;&#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;user/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteUser</span><span class="params">()</span>&#123;<span class="keyword">return</span> <span class="string">&quot;删除用户&quot;</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="配置权限">配置权限</span></h3>
<p>本示例是基于内存配置用户信息及授权信息的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfigServer</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="comment">//SpringSecurity 5起强制要求密码要加密，声明密码加密器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BCryptPasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//基于内存配置用户信息及授权信息</span></span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">            <span class="comment">//用户名</span></span><br><span class="line">            .withUser(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">            <span class="comment">//密码，必须根据BCrypt加密器对密码加密</span></span><br><span class="line">            .password(passwordEncoder().encode(<span class="string">&quot;123&quot;</span>))</span><br><span class="line">            <span class="comment">//权限信息，授权操作</span></span><br><span class="line">            .authorities(</span><br><span class="line">                <span class="comment">//&quot;m:save&quot;,</span></span><br><span class="line">                <span class="comment">//&quot;m:query&quot;,</span></span><br><span class="line">                <span class="comment">//&quot;m:update&quot;,</span></span><br><span class="line">                <span class="comment">//&quot;m:delete&quot;,</span></span><br><span class="line">                <span class="string">&quot;user:save&quot;</span>,</span><br><span class="line">                <span class="string">&quot;user:query&quot;</span>,</span><br><span class="line">                <span class="string">&quot;user:update&quot;</span>,</span><br><span class="line">                <span class="string">&quot;user:delete&quot;</span></span><br><span class="line">            )</span><br><span class="line">            <span class="comment">//角色信息，授权操作，若同时配置角色和权限，则角色失效</span></span><br><span class="line">            <span class="comment">//.roles()</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//以Post方式请求，登录成功或失败的重定向请求</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">            .successForwardUrl(<span class="string">&quot;/welcome&quot;</span>)</span><br><span class="line">            .failureForwardUrl(<span class="string">&quot;/fail&quot;</span>);</span><br><span class="line">        <span class="comment">//使用默认表单进行登录操作</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">            .and()</span><br><span class="line">            <span class="comment">//鉴权方法</span></span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .mvcMatchers(<span class="string">&quot;/m/sava&quot;</span>).hasAuthority(<span class="string">&quot;m:save&quot;</span>)</span><br><span class="line">            .mvcMatchers(<span class="string">&quot;/m/update&quot;</span>).hasAuthority(<span class="string">&quot;m:update&quot;</span>)</span><br><span class="line">            .mvcMatchers(<span class="string">&quot;/m/delete&quot;</span>).hasAuthority(<span class="string">&quot;m:delete&quot;</span>)</span><br><span class="line">            .mvcMatchers(<span class="string">&quot;/m/query&quot;</span>).hasAuthority(<span class="string">&quot;m:query&quot;</span>)</span><br><span class="line">            .mvcMatchers(<span class="string">&quot;/user/sava&quot;</span>).hasAuthority(<span class="string">&quot;user:save&quot;</span>)</span><br><span class="line">            .mvcMatchers(<span class="string">&quot;/user/update&quot;</span>).hasAuthority(<span class="string">&quot;user:update&quot;</span>)</span><br><span class="line">            .mvcMatchers(<span class="string">&quot;/user/delete&quot;</span>).hasAuthority(<span class="string">&quot;user:delete&quot;</span>)</span><br><span class="line">            .mvcMatchers(<span class="string">&quot;/user/query&quot;</span>).hasAuthority(<span class="string">&quot;user:query&quot;</span>)</span><br><span class="line">            .mvcMatchers(<span class="string">&quot;/info&quot;</span>).authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求没有权限的资源时，会发生浏览器状态码为403的异常</p>
<p>可以添加<code>403.html</code>设置没有权限的跳转页面</p>
<h3><span id="方法级别的url配权限">方法级别的url配权限</span></h3>
<p>在引导类中添加注解<code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启SpringSecurity认证操作</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.bjpowernode.mapper&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(LoginApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在控制器上添加注解<code>@PreAuthorize(&quot;hasAuthority('【权限名】')&quot;)</code>，为url匹配对应的权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">helloSecurity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Spring Boot Security&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;info&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;isAuthenticated()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//根据Security上下文获取认证的用户信息</span></span><br><span class="line">        <span class="keyword">return</span> SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;m/query&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;m:query&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;查询管理员&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;m/save&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;m:save&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;新增管理员&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;m/update&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;m:update&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;修改管理员&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;m/delete&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;m:delete&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;删除管理员&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;user/query&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;user:query&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;查询用户&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;user/save&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;user:save&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;新增用户&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;user/update&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;user:update&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;修改用户&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;user/delete&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;user:delete&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;删除用户&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当同时配置了方法级别的鉴权、配置类的鉴权，配置类的鉴权优先级更高</p>
<p>测试为方法级别为指定请求分配已有权限，配置类为该请求分配无权限，结果展示403无权限页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如何读取数据库的用户名和密码</span><br><span class="line">如何对密码加密</span><br><span class="line">如何使用数据的角色和权限</span><br><span class="line">如何配置方法级别的权限访问</span><br><span class="line">如何自定义登陆页面</span><br><span class="line">如何集成redis把登陆信息放到Redis</span><br></pre></td></tr></table></figure>
<hr>
<h1><span id="oauth2">Oauth2</span></h1>
<h2><span id="配置">配置</span></h2>
<h3><span id="导入依赖">导入依赖</span></h3>
<p>在pom.xml文件中导入如下依赖，oauth2中包含了SpringSecurity依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>redis依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="添加注解">添加注解</span></h3>
<p>在引导类中添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启资源服务器，当前必须传递token才能够访问资源</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="comment">//开启授权服务器</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.bjpowernode.mapper&quot;&#125;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(LoginApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>服务器</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>认证服务器</td>
<td>登录，以内存、数据库的方式进行登录及授权操作</td>
</tr>
<tr>
<td>授权服务器</td>
<td>登录成功后，根据指定的第三方**(Oauth2)**账号及密码，颁发token</td>
</tr>
<tr>
<td>资源服务器</td>
<td>解析token**，**验证token合法性</td>
</tr>
</tbody>
</table>
<p>所有的请求除了登录以外，都必须带token，否则未授权</p>
<h2><span id="授权服务器生成token">授权服务器生成token</span></h2>
<p><strong>添加授权服务器配置类，并配置redis保存生成的token</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationConfigServer</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="comment">//注入Redis连接工厂</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisConnectionFactory redisConnectionFactory;</span><br><span class="line">    <span class="comment">//创建redis的tokenStore保存办法的token</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TokenStore <span class="title function_">tokenStore</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisTokenStore</span>(redisConnectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(security);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(clients);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//使用Redis保存token</span></span><br><span class="line">        endpoints.tokenStore(tokenStore());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>授权方式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>验证码授权</td>
<td>通过认证后获取验证码，再通过验证码获取token</td>
</tr>
<tr>
<td>静默授权</td>
<td></td>
</tr>
<tr>
<td>密码授权</td>
<td></td>
</tr>
<tr>
<td>客户端授权</td>
<td></td>
</tr>
</tbody>
</table>
<h3><span id="验证码授权">验证码授权</span></h3>
<p><strong>配置第三方账号信息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationConfigServer</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(security);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        clients</span><br><span class="line">                <span class="comment">//基于内存配置第三方的账号信息</span></span><br><span class="line">                .inMemory()</span><br><span class="line">                <span class="comment">//用户名</span></span><br><span class="line">                .withClient(<span class="string">&quot;power&quot;</span>)</span><br><span class="line">                <span class="comment">//密码</span></span><br><span class="line">                .secret(bCryptPasswordEncoder.encode(<span class="string">&quot;power-secret&quot;</span>))</span><br><span class="line">                <span class="comment">//令牌生命周期，以秒为单位</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">7200</span>)</span><br><span class="line">                <span class="comment">//令牌的授权规则，验证码授权</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>)</span><br><span class="line">                <span class="comment">//作用域</span></span><br><span class="line">                .scopes(<span class="string">&quot;power&quot;</span>)</span><br><span class="line">                <span class="comment">//重定向地址</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://www.bjpowernode.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(endpoints);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>授权并获取验证码</strong></p>
<p>登录完成后，在浏览器输入地址，进行授权操作，获取code码</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET http://localhost:2222/oauth/authorize?response_type=code&amp;client_id=power&amp;redirect_uri=http://www.bjpowernode.com</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>response_type=code</td>
<td>获取验证码</td>
</tr>
<tr>
<td>client_id</td>
<td>第三方账号</td>
</tr>
<tr>
<td>redirect_uri</td>
<td>重定向的地址，必须和当前账号配置的地址一致，获取code码及token时都需要通过重定向的方式来获取</td>
</tr>
</tbody>
</table>
<p>授权后重定向至 <code>http://www.bjpowernode.com/?code=yNDFUC</code></p>
<p><strong>根据授权码获取token</strong></p>
<p>在浏览器输入地址，进行获取token操作，根据code码来换取token</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST http://localhost:2222/oauth/token?grant_type=authorization_code&amp;code=yNDFUC&amp;redirect_uri=http://www.bjpowernode.com</span><br></pre></td></tr></table></figure>
<p>请求头信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Authorization</span>=<span class="string">Basic cG93ZXI6cG93ZXItc2VjcmV0 (power:power-secret)</span></span><br></pre></td></tr></table></figure>
<p>响应体数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;access_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7d501648-d6c8-4068-880e-948baf0bfdcd&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;token_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bearer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span> <span class="number">7199</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;power&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3><span id="静默授权">静默授权</span></h3>
<p><strong>配置第三方账号信息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationConfigServer</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(security);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        clients</span><br><span class="line">                <span class="comment">//基于内存配置第三方的账号信息</span></span><br><span class="line">                .inMemory()</span><br><span class="line">                ...【此处省略了验证码第三方账号信息】</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">//用户名</span></span><br><span class="line">                .withClient(<span class="string">&quot;node&quot;</span>)</span><br><span class="line">                <span class="comment">//密码</span></span><br><span class="line">                .secret(bCryptPasswordEncoder.encode(<span class="string">&quot;node-secret&quot;</span>))</span><br><span class="line">                <span class="comment">//令牌生命周期，以秒为单位</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">7200</span>)</span><br><span class="line">                <span class="comment">//令牌的授权规则，静默授权</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;implicit&quot;</span>)</span><br><span class="line">                <span class="comment">//作用域</span></span><br><span class="line">                .scopes(<span class="string">&quot;node&quot;</span>)</span><br><span class="line">                <span class="comment">//重定向地址</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://www.bjpowernode.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(endpoints);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>登录并授权</strong></p>
<p>登录完成后，根据浏览器请求地址，完成授权操作</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET http://localhost:2222/oauth/authorize?response_type=token&amp;client_id=node&amp;redirect_uri=http://www.bjpowernode.com</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>response_type=token</td>
<td>获取token令牌</td>
</tr>
</tbody>
</table>
<p><strong>获取token令牌</strong></p>
<p>通过重定向地址获取token令牌</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://www.bjpowernode.com/#access_token=bd82dd11-8938-42fd-9d4c-b9d0e5f3f499&amp;token_type=bearer&amp;expires_in=7199&amp;scope=node</span><br></pre></td></tr></table></figure>
<h3><span id="密码授权">密码授权</span></h3>
<p><strong>配置第三方账号信息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationConfigServer</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(security);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        clients</span><br><span class="line">                <span class="comment">//基于内存配置第三方的账号信息</span></span><br><span class="line">                .inMemory()</span><br><span class="line">                ...【此处省略了验证码授权的第三方账号信息】</span><br><span class="line">            	...【此处省略了静默授权的第三方账号信息】</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">//用户名</span></span><br><span class="line">                .withClient(<span class="string">&quot;pw&quot;</span>)</span><br><span class="line">                <span class="comment">//密码</span></span><br><span class="line">                .secret(bCryptPasswordEncoder.encode(<span class="string">&quot;pw-secret&quot;</span>))</span><br><span class="line">                <span class="comment">//令牌生命周期，以秒为单位</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">7200</span>)</span><br><span class="line">                <span class="comment">//令牌的授权规则，密码授权</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">                <span class="comment">//作用域</span></span><br><span class="line">                .scopes(<span class="string">&quot;pw&quot;</span>)</span><br><span class="line">                <span class="comment">//重定向地址</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://www.bjpowernode.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(endpoints);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Spring管理认证管理器</strong></p>
<p>需要在认证服务器中，将认证管理器交给Spring容器进行管理，然后将认证管理器对象交给endpoints进行声明</p>
<p>否则产生异常：不支持的授权类型</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unsupported_grant_type&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error_description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Unsupported grant type: password&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>在<code>WebSecurityConfigServer</code>配置类中重写<code>authenticationManagerBean()</code>方法并交给Spring容器管理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>配置密码授权时使用的认证管理器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationConfigServer</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(security);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//密码授权时需要使用认证管理器对象</span></span><br><span class="line">        endpoints.authenticationManager(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>发送请求获取token令牌</strong></p>
<p>无需登录，直接根据请求中的用户名密码(第三方)，来获取令牌</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST http://localhost:2222/oauth/token?username=kunkun&amp;password=123&amp;grant_type=password</span><br></pre></td></tr></table></figure>
<p>username和password是数据库中的用户名密码，认证的用户名密码</p>
<p>请求头</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Authorization</span>=<span class="string">Basic Ympwb3dlcm5vZGU6Ympwb3dlcm5vZGUtc2VjcmV0 (bjpowernode:bjpowernode-secret)</span></span><br></pre></td></tr></table></figure>
<p>响应体token数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;access_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;074ae2ba-8b5f-4c3f-9ac2-909ecefae9ac&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;token_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bearer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span> <span class="number">7199</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bjpowernode&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3><span id="客户端授权">客户端授权</span></h3>
<p><strong>配置第三方登录信息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationConfigServer</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(security);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        clients</span><br><span class="line">                <span class="comment">//基于内存配置第三方的账号信息</span></span><br><span class="line">                .inMemory()</span><br><span class="line">                ...【此处省略了验证码授权的第三方账号信息】</span><br><span class="line">            	...【此处省略了静默授权的第三方账号信息】</span><br><span class="line">            	...【此处省略了密码授权的第三方账号信息】</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">//用户名</span></span><br><span class="line">                .withClient(<span class="string">&quot;client&quot;</span>)</span><br><span class="line">                <span class="comment">//密码</span></span><br><span class="line">                .secret(bCryptPasswordEncoder.encode(<span class="string">&quot;client-secret&quot;</span>))</span><br><span class="line">                <span class="comment">//令牌生命周期，以秒为单位</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">7200</span>)</span><br><span class="line">                <span class="comment">//令牌的授权规则，客户端授权</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;client_credentials&quot;</span>)</span><br><span class="line">                <span class="comment">//作用域</span></span><br><span class="line">                .scopes(<span class="string">&quot;client&quot;</span>)</span><br><span class="line">                <span class="comment">//重定向地址</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://www.bjpowernode.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>发送请求获取token令牌</strong></p>
<p>无需登录，直接获取令牌（用于整个应用的授权）</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST http://localhost:2222/oauth/token?grant_type=client_credentials</span><br></pre></td></tr></table></figure>
<p>请求头</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Authorization</span>=<span class="string">Basic Y2xpZW50OmNsaWVudC1zZWNyZXQ= (client:client-secret)</span></span><br></pre></td></tr></table></figure>
<p>响应体token数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;access_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;60fa5091-1f8a-4841-8ef5-6897ea8e7c3c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;token_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bearer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span> <span class="number">7199</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;client&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2><span id="jwtjson-web-token">JWT（<code>Json Web Token</code>）</span></h2>
<p>可以按照指定方式生成的令牌，可以在互联网中进行传递，生成令牌具有一定规则</p>
<p>由三部分组成（头部，载荷，签名）</p>
<table>
<thead>
<tr>
<th>组成</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>头部</td>
<td>指定jwt的算法、编码方式，由于是jwt的标准，我们无法修改</td>
</tr>
<tr>
<td>载荷</td>
<td>指定加密的数据，即用户自定义的数据</td>
</tr>
<tr>
<td>签名</td>
<td>指定对称、非对称加密的密匙，可以保护当前的token</td>
</tr>
</tbody>
</table>
<h2><span id="生成jwt格式令牌">生成JWT格式令牌</span></h2>
<p>生成的令牌可以<a href="https://jwt.io">JWT官网</a>中进行查看和校验</p>
<h3><span id="对称加密生成">对称加密生成</span></h3>
<p>指定生成JWT格式的token令牌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationConfigServer</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisConnectionFactory redisConnectionFactory;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(security);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        clients</span><br><span class="line">                <span class="comment">//基于内存配置第三方的账号信息</span></span><br><span class="line">                .inMemory()</span><br><span class="line">                <span class="comment">//用户名</span></span><br><span class="line">                .withClient(<span class="string">&quot;power&quot;</span>)</span><br><span class="line">                <span class="comment">//密码</span></span><br><span class="line">                .secret(bCryptPasswordEncoder.encode(<span class="string">&quot;power-secret&quot;</span>))</span><br><span class="line">                <span class="comment">//令牌生命周期，以秒为单位</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">7200</span>)</span><br><span class="line">                <span class="comment">//令牌的授权规则，验证码授权</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>)</span><br><span class="line">                <span class="comment">//作用域</span></span><br><span class="line">                .scopes(<span class="string">&quot;power&quot;</span>)</span><br><span class="line">                <span class="comment">//重定向地址</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://www.bjpowernode.com&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">//用户名</span></span><br><span class="line">                .withClient(<span class="string">&quot;node&quot;</span>)</span><br><span class="line">                <span class="comment">//密码</span></span><br><span class="line">                .secret(bCryptPasswordEncoder.encode(<span class="string">&quot;node-secret&quot;</span>))</span><br><span class="line">                <span class="comment">//令牌生命周期，以秒为单位</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">7200</span>)</span><br><span class="line">                <span class="comment">//令牌的授权规则，验证码授权</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;implicit&quot;</span>)</span><br><span class="line">                <span class="comment">//作用域</span></span><br><span class="line">                .scopes(<span class="string">&quot;node&quot;</span>)</span><br><span class="line">                <span class="comment">//重定向地址</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://www.bjpowernode.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtAccessTokenConverter <span class="title function_">jwtAccessTokenConverter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//默认生成token方式为UUID</span></span><br><span class="line">        <span class="type">JwtAccessTokenConverter</span> <span class="variable">jwtAccessTokenConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JwtAccessTokenConverter</span>();</span><br><span class="line">        <span class="comment">//指定通过对称加密生成令牌,通过固定的秘钥对数据进行加密</span></span><br><span class="line">        jwtAccessTokenConverter.setSigningKey(SECRET);</span><br><span class="line">        <span class="keyword">return</span> jwtAccessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TokenStore <span class="title function_">tokenStore</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtTokenStore</span>(jwtAccessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//密码授权时需要使用认证管理器对象</span></span><br><span class="line">        endpoints.authenticationManager(authenticationManager)</span><br><span class="line">                .tokenStore(tokenStore())</span><br><span class="line">                .accessTokenConverter(jwtAccessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="非对称加密生成">非对称加密生成</span></h3>
<table>
<thead>
<tr>
<th>对称加密</th>
<th>非对称加密</th>
</tr>
</thead>
<tbody>
<tr>
<td>通过签名加密解密</td>
<td>通过公钥和私钥进行加密和解密</td>
</tr>
<tr>
<td>签名泄露则别人也能颁发token</td>
<td>私钥（授权服务器）产生token，公钥（资源服务器）验证该token，因此公钥泄露没有影响</td>
</tr>
</tbody>
</table>
<p><strong>在java中生成公钥和秘钥</strong></p>
<p><a href="https://oomake.com/download/openssl">安装ssl软件</a></p>
<p><strong>配置环境变量</strong></p>
<p>为了使用keytool命令</p>
<p>在系统环境变量Path中新建变量：<code>【ssl安装路径】\bin</code></p>
<p><strong>生成一个私钥</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keytool -genkeypair -<span class="built_in">alias</span> 【别名】 -validity 3650 -keyalg RSA -dname <span class="string">&quot;CN=jwt,OU=jtw,O=jwt,L=zurich,S=zurich,C=CH&quot;</span> -keypass 【key密码】 -keystore 【生成文件名.jks】 -storepass 【store密码】</span><br></pre></td></tr></table></figure>
<p><strong>获取一个公钥</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keytool -list -rfc --keystore 【私钥文件名.jks】 | openssl x509 -inform pem -pubkey</span><br></pre></td></tr></table></figure>
<p><strong>复制公钥</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnnVsCdyEXAUpTXIe9vNx</span><br><span class="line">y74JZ3/r5mAqk71DX4vSXkSauxzY3gdgxz6JSGGv8rNX1/Rdr8i661rvJTcUXp+c</span><br><span class="line">Me8H4IqhTGjefQ+0bMaLSGFFRkpa22sc+dfs0dgimx4WaPIrC0EpVk9/Jj/Rvwtd</span><br><span class="line">j8NUCVTR5/RfSDGf10eUlEy7TvPW+gXzNcKyQ1OwjFa6/+Pof3xe7fsYrjrN2s6h</span><br><span class="line">IfvwAQLI+rsxugNEsR8H28B7vkog27Eh9VTcMDxU1gWOEXag62dBhrHol3UehLJ2</span><br><span class="line">KzK5aFzetAGzd3/yZo6THZ+US9XtYPGRnOAcruAtD3Q0Ar7WNfYJldDXVTeBUPd2</span><br><span class="line">rQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>
<p>将私钥复制到Resource文件夹下，并reload maven</p>
<p>修改授权配置类AuthorizationConfig，指定非加密方式生成JWT格式的token令牌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationConfigServer</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisConnectionFactory redisConnectionFactory;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(security);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        clients</span><br><span class="line">                <span class="comment">//基于内存配置第三方的账号信息</span></span><br><span class="line">                .inMemory()</span><br><span class="line">                <span class="comment">//用户名</span></span><br><span class="line">                .withClient(<span class="string">&quot;power&quot;</span>)</span><br><span class="line">                <span class="comment">//密码</span></span><br><span class="line">                .secret(bCryptPasswordEncoder.encode(<span class="string">&quot;power-secret&quot;</span>))</span><br><span class="line">                <span class="comment">//令牌生命周期，以秒为单位</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">7200</span>)</span><br><span class="line">                <span class="comment">//令牌的授权规则，验证码授权</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>)</span><br><span class="line">                <span class="comment">//作用域</span></span><br><span class="line">                .scopes(<span class="string">&quot;power&quot;</span>)</span><br><span class="line">                <span class="comment">//重定向地址</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://www.bjpowernode.com&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">//用户名</span></span><br><span class="line">                .withClient(<span class="string">&quot;node&quot;</span>)</span><br><span class="line">                <span class="comment">//密码</span></span><br><span class="line">                .secret(bCryptPasswordEncoder.encode(<span class="string">&quot;node-secret&quot;</span>))</span><br><span class="line">                <span class="comment">//令牌生命周期，以秒为单位</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">7200</span>)</span><br><span class="line">                <span class="comment">//令牌的授权规则，验证码授权</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;implicit&quot;</span>)</span><br><span class="line">                <span class="comment">//作用域</span></span><br><span class="line">                .scopes(<span class="string">&quot;node&quot;</span>)</span><br><span class="line">                <span class="comment">//重定向地址</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://www.bjpowernode.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtAccessTokenConverter <span class="title function_">jwtAccessTokenConverter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JwtAccessTokenConverter</span> <span class="variable">jwtAccessTokenConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JwtAccessTokenConverter</span>();</span><br><span class="line">        <span class="comment">//指定通过非对称加密生成令牌</span></span><br><span class="line">        <span class="comment">//1. 加载私钥文件</span></span><br><span class="line">        <span class="type">ClassPathResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;rsa/sz2304.jks&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 创建秘钥工厂对象</span></span><br><span class="line">        <span class="type">KeyStoreKeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyStoreKeyFactory</span>(resource,<span class="string">&quot;sz2304&quot;</span>.toCharArray());</span><br><span class="line">        <span class="comment">//3. 获取秘钥对象，参数为alias别名</span></span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> factory.getKeyPair(<span class="string">&quot;sz2304&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 通过私钥生成token令牌</span></span><br><span class="line">        jwtAccessTokenConverter.setKeyPair(keyPair);</span><br><span class="line">        <span class="keyword">return</span> jwtAccessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TokenStore <span class="title function_">tokenStore</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtTokenStore</span>(jwtAccessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//密码授权时需要使用认证管理器对象</span></span><br><span class="line">        endpoints.authenticationManager(authenticationManager)</span><br><span class="line">                .tokenStore(tokenStore())</span><br><span class="line">                .accessTokenConverter(jwtAccessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2><span id="资源服务器验证token">资源服务器验证token</span></h2>
<h3><span id="验证非对称加密生成">验证非对称加密生成</span></h3>
<p>添加ResourceConfigServer.java 配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceConfigServer</span> <span class="keyword">extends</span> <span class="title class_">ResourceServerConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtAccessTokenConverter <span class="title function_">resourceJwtAccessTokenConverter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JwtAccessTokenConverter</span> <span class="variable">jwtAccessTokenConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JwtAccessTokenCo</span>	nverter();</span><br><span class="line">        jwtAccessTokenConverter.setSigningKey(SECRET);</span><br><span class="line">        <span class="keyword">return</span> jwtAccessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TokenStore <span class="title function_">resourceTokenStore</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtTokenStore</span>(</span><br><span class="line">                resourceJwtAccessTokenConverter()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        指定对令牌进行校验解析</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        resources.tokenStore(resourceTokenStore());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="验证对称加密生成">验证对称加密生成</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceConfigServer</span> <span class="keyword">extends</span> <span class="title class_">ResourceServerConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtAccessTokenConverter <span class="title function_">resourceJwtAccessTokenConverter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JwtAccessTokenConverter</span> <span class="variable">jwtAccessTokenConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JwtAccessTokenConverter</span>();</span><br><span class="line">        <span class="comment">//1. 加载公钥资源</span></span><br><span class="line">        <span class="type">ClassPathResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;rsa/sz2304.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 将公钥读取为字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">publicKey</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            publicKey = FileUtils.readFileToString(resource.getFile(), Charset.defaultCharset());</span><br><span class="line">            jwtAccessTokenConverter.setVerifierKey(publicKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 通过公钥验证token合法性</span></span><br><span class="line">        <span class="keyword">return</span> jwtAccessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TokenStore <span class="title function_">resourceTokenStore</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtTokenStore</span>(</span><br><span class="line">                resourceJwtAccessTokenConverter()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        指定对令牌进行校验解析</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        resources.tokenStore(resourceTokenStore());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>ajax请求</title>
    <url>/post/ajax%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h2><span id="导入jqueryminjs">导入jquery.min.js</span></h2>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;static/js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2><span id="jquery的ajax函数">jQuery的ajax函数</span></h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;路径&quot;</span>,</span><br><span class="line">	<span class="attr">type</span>: <span class="string">&quot;请求方式&quot;</span>, <span class="comment">//默认是get</span></span><br><span class="line">	<span class="attr">data</span>: <span class="string">&quot;name1=value1&amp;name2=value2&quot;</span> 或者 js对象&#123;<span class="attr">name1</span>: value1, <span class="attr">name2</span>: value2&#125;,</span><br><span class="line">  	<span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>, <span class="comment">// 可以省略不写！默认根据响应头&quot;content-type&quot;来动态决定</span></span><br><span class="line">	<span class="comment">// 成功，data就是返回来的数据</span></span><br><span class="line">    <span class="attr">beforeSend</span>: <span class="keyword">function</span>(<span class="params">XHR</span>) &#123;</span><br><span class="line">		<span class="comment">//...</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data, textStatus, jqXHR</span>) &#123;</span><br><span class="line">		<span class="comment">//...</span></span><br><span class="line">	&#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">XHR, textStatus, errorThrown</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求发送失败！&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">complete</span>: <span class="keyword">function</span> (<span class="params">XHR, TS</span>) &#123;</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求发送结束！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2><span id="ajax的语法糖">ajax的语法糖</span></h2>
<p>语法不同，代码简化，效果相同，底层还是$.ajax，只能指定4个参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(url, [data], [fn], [dataType]);</span><br><span class="line">$.<span class="title function_">get</span>(url, [data], [fn], [dataType]);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
  </entry>
  <entry>
    <title>axios</title>
    <url>/post/axios/</url>
    <content><![CDATA[<h1><span id="axios">Axios</span></h1>
<h2><span id="中文官网">中文官网</span></h2>
<p><a href="https://www.axios-http.cn/docs/intro">起步 | Axios 中文文档 | Axios 中文网 (axios-http.cn)</a></p>
<h2><span id="安装axios">安装Axios</span></h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure>
<h2><span id="引入依赖并全局注册">引入依赖并全局注册</span></h2>
<p>在<code>main.js</code>中引入，将Axios封装到vue组件中，可通过<code>this.$axios</code>进行调用并发送请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> ‘axios’</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span> = axios</span><br></pre></td></tr></table></figure>
<h2><span id="配置config文件">配置config文件</span></h2>
<p>在<code>vue.config.js</code>中配置如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">		<span class="attr">proxy</span>: &#123;</span><br><span class="line">			<span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">				<span class="attr">target</span>: <span class="string">&#x27;http://localhost:1001&#x27;</span>,<span class="comment">//跳转的目标网址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">				<span class="comment">//请求时重写pathname:将api重写为&#x27;&#x27;</span></span><br><span class="line">				<span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">					<span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">				&#125;, </span><br><span class="line">				<span class="comment">//请求http://localhost/api/XXX =&gt; 代理请求 http://localhost:1001/XXX</span></span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2><span id="使用axios">使用Axios</span></h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: url,</span><br><span class="line">    <span class="attr">method</span>: method,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">params</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">headers</span>: &#123;&#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>elasticsearch</title>
    <url>/post/elasticsearch/</url>
    <content><![CDATA[<h1><span id="倒排索引重点">倒排索引【重点】</span></h1>
<h2><span id="正排索引">正排索引</span></h2>
<p>正排索引根据id 找到对应的一组数据  （B+tree 聚簇索引） <img src="https://pic.imgdb.cn/item/64c259fb1ddac507cc6a541c.jpg" style="zoom:50%;"></p>
<h2><span id="倒排索引">倒排索引</span></h2>
<p>非聚簇索引：给一个字段建立索引，查询的时候 根据这个字段查到这行数据对应的id</p>
<p>回表  再根据id 去查 聚簇索引 从而拿到一行数据</p>
<img src="https://pic.imgdb.cn/item/64c25a101ddac507cc6a77d8.jpg" style="zoom:50%;"> 
<p>一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的 Term 列表</p>
<h1><span id="分词">分词</span></h1>
<p>就是按照一定的规则，将一句话分成组合的单词</p>
<h1><span id="elasticsearch核心概念重点">Elasticsearch核心概念【重点】</span></h1>
<h2><span id="结构说明">结构说明</span></h2>
<table>
<thead>
<tr>
<th>Elasticsearch</th>
<th>Mysql</th>
</tr>
</thead>
<tbody>
<tr>
<td>Index(索引库)</td>
<td>Database(数据库)</td>
</tr>
<tr>
<td>Type（_doc）</td>
<td>Table(表)</td>
</tr>
<tr>
<td>Document(文档)</td>
<td>Row(行)</td>
</tr>
<tr>
<td>Field(字段)</td>
<td>Column(列)</td>
</tr>
<tr>
<td>mappings</td>
<td>列的类型约束(int,varchar…)</td>
</tr>
</tbody>
</table>
<p>这里的Type概念从ES6.x以后被弱化，官方将在ES8.0以后正式剔除他</p>
<table>
<thead>
<tr>
<th>概念</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>索引库（indices）</td>
<td>把数据写入elasticsearch 时，会在里面建立索引，索引库里面存储索引，一个index 对应一个database</td>
</tr>
<tr>
<td>文档（document）</td>
<td>就是一条数据，一般使用json 表示，和数据库对比，就是一行数据，在java 里面就是一个一个对象</td>
</tr>
<tr>
<td>字段（field）</td>
<td>一个对象的属性，对应数据库就是一列</td>
</tr>
<tr>
<td>节点</td>
<td>一台运行elasticsearch的服务器，被称为一个节点</td>
</tr>
<tr>
<td>集群</td>
<td>多个节点组成一个集群</td>
</tr>
<tr>
<td>分片</td>
<td>一个索引可以存储在多个主分片上，有负载均衡的作用，还有从分片是主分片的一个副本</td>
</tr>
<tr>
<td>副本</td>
<td>一份数据可以有多个副本，做数据冗余（安全），一般放在从分片里面</td>
</tr>
</tbody>
</table>
<img src="https://pic.imgdb.cn/item/64c25e161ddac507cc73505e.jpg" style="zoom:50%;"> 
<h1><span id="elasticsearch安装">Elasticsearch安装</span></h1>
<h2><span id="拉取镜像">拉取镜像</span></h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.6.2</span><br></pre></td></tr></table></figure>
<h2><span id="运行镜像">运行镜像</span></h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> -e ES_JAVA_OPTS=<span class="string">&quot;-Xms256m -Xmx256m&quot;</span>  elasticsearch:7.6.2</span><br></pre></td></tr></table></figure>
<h2><span id="测试访问-ip9200">测试访问 ip:9200</span></h2>
<p>异常：<code>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</code></p>
<p>运行<code>sysctl -w vm.max_map_count=262144</code> ，再重启容器</p>
<h1><span id="elasticsearch目录">Elasticsearch目录</span></h1>
<p><img src="https://pic.imgdb.cn/item/64c25a7d1ddac507cc6b37fc.jpg" alt></p>
<ol>
<li>bin：启动脚本</li>
<li>config:
<ol>
<li>elasticsearch.yml，ES的集群信息、对外端口、内存锁定、数据目录、跨域访问等属性的配置</li>
<li>jvm.options，ES使用Java写的，此文件用于设置JVM相关参数，如最大堆、最小堆</li>
<li>log4j2.properties，ES使用log4j作为其日志框架</li>
</ol>
</li>
<li>data：数据存放目录（索引数据）</li>
<li>plugins: ES的可扩展插件存放目录，如可以将ik中文分词插件放入此目录，ES启动时会自动加载</li>
</ol>
<h1><span id="ik分词的安装重点">IK分词的安装【重点】</span></h1>
<p>以插件的形式安装</p>
<h2><span id="官网下载">官网下载</span></h2>
<p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">IK分词下载</a>  （7.6.2版本）</p>
<h2><span id="拷贝至docker">拷贝至Docker</span></h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> elasticsearch-analysis-ik-7.6.2.zip 【容器名称】:/usr/share/elasticsearch/plugins</span><br></pre></td></tr></table></figure>
<h2><span id="解压">解压</span></h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip elasticsearch-analysis-ik-7.6.2.zip -d </span><br></pre></td></tr></table></figure>
<p>删除原zip文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf elasticsearch-analysis-ik-7.6.2.zip</span><br></pre></td></tr></table></figure>
<h2><span id="重启es测试">重启ES测试</span></h2>
<table>
<thead>
<tr>
<th>Ik分词方式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ik_smart</td>
<td>分词的粒度较小，也叫智能分词</td>
</tr>
<tr>
<td>ik_max_word</td>
<td>分词的粒度较大，也叫最大力度分词</td>
</tr>
</tbody>
</table>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:9200/_analyze</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我有个女朋友&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>ik_smart</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;有&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;个&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;女朋友&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>ik_max_word</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;有&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;个&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;女朋友&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;朋友&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure>
<h1><span id="elasticsearch基本使用重点">Elasticsearch基本使用【重点】</span></h1>
<p>Elasticsearch 是基于restful风格的http应用，即使用http动词形式对url资源进行操作（GET,POST,PUT,DELETE…）</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">ip:port/索引名/_doc/文档id</span><br><span class="line">&#123;请求体&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="操作索引-mappings">操作索引、mappings</span></h2>
<p>相当于MySQL建库建表约束</p>
<h3><span id="新增索引">新增索引</span></h3>
<p>新建一个student索引，给定几个字段约束</p>
<p>索引只能增删，不能修改</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">PUT http://localhost:9200/student</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;birthDay&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;double&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3><span id="查询索引">查询索引</span></h3>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET http://localhost:9200/student</span><br></pre></td></tr></table></figure>
<h3><span id="查询索引mappings">查询索引mappings</span></h3>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET http://localhost:9200/student/_mappings </span><br></pre></td></tr></table></figure>
<h3><span id="删除索引">删除索引</span></h3>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">DELETE http://localhost:9200/student </span><br></pre></td></tr></table></figure>
<h2><span id="操作document">操作Document</span></h2>
<h3><span id="新增数据">新增数据</span></h3>
<p><strong>PUT方式（需指定id）</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">PUT http://localhost:9200/【索引名】/_doc/1</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;超人&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;birthDay&quot;</span><span class="punctuation">:</span><span class="string">&quot;2023-01-01&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/64c262311ddac507cc7e0291.jpg" alt></p>
<p><strong>POST方式（自动生成id）</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST http://localhost:9200/【索引名】/_doc</span><br></pre></td></tr></table></figure>
<h3><span id="查询数据">查询数据</span></h3>
<p>es中的查询叫 DSL查询语法 表现形式就是放在发送的请求体里面</p>
<p><strong>查询单个数据</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET http://localhost:9200/【索引名】/_doc/1 </span><br></pre></td></tr></table></figure>
<p><strong>查询全部数据</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET http://localhost:9200/【索引名】/_doc/_search </span><br></pre></td></tr></table></figure>
<h3><span id="修改数据">修改数据</span></h3>
<p><strong>PUT方式（覆盖）</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">PUT http://localhost:9200/【索引名】/_doc/1</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">30</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>对于没有赋值的字段会被空值覆盖（相当于清除），因此该修改方式不安全</p>
<p><strong>POST方式（保留）</strong></p>
 <figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST http://localhost:9200/【索引名】/_doc/1/_update </span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">30</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>对于没有赋值的字段会保留，因此该修改方式安全</p>
<h3><span id="删除数据">删除数据</span></h3>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">DELETE http://localhost:9200/【索引名】/_doc/1 </span><br></pre></td></tr></table></figure>
<h1><span id="spring-boot使用es重点">Spring Boot使用ES【重点】</span></h1>
<h2><span id="导入依赖">导入依赖</span></h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以及Spring Boot、nacos注册中心、nacos配置中心依赖</p>
<h2><span id="添加配置">添加配置</span></h2>
<p>在 <code>application.yml</code>中添加如下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">rest:</span></span><br><span class="line">      <span class="comment"># es的连接地址</span></span><br><span class="line">      <span class="attr">uris:</span> <span class="string">http://localhost:9200</span></span><br></pre></td></tr></table></figure>
<h2><span id="测试连接">测试连接</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticsearchDemoApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchRestTemplate elasticsearchRestTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//测试连接</span></span><br><span class="line">        System.out.println(elasticsearchRestTemplate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="操作实体类">操作实体类</span></h2>
<p>对索引的操作 ==&gt; 使用实体类操作</p>
<p><strong><code>@Document</code></strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>createIndex</td>
<td>启动时是否创建</td>
</tr>
<tr>
<td>indexName</td>
<td>索引名称</td>
</tr>
<tr>
<td>shards</td>
<td>分片个数</td>
</tr>
<tr>
<td>replicas</td>
<td>副本个数</td>
</tr>
<tr>
<td>refreshInterval</td>
<td>数据导入到索引里面，最多几秒搜索到</td>
</tr>
</tbody>
</table>
<p><strong><code>@Id</code></strong></p>
<p>默认使用keyword关键字模式，不进行分词</p>
<p><code> @Field</code></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>analyzer</td>
<td>导入时使用的分词</td>
</tr>
<tr>
<td>searchAnalyzer</td>
<td>搜索时使用的分词</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * es注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Document(createIndex = true,indexName = &quot;clue&quot;,shards = 1,replicas = 2,refreshInterval = &quot;1s&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clue</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//默认使用keyword关键字模式，不进行分词</span></span><br><span class="line">    <span class="meta">@Field</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * analyzer:导入时使用的分词</span></span><br><span class="line"><span class="comment">     * searchAnalyzer：搜索时使用的分词</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text,searchAnalyzer = &quot;ik_max_word&quot;,analyzer = &quot;ik_smart&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String company;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text,searchAnalyzer = &quot;ik_max_word&quot;,analyzer = &quot;ik_smart&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String fullname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String owner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String createBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String contactSummary;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String editTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String mphone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String appellation;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String editBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String source;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String nextContactTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="创建索引和mappings约束">创建索引和mappings约束</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitDataConfig</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="comment">//注入es</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ElasticsearchRestTemplate elasticsearchRestTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//根据实体类的注解创建es索引</span></span><br><span class="line">        <span class="type">IndexOperations</span> <span class="variable">operations</span> <span class="operator">=</span> elasticsearchRestTemplate.indexOps(Clue.class);</span><br><span class="line">        <span class="comment">//根据实体类的注解创建映射关系</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">mapping</span> <span class="operator">=</span> operations.createMapping(Clue.class);</span><br><span class="line">        <span class="comment">//执行mapping</span></span><br><span class="line">        operations.putMapping(mapping);</span><br><span class="line">        <span class="comment">//从索引里面获取mappings</span></span><br><span class="line">        System.out.println(operations.getMapping());</span><br><span class="line">        <span class="comment">//初始化es数据并导入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="操作文档">操作文档</span></h2>
<h3><span id="创建cluerepository">创建ClueRepository</span></h3>
<p>类似通用Dao，封装了CRUD方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClueRepository</span> <span class="keyword">extends</span> <span class="title class_">ElasticsearchRepository</span>&lt;Goods, Integer&gt; &#123;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3><span id="新增数据">新增数据</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ClueRepository clueRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">savaAllClue</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//新增商品数据100条</span></span><br><span class="line">    ArrayList&lt;Clue&gt; clues = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        clues.add(</span><br><span class="line">            Clue.builder()</span><br><span class="line">            .id(i)</span><br><span class="line">            .fullname(<span class="string">&quot;XXX&quot;</span>)</span><br><span class="line">            .appellation(<span class="string">&quot;XXX&quot;</span>)</span><br><span class="line">            .owner(<span class="string">&quot;XXX&quot;</span>)</span><br><span class="line">            .company(<span class="string">&quot;XXX&quot;</span>)</span><br><span class="line">            .job(<span class="string">&quot;XXX&quot;</span>)</span><br><span class="line">            .email(<span class="string">&quot;XXX&quot;</span>)</span><br><span class="line">            .phone(<span class="string">&quot;XXX&quot;</span>)</span><br><span class="line">            .website(<span class="string">&quot;XXX&quot;</span>)</span><br><span class="line">            .build()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//批量新增</span></span><br><span class="line">    clueRepository.saveAll(clues);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="根据id查询数据">根据id查询数据</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findClue</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(clueRepository.findById(<span class="number">1000</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="查询所有数据">查询所有数据</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">findAllClue</span><span class="params">()</span> &#123;</span><br><span class="line">    clueRepository.findAll().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="修改数据覆盖">修改数据(覆盖)</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">UpdateClue</span><span class="params">()</span>&#123;</span><br><span class="line">    clueRepository.save(</span><br><span class="line">        Clue.builder().id(<span class="number">1000</span>).fullname(<span class="string">&quot;XXX&quot;</span>).build()</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="删除数据">删除数据</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delClue</span><span class="params">()</span>&#123;</span><br><span class="line">    clueRepository.deleteById(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="复杂的查询操作重点">复杂的查询操作【重点】</span></h1>
<table>
<thead>
<tr>
<th>注意</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>match</td>
<td>会通过分词器去模糊匹配 例如：华为电脑，会把包含‘华为’，‘电脑’，都查出来</td>
</tr>
<tr>
<td>term</td>
<td>精确查找你的关键字,一般使用keywords的约束，使用term</td>
</tr>
<tr>
<td>matchPhrase</td>
<td>不分词查询，弥补了match和term</td>
</tr>
<tr>
<td>rang</td>
<td>范围查询</td>
</tr>
<tr>
<td>match、rang 同时出现</td>
<td>需要组合bool查询分页，排序是通用的查询，不需要通过bool组合使用，直接nativeSearchQueryBuilder使用</td>
</tr>
</tbody>
</table>
<h2><span id="查询常用类">查询常用类</span></h2>
<table>
<thead>
<tr>
<th>查询常用类</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>QueryBuilders</code></td>
<td>构造条件对象，例如matchQuery，rangeQuery，boolQuery等</td>
</tr>
<tr>
<td><code>NativeSearchQueryBuilder</code></td>
<td>组合条件对象，组合后使用build构建查询对象</td>
</tr>
<tr>
<td><code>HighlightBuilder</code></td>
<td>高亮的查询类，注意使用它的Field静态内部类</td>
</tr>
<tr>
<td><code>FunctionScoreQueryBuilder</code></td>
<td>权重类，注意它的FilterFunctionBuilder静态内部类</td>
</tr>
</tbody>
</table>
<h2><span id="关键字范围分页排序">关键字，范围，分页，排序</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFuZaSearch</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//关键字，“华为” ，范围，分页，排序</span></span><br><span class="line">    <span class="type">MatchQueryBuilder</span> <span class="variable">matchQueryBuilder</span> <span class="operator">=</span> QueryBuilders.matchQuery(<span class="string">&quot;goodsName&quot;</span>, <span class="string">&quot;华为&quot;</span>);</span><br><span class="line">    <span class="type">RangeQueryBuilder</span> <span class="variable">rangeQueryBuilder</span> <span class="operator">=</span> QueryBuilders.rangeQuery(<span class="string">&quot;goodsStock&quot;</span>).from(<span class="number">700</span>).to(<span class="number">750</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用bool组合这两个查询</span></span><br><span class="line">    <span class="type">BoolQueryBuilder</span> <span class="variable">boolQueryBuilder</span> <span class="operator">=</span> QueryBuilders.boolQuery().must(matchQueryBuilder).must(rangeQueryBuilder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建组合器</span></span><br><span class="line">    <span class="type">NativeSearchQueryBuilder</span> <span class="variable">nativeSearchQueryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NativeSearchQueryBuilder</span>();</span><br><span class="line">    <span class="comment">//去build()构建查询对象</span></span><br><span class="line">    <span class="type">NativeSearchQuery</span> <span class="variable">nativeSearchQuery</span> <span class="operator">=</span> nativeSearchQueryBuilder</span><br><span class="line">            .withQuery(boolQueryBuilder)</span><br><span class="line">            .withPageable(PageRequest.of(<span class="number">0</span>, <span class="number">20</span>))    <span class="comment">//注意范围和分页有关系，可能查出来了，但是当前分页没有</span></span><br><span class="line">            .withSort(SortBuilders.fieldSort(<span class="string">&quot;goodsPrice&quot;</span>).order(SortOrder.ASC))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用es查询 得到结果集</span></span><br><span class="line">    SearchHits&lt;Goods&gt; searchHits = elasticsearchRestTemplate.search(nativeSearchQuery, Goods.class);</span><br><span class="line">    searchHits.forEach(goodsSearchHit -&gt; &#123;</span><br><span class="line">        <span class="comment">//循环结果集，答应结果</span></span><br><span class="line">        System.out.println(goodsSearchHit.getContent());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="高亮查询">高亮查询</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHighlight</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//华为，模糊匹配</span></span><br><span class="line">    <span class="type">MatchQueryBuilder</span> <span class="variable">matchQueryBuilder</span> <span class="operator">=</span> QueryBuilders.matchQuery(<span class="string">&quot;goodsName&quot;</span>, <span class="string">&quot;华为&quot;</span>);</span><br><span class="line"></span><br><span class="line">    HighlightBuilder.<span class="type">Field</span> <span class="variable">goodsName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>.Field(<span class="string">&quot;goodsName&quot;</span>).preTags(<span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">NativeSearchQueryBuilder</span> <span class="variable">nativeSearchQueryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NativeSearchQueryBuilder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">NativeSearchQuery</span> <span class="variable">nativeSearchQuery</span> <span class="operator">=</span> nativeSearchQueryBuilder</span><br><span class="line">        .withQuery(matchQueryBuilder)</span><br><span class="line">        .withHighlightFields(goodsName)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="comment">//得到结果集 我们需要手动组装高亮字段</span></span><br><span class="line">    SearchHits&lt;Goods&gt; searchHits = elasticsearchRestTemplate.search(nativeSearchQuery, Goods.class);</span><br><span class="line"></span><br><span class="line">    List&lt;Goods&gt; goodsArrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    searchHits.forEach(goodsSearchHit -&gt; &#123;</span><br><span class="line">        <span class="comment">//得到goods对象,但是这里面额goodsName属性不是高亮的，所以要改</span></span><br><span class="line">        <span class="type">Goods</span> <span class="variable">goods</span> <span class="operator">=</span> goodsSearchHit.getContent();</span><br><span class="line">        List&lt;String&gt; highlightField = goodsSearchHit.getHighlightField(<span class="string">&quot;goodsName&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">highlight</span> <span class="operator">=</span> highlightField.get(<span class="number">0</span>);</span><br><span class="line">        goods.setGoodsName(highlight);</span><br><span class="line">        goodsArrayList.add(goods);</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(JSON.toJSONString(goodsArrayList));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="权重查询">权重查询</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWeight</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//手机名称 和卖点 都有的情况下，设置权重查询</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">keyWords</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line">    <span class="comment">//创建权重数组</span></span><br><span class="line">    FunctionScoreQueryBuilder.FilterFunctionBuilder[] functionBuilders = <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置权重</span></span><br><span class="line">    functionBuilders[<span class="number">0</span>] = (<span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">        QueryBuilders.matchQuery(<span class="string">&quot;goodsName&quot;</span>, keyWords),</span><br><span class="line">        ScoreFunctionBuilders.weightFactorFunction(<span class="number">10</span>)<span class="comment">//给名称设置10的权重大小</span></span><br><span class="line">    ));</span><br><span class="line">    functionBuilders[<span class="number">1</span>] = (</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">            QueryBuilders.matchQuery(<span class="string">&quot;goodsBrief&quot;</span>, keyWords),</span><br><span class="line">            ScoreFunctionBuilders.weightFactorFunction(<span class="number">4</span>)<span class="comment">//给卖点设置4的权重</span></span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">    <span class="type">FunctionScoreQueryBuilder</span> <span class="variable">functionScoreQueryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>(functionBuilders);</span><br><span class="line"></span><br><span class="line">    functionScoreQueryBuilder.setMinScore(<span class="number">2</span>) <span class="comment">//设置最小分数</span></span><br><span class="line">        .scoreMode(FunctionScoreQuery.ScoreMode.FIRST);<span class="comment">//设置计分方式</span></span><br><span class="line"></span><br><span class="line">    <span class="type">NativeSearchQuery</span> <span class="variable">nativeSearchQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NativeSearchQueryBuilder</span>().withQuery(functionScoreQueryBuilder).build();</span><br><span class="line">    SearchHits&lt;Goods&gt; searchHits = elasticsearchRestTemplate.search(nativeSearchQuery, Goods.class);</span><br><span class="line">    searchHits.forEach(goodsSearchHit -&gt; &#123;</span><br><span class="line">        <span class="comment">//循环结果集，答应结果</span></span><br><span class="line">        System.out.println(goodsSearchHit.getContent());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="es总结面试">Es总结面试</span></h1>
<h2><span id="为什么使用es结合项目业务来说">为什么使用es（结合项目业务来说）</span></h2>
<p>商城中的数据，将来会非常多，所以采用以往的模糊查询，模糊查询前置配置，会放弃索引，（%name%）导致商品查询是全表扫描，在百万级别的数据库中，效率非常低下，而我们使用ES做一个全文索引，我们将经常查询的商品的某些字段，比如说商品名，描述、价格还有id这些字段我们放入我们索引库里，可以提高查询速度。 (数据量过大，而且用户经常使用查询的场景，对用户体验很好)</p>
<h2><span id="es用来做什么场景重点">es用来做什么（场景）重点</span></h2>
<p>\1. 商品存放 （业务数据的存放） 每个商品都是一个对象</p>
<p>\2. 日志统计 （整个应用的日志非常多，都要收集起来，方便后期做日志分析，数据回溯）</p>
<p>\3. 数据分析（大数据）（只要是电商，就要和tb，jd等对比价格，做数据分析等）</p>
<p>你做一个电商项目 你卖鞋子 衣服  你怎么 定价  鞋子 199 599 398</p>
<p>你写个爬虫（jsoup） 定期采集tb jd的数据库 做数据比对分析 做 竞品 分析</p>
<p>业务  商业</p>
<p>定期的做数据采集和分析 数据采集系统 定时任务去采集别的大型电商网站的数据，进行价格分析，从而定价，后期还要做竞品分析</p>
<h2><span id="什么是倒排索引">什么是倒排索引</span></h2>
<p>通常正排索引是通过id映射到对应的数据</p>
<p>倒排索引是将分词建立索引，通过分词映射到id，在通过id找到数据</p>
<p>详见文档4.2</p>
<h2><span id="es的存储数据的过程">es的存储数据的过程</span></h2>
<p>先写内存</p>
<p>当缓冲页满了或者时间到了就refresh操作将数据刷新到分片去 （这个操作使得搜索可见了）</p>
<p>分片有flush操作  将数据持久化到磁盘</p>
<p>![img](file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml9648\wps1.jpg)</p>
<p>1：写入请求，分发节点。</p>
<p>2：数据写入****同时写入内存和translog各一份****，tanslog为保证数据不丢失，每 5 秒，或每次请求操作结束前，会强制刷新 translog 日志到磁盘上</p>
<p>3：确定数据给那个分片，<em><strong>*refresh 刷新内存中数据到分片的segment*</strong></em>，默认1秒刷新一次，为了提高吞吐量可以增大60s。参数refresh_interval（<em><strong>*refresh操作使得写入文档搜索可见*</strong></em>）</p>
<p>4：<em><strong>*通过flush操作将segment刷新到磁盘中完成持久化，保存成功清除translog*</strong></em>，新版本es的 translog 不会在 segment 落盘就删，而是会保留，默认是512MB，保留12小时。每个分片。所以分片多的话 ，要考虑 translog 会带来的额外存储开销（<em><strong>*flush操作使得filesystem cache写入磁盘，以达到持久化的目的*</strong></em>） （<em><strong>*refresh之前搜索不可见*</strong></em>）</p>
<p>5：segment过多会进行合并merge为大的segment，消耗大量的磁盘io和网络io （方便数据整理和磁盘优化）</p>
<h2><span id="es的搜索过程">es的搜索过程</span></h2>
<p>1、搜索被执行成一个****两阶段过程****，我们称之为 <em><strong>*Query*</strong></em> Then <em><strong>*Fetch*</strong></em>；</p>
<p>2、在初始查询阶段时，查询会广播到索引中每一个分片拷贝（主分片或者副本分</p>
<p>片）。 每个分片在本地执行搜索并构建一个匹配文档的大小为 from + size 的</p>
<p>优先队列。</p>
<p>注意：在搜索的时候是会查询 Filesystem Cache 的，但是有部分数据还在 Memory</p>
<p>Buffer，所以搜索是****接********近实时****的。</p>
<p>3、每个分片返回各自优先队列中所有文档的 ID 和排序值给协调节点（主节点），它合并</p>
<p>这些值到自己的优先队列中来产生一个全局排序后的结果列表。</p>
<p>4、接下来就是 取回阶段，协调节点辨别出哪些文档需要被取回并****向相关的分片****</p>
<p><em><strong>*提交多个 GET 请求*</strong></em>。每个分片加载并 丰富 文档，如果有需要的话，接着返回</p>
<p>文档给协调节点。一旦所有的文档都被取回了，协调节点返回结果给客户端。</p>
<p><em><strong>*通俗的将就是：*</strong></em></p>
<p><em><strong>*每个分片先拿到id和排序值，然后整合成一个全局列表*</strong></em></p>
<p><em><strong>*然后通过判断找到相应的节点提交多个get请求，组装数据返回*</strong></em></p>
<p>5、补充：Query Then Fetch 的搜索类型在文档相关性打分的时候参考的是本分</p>
<p>片的数据（score），这样在文档数量较少的时候可能不够准确，DFS Query Then Fetch 增</p>
<p>加了一个****预查询****的处理，询问 Term 和 Document frequency，这个评分更准确，</p>
<p>但是性能会变差。</p>
<p><em><strong>*搜索因为有分片的存在 是有局限性的  每个分片都自己判断*</strong></em></p>
]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>gateway</title>
    <url>/post/gateway/</url>
    <content><![CDATA[<p><img src="https://pic.imgdb.cn/item/64be70e41ddac507ccce11f9.jpg" alt></p>
<h1><span id="使用gateway">使用gateway</span></h1>
<h2><span id="创建gateway模块">创建gateway模块</span></h2>
<p><img src="https://pic.imgdb.cn/item/64be71741ddac507cccfa816.jpg" alt></p>
<h2><span id="引入依赖">引入依赖</span></h2>
<p>在pom文件中引入如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-start-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加nacos依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="网关配置方式">网关配置方式</span></h2>
<p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/">Spring Cloud Gateway</a></p>
<h3><span id="配置文件">配置文件</span></h3>
<p>在application.yml文件中添加如下配置：（注意Path是以大写开头）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">toUser</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">          <span class="attr">uri:</span></span><br><span class="line">            <span class="string">http://localhost:2001</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">toActivity</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/activity/**</span></span><br><span class="line">          <span class="attr">uri:</span></span><br><span class="line">            <span class="string">http://localhost:3001</span></span><br></pre></td></tr></table></figure>
<p>查看routes定义位置，可以看出routes为一个集合，集合中每个元素的类型为RouteDefinition</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoutes</span><span class="params">(List&lt;RouteDefinition&gt; routes)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.routes = routes;</span><br><span class="line">    <span class="keyword">if</span> (routes != <span class="literal">null</span> &amp;&amp; routes.size() &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Routes supplied from Gateway Properties: &quot;</span> + routes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看RouteDefinition定义位置，可以看出有如下属性定义，其中非空的有<code>predicates</code>、<code>uri</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RouteDefinition</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NotEmpty</span> <span class="meta">@Valid</span> List&lt;PredicateDefinition&gt; predicates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Valid</span> List&lt;FilterDefinition&gt; filters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NotNull</span> URI uri;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; metadata = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">order</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RouteDefinition</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="配置类">配置类</span></h3>
<p>在CustomRouteConfig.java类中进行如下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomRouteConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">                .route(</span><br><span class="line">                        <span class="string">&quot;toUser&quot;</span>,</span><br><span class="line">                        predicateSpec -&gt; predicateSpec</span><br><span class="line">                                .path(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">                                .uri(<span class="string">&quot;http://localhost:2001&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">                .route(</span><br><span class="line">                        <span class="string">&quot;toActivity&quot;</span>,</span><br><span class="line">                        predicateSpec -&gt; predicateSpec</span><br><span class="line">                                .path(<span class="string">&quot;/activity/**&quot;</span>)</span><br><span class="line">                                .uri(<span class="string">&quot;http://localhost:3001&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="动态路由">动态路由</span></h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">crm-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="comment"># 开启动态路由</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 所有服务名称转为小写</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><code>http://localhost:1001/crm-user/user/list</code> <em>-&gt;</em> 负载均衡访问{<code>http://localhost:2001/user/list,http://localhost:2002/user/list</code>}<br>
<code>http://localhost:1001/crm-activity/activity/list</code> <em>-&gt;</em> 负载均衡访问{<code>http://localhost:3001/activity/list</code>}</p>
<h2><span id="负载均衡">负载均衡</span></h2>
<p>配置文件与配置类中设置负载均衡</p>
<p>只需将     <code>uri: http://localhost:3001</code> 改为   <code>uri: lb://crm-user</code> 即<code>http</code>改为<code>lb</code>，双斜杠后缀改为微服务模块名称(使用全局过滤器：ReactiveLoadBalancerClientFilter)</p>
<h2><span id="断言规则">断言规则</span></h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">toActivity</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Xxx=xxx</span></span><br><span class="line">          <span class="attr">uri:</span></span><br><span class="line">            <span class="string">http://localhost:3001</span></span><br></pre></td></tr></table></figure>
<p>断言规则实际上是<code>List*&lt;PredicateDefinition&gt;</code>集合，集合元素类型为<code>PredicateDefinition</code></p>
<p>在application.yml中的predicates进行配置</p>
<p>若请求满足指定的断言规则，则将请求转发至 <code>http://localhost:3001 </code></p>
<ol>
<li>对于多个断言规则，则满足逻辑与的关系</li>
<li>yaml形式配置中多以大写字母开头，java类形式配置中多以小写字母开头</li>
</ol>
<p>具体的断言规则如下：</p>
<h3><span id="path路由断言">Path路由断言</span></h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/activity/**</span></span><br></pre></td></tr></table></figure>
<p>请求<strong>相对路径</strong>满足以 <code>/acitvity</code> 开头</p>
<p>配置类如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">predicateSpec -&gt; predicateSpec</span><br><span class="line">    .path(<span class="string">&quot;/activity/**&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3><span id="after-before-between-路由断言">After、Before、Between 路由断言</span></h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">After=2023-07-25T15:49:25.851+08:00[Asia/Shanghai]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Before=2023-07-25T15:53:25.851+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="comment"># - Between=2023-07-25T15:49:25.851+08:00[Asia/Shanghai],2023-07-25T15:53:25.851+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在 2023-07-25 15:49:25 <strong>之后</strong>请求（上海时间）</li>
<li>且在 2023-07-25 15:53:25 <strong>之前</strong>请求（上海时间）</li>
</ol>
<p>配置类如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">predicateSpec -&gt; predicateSpec</span><br><span class="line">    .after(ZonedDateTime.now().plusMinutes(<span class="number">1</span>))</span><br><span class="line">    .and()</span><br><span class="line">    .before(ZonedDateTime.now().plusMinutes(<span class="number">5</span>))</span><br><span class="line">    <span class="comment">//.between(ZonedDateTime.now().plusMinutes(1),ZonedDateTime.now().plusMinutes(5))</span></span><br></pre></td></tr></table></figure>
<h3><span id="cookie-路由断言">Cookie 路由断言</span></h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Cookie=aaa,bbb</span></span><br></pre></td></tr></table></figure>
<p>具有<strong>Cookie</strong>其中键为“aaa”，值为“bbb”</p>
<p>配置类如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">predicateSpec -&gt; predicateSpec</span><br><span class="line">    .cookie(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3><span id="header-路由断言">Header 路由断言</span></h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Header=aaa,bbb</span></span><br></pre></td></tr></table></figure>
<p><strong>请求头</strong>必须有键为“aaa”、值为“bbb”的参数</p>
<p>配置类如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">predicateSpec -&gt; predicateSpec</span><br><span class="line">    .header(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3><span id="host-路由断言">Host 路由断言</span></h3>
<h3><span id="method-路由断言">Method 路由断言</span></h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Method=GET,POST</span></span><br></pre></td></tr></table></figure>
<p><strong>请求方式</strong>必须使用GET或Post</p>
<p>配置类如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">predicateSpec -&gt; predicateSpec</span><br><span class="line">    .method(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;POST&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3><span id="query-路由断言">Query 路由断言</span></h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Query=aaa,bbb</span></span><br></pre></td></tr></table></figure>
<p>具有<strong>请求参数</strong>键为“aaa”，值为“bbb”</p>
<p>配置类如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">predicateSpec -&gt; predicateSpec</span><br><span class="line">    .query(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2><span id="过滤器">过滤器</span></h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">toActivity</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Xxx=xxx</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Xxx=xxx</span></span><br><span class="line">          <span class="attr">uri:</span></span><br><span class="line">            <span class="string">http://localhost:3001</span></span><br></pre></td></tr></table></figure>
<p>配置类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomRouteConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">                .route(</span><br><span class="line">                        <span class="string">&quot;toActivity&quot;</span>,</span><br><span class="line">                        predicateSpec -&gt; predicateSpec</span><br><span class="line">                                .filters(</span><br><span class="line">                                        filter -&gt; filter</span><br><span class="line">                                                .addRequestHeader(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">                                                .addRequestParameter(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">                                                .addResponseHeader(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">                                )</span><br><span class="line">                )</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://pic.imgdb.cn/item/64bf8c3b1ddac507ccf32903.jpg" style="zoom:50%;">
<h3><span id="请求头的添加与删除">请求头的添加与删除</span></h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">AddRequestHeader=aaa,bbb</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RemoveRequestHeader=aaa</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filter -&gt; filter</span><br><span class="line">        .addRequestHeader(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">        .removeRequestHeader(<span class="string">&quot;aaa&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3><span id="请求参数的添加与删除">请求参数的添加与删除</span></h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">AddRequestParameter=aaa,bbb</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RemoveRequestParameter=aaa</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filter -&gt; filter</span><br><span class="line">        .addRequestParameter(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">        .removeRequestParameter(<span class="string">&quot;aaa&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3><span id="响应头的添加与删除">响应头的添加与删除</span></h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">AddResponseHeader=aaa,bbb</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RemoveResponseHeader=aaa</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filter -&gt; filter</span><br><span class="line">        .addResponseHeader(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">        .removeResponseHeader(<span class="string">&quot;aaa&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3><span id="重定向">重定向</span></h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RedirectTo=300,https://www.baidu.com</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filter -&gt; filter</span><br><span class="line">        .redirect(<span class="number">300</span>, <span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3><span id="路径重写">路径重写</span></h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RewritePath=/red(?&lt;segment&gt;/?.*),</span> <span class="string">/activity/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filter -&gt; filter</span><br><span class="line">        .rewritePath(<span class="string">&quot;/red(?&lt;segment&gt;/?.*)&quot;</span>,<span class="string">&quot;/activity/$\\&#123;segment&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>将以<code>red</code>开头的路径转换成以<code>/acitivity/</code>开头的路径</p>
<h3><span id="设置响应状态码">设置响应状态码</span></h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SetStatus=404</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filter -&gt; filter</span><br><span class="line">        .setStatus(<span class="number">404</span>)</span><br></pre></td></tr></table></figure>
<h3><span id="修改响应体">修改响应体</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filter -&gt; filter</span><br><span class="line">    .modifyResponseBody(</span><br><span class="line">    <span class="comment">//要修改的数据类型</span></span><br><span class="line">    String.class,</span><br><span class="line">    <span class="comment">//修改后的数据类型</span></span><br><span class="line">    String.class,</span><br><span class="line">    <span class="comment">//修改后的响应类型</span></span><br><span class="line">    <span class="string">&quot;application/json;chaset=utf-8&quot;</span>,</span><br><span class="line">    <span class="comment">//修改响应体的业务逻辑（参数serverWebExchange，可通过该对象获取请求或响应对象，参数responseBody，响应体数据）</span></span><br><span class="line">    (serverWebExchange, responseBody) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改前的响应体：&quot;</span> + responseBody);</span><br><span class="line">        HashMap&lt;Object, Object&gt; modifyResponseBody = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        modifyResponseBody.put(<span class="string">&quot;data&quot;</span>, responseBody);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(modifyResponseBody);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(s);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2><span id="自定义过滤器">自定义过滤器</span></h2>
<p>实现接口GlobalFilter、Ordered</p>
<p>GlobalFIlter重写FIlter方法，拦截器执行的业务逻辑</p>
<p>Ordered重写Ordered方法，拦截器的执行顺序</p>
<p>​	数字越小优先级越高，反之越低（HIGHEST_PRECEDENCE = 2147483647，LOWEST_PRECEDENCE = -2147483648）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">customFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">//简单的权限校验：必须传递token令牌才能进行路由操作</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> exchange.getRequest().getHeaders().getFirst(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//String token = exchange.getRequest().getQueryParams().getFirst(&quot;token&quot;);</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有权限则返回错误信息</span></span><br><span class="line">        Map&lt;String,Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        resultMap.put(<span class="string">&quot;code&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        resultMap.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;您没有该权限&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bytes = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsBytes(resultMap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        exchange.getResponse().getHeaders().add(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().writeWith(</span><br><span class="line">                Mono.just(exchange.getResponse().bufferFactory().wrap(bytes))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>Git</title>
    <url>/post/git/</url>
    <content><![CDATA[<h2><span id="git">Git</span></h2>
<p>Git是分布式代码版本管理系统，其分为客户端和服务端两个部分</p>
<p>服务器端：大家共同存储的一个终端，可以自己搭建，也可以选择别的公司更好的的处理</p>
<p>本地机： 程序员自己的电脑，保存编写的代码</p>
<p>Git服务端的具体产品有GitHub（国外的喵咪）和Gitee（国内的码云）两款比较出名</p>
<h2><span id="常用术语">常用术语</span></h2>
<table>
<thead>
<tr>
<th>常用术语</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>本地仓库（Repository）</td>
<td>保存了工程开发中的每一个迭代版本</td>
</tr>
<tr>
<td>远程仓库</td>
<td>远程保存推送的版本，使用github、码云等网站可以进行远程版本库的创建</td>
</tr>
<tr>
<td>工作区（Working Directory)</td>
<td>本地电脑上的工作目录文件夹</td>
</tr>
<tr>
<td>暂存区（Staging area）</td>
<td>暂存对工作区中文件的操作</td>
</tr>
<tr>
<td>索引（Index）</td>
<td>暂存区的别名</td>
</tr>
<tr>
<td>签入（Check in）</td>
<td>将新版本复制回仓库</td>
</tr>
<tr>
<td>签出（Check out）</td>
<td>从仓库中将文件的最新修订版本复制到工作区</td>
</tr>
<tr>
<td>提交（Commit）</td>
<td>将暂存区的文件提交到本地仓库</td>
</tr>
<tr>
<td>冲突（Conflict）</td>
<td>多人对同一文件的同一部分进行了修改，导致了冲突的发生</td>
</tr>
<tr>
<td>分支（Branch）</td>
<td>两个子版本，当前版本出现了两个不同分支</td>
</tr>
<tr>
<td>合并（Merge）</td>
<td>将指定的不同的版本合并成当前版本，合并过程中对于冲突的文件需要手动选择保留哪个文件</td>
</tr>
<tr>
<td>头（HEAD）</td>
<td>指向当前选择的分支</td>
</tr>
<tr>
<td>修订（Revision）</td>
<td>表示代码的一个版本状态。Git通过用SHA1 hash算法表示的ID来标识不同的版本</td>
</tr>
<tr>
<td>标记（Tags）</td>
<td>标记某个分支的某一个版本，方便检索和查看</td>
</tr>
<tr>
<td>推送（Push）</td>
<td>将当前的版本推送到远程仓库</td>
</tr>
<tr>
<td>拉取（Pull）</td>
<td>从远程仓库拉取文件，并合并入当前分支</td>
</tr>
<tr>
<td>add</td>
<td>添加新的文件（文件夹）到Git项目中，如果添加文件夹，该文件夹下所有文件将被包含</td>
</tr>
<tr>
<td>reset</td>
<td>选择commit前面版本重新开始编辑，通常是选择恢复到上一个编辑点</td>
</tr>
<tr>
<td>diff</td>
<td>找出两个文档或目录的不同</td>
</tr>
<tr>
<td>revert</td>
<td>恢复版本到某个commit前（即使push也能恢复，相当于过去的版本重新覆盖当前版本）</td>
</tr>
<tr>
<td>undo commit</td>
<td>撤销某个commit（push后无法撤销）</td>
</tr>
<tr>
<td>clone</td>
<td>从目标服务器下载整个用Git管理项目的</td>
</tr>
<tr>
<td>issues</td>
<td>问题</td>
</tr>
<tr>
<td>fork</td>
<td>分叉</td>
</tr>
<tr>
<td>rebase</td>
<td>重定</td>
</tr>
<tr>
<td>star</td>
<td>星</td>
</tr>
</tbody>
</table>
<h2><span id="本地开发">本地开发</span></h2>
<h3><span id="文件状态">文件状态</span></h3>
<table>
<thead>
<tr>
<th>文件状态</th>
<th>说明</th>
<th>存储位置</th>
<th>去向</th>
</tr>
</thead>
<tbody>
<tr>
<td>Untracked</td>
<td>未跟踪</td>
<td>仅工作区，未进行版本控制</td>
<td>可通过git add 将其加入暂存区</td>
</tr>
<tr>
<td>Staged</td>
<td>已暂存</td>
<td>工作区-&gt;暂存区</td>
<td>commit 加入本地仓库则变为Unmodified，修改则变为Modified</td>
</tr>
<tr>
<td>Modified</td>
<td>已修改</td>
<td>工作区、暂存区（内容不同）</td>
<td>commit 将修改文件加入暂存区并上传至本地仓库，或checkout 丢弃修改, 返回unmodify状态（用暂存区的文件覆盖工作区文件）</td>
</tr>
<tr>
<td>Unmodified</td>
<td>未修改</td>
<td>工作区、本地仓库（内容相同）</td>
<td>修改则变为Modified，移出本地仓库则变为Untracked</td>
</tr>
</tbody>
</table>
<p><img src="https://pic.imgdb.cn/item/649d4b211ddac507cc5e3677.jpg" alt></p>
<ol>
<li>在工作区新建一个文件 a.txt 。 此时文件状态为 Untracked</li>
<li>执行 git add a.txt 。 此时文件状态为 Staged</li>
<li>修改 a.txt 文件并保存，此时文件状态为 Modified，此时可进行两种操作：
<ol>
<li>执行 git add a.txt 。 此时文件状态又为 Staged</li>
<li>执行 git commit -m ‘提交a文件’ ，此时文件状态变为 Unmodified，此时可进行：
<ol>
<li>执行 git rm --cached a.txt 。此时工作区的a.txt变为Untracked状态</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3><span id="数据结构">数据结构</span></h3>
<p>某个结点表示该版本中的所有文件。箭头表示HEAD指针。</p>
<p><img src="https://pic.imgdb.cn/item/649e74731ddac507cc1ea93a.jpg" alt></p>
<h3><span id="常用命令">常用命令</span></h3>
<table>
<thead>
<tr>
<th>常用命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>git init</td>
<td>在当前目录下生成一个名为.git的文件夹，该文件夹即为版本库</td>
</tr>
<tr>
<td>git config</td>
<td>在将版本提交到版本库之前需要使用git config <a href="http://user.name">user.name</a> xxx和git config user.email xxx设置好个人身份签名</td>
</tr>
<tr>
<td>git add xxx</td>
<td>将处理后的文件xxx的最新状态同步至暂存区中</td>
</tr>
<tr>
<td>git commit -m “XXX”</td>
<td>将暂存区中暂存的所有改动写进版本库中，形成一个新的版本。commit log表示对该版本的一个说明</td>
</tr>
<tr>
<td>git status</td>
<td>查看工作区（在工作区中进行了改动还未同步到暂存区的文件）、暂存区（在暂存区中还未写入版本库的文件）的状态</td>
</tr>
<tr>
<td>git log</td>
<td>显示版本库中，HEAD指针之前的所有版本的详细信息（space向下翻页、b向上翻页、q退出）</td>
</tr>
<tr>
<td>git log --oneline</td>
<td>显示版本库中，HEAD指针之前的所有版本的简略信息</td>
</tr>
<tr>
<td>git reflog</td>
<td>显示版本库中，HEAD指针之前及之后的所有版本的简略信息</td>
</tr>
<tr>
<td>git reset --hard xxx</td>
<td>将HEAD指针移动到版本哈希为xxx的版本处，并使工作区重置为该版本下的状态</td>
</tr>
<tr>
<td>git revert versionX…versionY</td>
<td>执行版本X到版本Y之间（不含X含Y）所有版本的逆向操作，使得这些版本的提交所造成的影响被撤销。对指定的每个版本进行撤销都会产生一次新的提交记录。（可添加–no-commit参数使得对所有版本的撤销操作全都保存在暂存区中，再通过commit命令一次性提交）</td>
</tr>
<tr>
<td>git diff 文件名</td>
<td>查看这个文件和之前文件的对比</td>
</tr>
</tbody>
</table>
<h2><span id="远程多人协作">远程多人协作</span></h2>
<p>远程仓库地址：用于定位远程仓库。以github为例，其为每个仓库提供HTTPS协议和SSH协议的两种地址</p>
<h3><span id="常用命令">常用命令</span></h3>
<table>
<thead>
<tr>
<th>常用命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>git remote add 【别名】【 远程仓库地址】</td>
<td>为远程仓库地址取别名</td>
</tr>
<tr>
<td>git remote -v</td>
<td>查看当前所有的远程仓库别名</td>
</tr>
<tr>
<td>git clone【 远程仓库地址】</td>
<td>将远程仓库完整下载下来成为本地仓库</td>
</tr>
<tr>
<td>git pull 【远程仓库地址别名】【 远程分支名】</td>
<td>将远程仓库中的指定分支拉取到本地，pull操作等同于fetch操作+merge操作</td>
</tr>
<tr>
<td>git fetch【远程仓库地址别名】/【 远程分支名】</td>
<td>获取远程仓库中的指定分支到本地</td>
</tr>
<tr>
<td>git push【远程仓库别名】【 本地分支名】</td>
<td>将本地仓库指定分支中HEAD指针所指的版本推送到远程仓库中，作为远程仓库的一次版本更新</td>
</tr>
</tbody>
</table>
<ol>
<li>推送到远程仓库的版本必须是基于远程仓库中最新版本所做的修改。否则，需要先	pull拉取最新的内容后再push推送</li>
<li>只有远程仓库所属团队的团队成员才能够执行push操作对该远程仓库进行更新</li>
</ol>
<h3><span id="pull-request">pull request</span></h3>
<p>非远程仓库所属团队的团队成员需通过pull request的方式贡献代码</p>
<ol>
<li>对他人的远程仓库进行fork。该操作将会得到一个他人远程仓库的完整副本，并且该远程仓库副本是属于自己的</li>
<li>将贡献的代码更新到fork出来的自己的远程仓库中</li>
<li>在fork出来的自己的远程仓库中执行pull request操作，请求原远程仓库所属团队成员进行代码审核，来将自己改动的内容合并进他们的远程仓库中</li>
</ol>
<h2><span id="分支管理">分支管理</span></h2>
<ol>
<li>git支持分布式开发，集中式开发，分支式处理</li>
<li>以主分支为核心，创建子分支，利用子分支扩张内容，最后与主分支合并</li>
<li>从数据上来说呢，每个分支相当于独立的，我们可以在当前分支中进行回溯和查看版本（如:git reflog）</li>
<li>分支可以任意的切换</li>
<li>主分支master一般不处理具体的内容，主要负责调配调用子分支，子分支负责处理具体的内容</li>
</ol>
<h3><span id="数据结构">数据结构</span></h3>
<p>（在分支X下仅能操作分支X自身的HEAD指针）</p>
<p><img src="https://pic.imgdb.cn/item/649e74b41ddac507cc1f0eac.jpg" alt></p>
<h3><span id="合并">合并</span></h3>
<p><strong>fast forward</strong></p>
<p><img src="https://pic.imgdb.cn/item/649e74cf1ddac507cc1f3c19.jpg" alt></p>
<ol>
<li>原分支（Master）的HEAD指针移动至其他分支（Branch）的HEAD指针处。</li>
<li>分支后，原分支未进行过提交。</li>
</ol>
<p><strong>three way merge</strong></p>
<p><img src="https://pic.imgdb.cn/item/649e74f31ddac507cc1f6f68.jpg" alt></p>
<p>处于该种情况时，在原分支（Master）下对其他分支（Branch）进行的合并操作会使得原分支产生一次新的提交</p>
<p>合并时，git会比对版本F和版本G相对于它们的公共祖先版本C所做的改动：</p>
<ol>
<li>版本F和版本G相对于版本C新增的文件，在版本H中都会存在（新增文件名相同文件某行内容不同也会发生冲突）</li>
<li>版本F和版本G相对于版本C减少的文件，在版本H中都不会存在</li>
<li>若两个分支都对同一个文件中的同一行进行了修改，则会发生冲突</li>
<li>若一个分支删除了另一个分支进行了修改的文件，则会发生冲突</li>
</ol>
<h3><span id="变基">变基</span></h3>
<p><img src="https://pic.imgdb.cn/item/64a528f01ddac507cc587076.jpg" alt>主分支发生了变化，主分支由其他的子分支合并了新的内容，另一个子分支也需要新增的这些内容，就可以让子分支变基(让主分支的新的内容重新分配给子分支)</p>
<p>先选择要变基的子分支，选中主分支右键选择Rebase即可，主分支中的内容就会重新分配给当前子分支。</p>
<p>情况一:主分支新建了一个子分支，都有内容的改变，推荐先让子分支合并到主分支中，子分支在变基，最后子分支在合并到主分支中。</p>
<p>情况二:分支不是由master创建的，而是由其他的子分支创建的，可以正常使用，分支结构线会有点乱</p>
<p>使用多条分支来并发地推进多个任务</p>
<h3><span id="冲突">冲突</span></h3>
<p><img src="https://pic.imgdb.cn/item/649e75081ddac507cc1f8e4c.jpg" alt></p>
<p>冲突的解决：编辑修改好发生冲突的文件x后，执行git add x和git commit -m “message”</p>
<h3><span id="常用命令">常用命令</span></h3>
<table>
<thead>
<tr>
<th>常用命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>git branch【分支名】</td>
<td>创建名【分支名】的分支。（在当前HEAD指针所指版本上创建了一个新的HEAD指针）</td>
</tr>
<tr>
<td>git branch -v</td>
<td>查看本地仓库中的所有分支，* 开头的分支为当前分支</td>
</tr>
<tr>
<td>git checkout【分支名】</td>
<td>切换到名为【分支名】的分支下，并使工作区重置为该分支的HEAD指针所指版本下的状态</td>
</tr>
<tr>
<td>git merge【分支名】</td>
<td>将该分支的内容合并进当前分支</td>
</tr>
</tbody>
</table>
<h2><span id="gitflow工作流">GitFlow工作流</span></h2>
<table>
<thead>
<tr>
<th>分支</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>主干分支master</td>
<td>仅负责更新正在运行的生产环境下的版本</td>
</tr>
<tr>
<td>Bug修理分支bugfix</td>
<td>负责更新master分支中出现紧急bug后，进行bug修复的版本。修复完毕后将并回master分支</td>
</tr>
<tr>
<td>预发布分支release</td>
<td>负责更新准备发布到主干分支的预发布版本，供一小部分发烧用户预先使用，来收集意见以及测试bug。若出现bug，一般直接在该分支下进行修复；若无问题，则并入主干分支</td>
</tr>
<tr>
<td>开发分支develop</td>
<td>负责更新开发过程中的版本，一般仅在该分支中更新短周期的开发。当开发完成到一定阶段后，将并入预发布分支，进行正式发布前的最后测试</td>
</tr>
<tr>
<td>功能分支feature</td>
<td>负责更新针对某一功能的需要进行长周期开发的版本，使得对不同功能的开发可以并行推进，并且不会影响到开发分支中短周期的开发工作。功能开发完成后，将并入开发分支</td>
</tr>
</tbody>
</table>
<h2><span id="安装git">安装git</span></h2>
<p><a href="https://git-scm.com/">Git官网</a>(注意安装路径不能有中文)</p>
<p><a href="https://gitee.com/">Gitee官网</a></p>
<h2><span id="使用git">使用Git</span></h2>
<p><strong>本地机设置提交码云的用户名和全局邮箱</strong></p>
<p>右键打开git-bash</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line">git config --global user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure>
<h3><span id="idea配置git">idea配置Git</span></h3>
<p><img src="https://pic.imgdb.cn/item/649d42901ddac507cc4dfe2a.jpg" alt></p>
<h3><span id="idea配置gitee">idea配置Gitee</span></h3>
<p><img src="https://pic.imgdb.cn/item/649d433f1ddac507cc4f35b3.jpg" alt></p>
<h3><span id="ssh-配置">SSH 配置</span></h3>
<p>若远程仓库地址使用的是SSH协议，则需要生成公钥（id_rsa.pub文件）</p>
<ol>
<li>右键Git Bash Here打开终端窗口 <code>ssh-keygen -t rsa -C &quot;XXXXXXXXX@qq.com&quot;</code></li>
<li>按照提示完成三次回车生成 ssh key</li>
<li><code>cat ~/.ssh/id_rsa.pub</code>  查看生成的钥匙信息</li>
<li>复制ssh公钥添加到Gitee的SSH公钥管理</li>
<li>回到终端窗口 <code>ssh -T git@gitee.com</code>  <code>Hi XXX! You've successfully authenticated, but Gitee.com does not provide shell access.</code> 则添加成功</li>
</ol>
<h3><span id="上传gitee远程仓库">上传Gitee远程仓库</span></h3>
<img src="https://pic.imgdb.cn/item/649d4bad1ddac507cc5f4404.jpg" style="zoom:67%;">
<h3><span id="首次提交">首次提交</span></h3>
<p><img src="https://pic.imgdb.cn/item/64a3eab71ddac507cc353cfb.jpg" alt></p>
<h3><span id="新增文件交给git">新增文件交给Git</span></h3>
<p><img src="https://pic.imgdb.cn/item/64a3eb3c1ddac507cc365cee.jpg" alt></p>
<p>新建文件会提示add的操作，将新建文件加入到git的本地暂存区，让文件被git管理</p>
<h3><span id="提交新版本">提交新版本</span></h3>
<p><img src="https://pic.imgdb.cn/item/64a3ebd81ddac507cc37aa06.jpg" alt></p>
<p>选择需要提交到本地仓库的文件</p>
<p><img src="https://pic.imgdb.cn/item/64a3ec561ddac507cc38cec2.jpg" alt>commit 将处理好的代码文件提交到版本库中，形成一个新的版本</p>
<h3><span id="版本内容对比">版本内容对比</span></h3>
<ol>
<li>选择提交版本</li>
<li>右侧在选择的版本中指定要对比的文件</li>
<li>点击 Show Diff 展示版本文件对比</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/64a50da51ddac507cc1ae605.jpg" alt></p>
<h3><span id="推送至远程仓库">推送至远程仓库</span></h3>
<p><img src="https://pic.imgdb.cn/item/64a3ecb81ddac507cc39c937.jpg" alt></p>
<p><img src="https://pic.imgdb.cn/item/64a3f4841ddac507cc4ac21c.jpg" alt>push 将git仓库中的内容推送到码云的远程服务器上</p>
<h3><span id="更新项目">更新项目</span></h3>
<p>若远程仓库与本地仓库版本不一致，需要先对本地仓库版本备份，拉取（更新）远程仓库的版本并合并（解决冲突）</p>
<p><img src="https://pic.imgdb.cn/item/64a3ff831ddac507cc602e12.jpg" alt></p>
<p><img src="/post/git/C:%5CUsers%5Cbiyixia%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230704184312999.png" alt="image-20230704184312999"></p>
<p><strong>冲突发生情况</strong></p>
<table>
<thead>
<tr>
<th>本地仓库版本</th>
<th>远程仓库版本</th>
<th>更新项目</th>
</tr>
</thead>
<tbody>
<tr>
<td>没有改变</td>
<td>改变</td>
<td>直接更新到本地仓库</td>
</tr>
<tr>
<td>改变</td>
<td>改变</td>
<td>可能发生冲突</td>
</tr>
<tr>
<td>/</td>
<td>没有改变</td>
<td>无更新</td>
</tr>
</tbody>
</table>
<p><strong>如何避免冲突</strong></p>
<ol>
<li>错开推送代码到远程仓库的时间</li>
<li>在更新版本代码前，需先将远程仓库版本更新到本地仓库</li>
</ol>
<h3><span id="撤销提交">撤销提交</span></h3>
<p><strong>undo commit</strong></p>
<p>提交本地仓库版本后，<strong>若尚未推送至远程仓库</strong>，则可以撤销本次提交且删除记录</p>
<p><img src="https://pic.imgdb.cn/item/64a4caac1ddac507cc9969d0.jpg" alt></p>
<p><img src="https://pic.imgdb.cn/item/64a4cb431ddac507cc9a89af.jpg" alt></p>
<p>撤销提交不会将暂存区的改动撤销，还需要手动回滚</p>
<p><img src="https://pic.imgdb.cn/item/64a4e5341ddac507ccce2a62.jpg" alt></p>
<h3><span id="恢复提交">恢复提交</span></h3>
<p><strong>revert commit</strong></p>
<p>提交本地仓库版本后，<strong>若已经推送至远程仓库</strong>，则只能恢复先前的版本（相当于重新提交先前做过的修改），留下操作记录</p>
<p>恢复提交会将暂存区的改动撤销</p>
<p><img src="https://pic.imgdb.cn/item/64a4e0a41ddac507ccc5781d.jpg" alt></p>
<p><img src="https://pic.imgdb.cn/item/64a4e0c51ddac507ccc5bc38.jpg" alt></p>
<h3><span id="版本回溯">版本回溯</span></h3>
<p>将版本回溯至指定版本，版本回溯会将暂存区的改动撤销</p>
<p>版本回溯会清空 <strong>指定回溯版本后的</strong> 、<strong>未推送的</strong>版本记录</p>
<p><img src="https://pic.imgdb.cn/item/64a4e4261ddac507cccc246f.jpg" alt></p>
<p><img src="/post/git/C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230705113217378.png" alt="image-20230705113217378"></p>
<h3><span id="创建分支">创建分支</span></h3>
<p>右键将在当前分支的头结点创建分支，创建后自动切换到新建的分支</p>
<p><img src="https://pic.imgdb.cn/item/64a4e7641ddac507ccd21c51.jpg" alt></p>
<h3><span id="合并主分支">合并主分支</span></h3>
<p>将子分支合并到主分支中，主分支就拥有了主分支的所有内容</p>
<p>右键主分支，切换至主分支</p>
<p><img src="https://pic.imgdb.cn/item/64a4e8581ddac507ccd3c92e.jpg" alt></p>
<p>右键新分支，将新分支提交版本合并到主分支</p>
<p><img src="https://pic.imgdb.cn/item/64a4e8961ddac507ccd43acc.jpg" alt></p>
<p>合并后会覆盖主分支中的内容</p>
<h2><span id="菜单图标">菜单图标</span></h2>
<p>​		 <!--mybatis框架的环境--> <dependency>     <groupid>org.mybatis</groupid>     <artifactid>mybatis</artifactid>     <version>${mybatis-version}</version> </dependency><!-- 分页插件jar --><dependency>    <groupid>com.github.pagehelper</groupid>    <artifactid>pagehelper</artifactid>    <version>5.2.0</version></dependency></p>
]]></content>
      <categories>
        <category>第三阶段</category>
      </categories>
  </entry>
  <entry>
    <title>html学习</title>
    <url>/post/html%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTML">HTML</a>（HyperText Markup Language，超文本标记语言）是一种用来告知浏览器如何组织页面的<em>标记语言</em>。HTML 可复杂、可简单，一切取决于 web 开发者。</p>
<ul>
<li>语法不严谨</li>
<li>不区分大小写</li>
<li>自动填充没有编写的语法</li>
</ul>
<h2><span id="元素">元素</span></h2>
<ul>
<li><strong>开始标签</strong>（Opening tag）：包含元素的名称（本例为 <em>p</em>），被左、右角括号所包围。开头标签标志着元素开始或开始生效的地方。在这个示例中，它在段落文本的开始之前。</li>
<li><strong>内容</strong>（Content）：元素的内容，本例中就是段落的文本。</li>
<li><strong>结束标签</strong>（Closing tag）：与开始标签相似，只是其在元素名之前包含了一个斜杠。这标志着该元素的结束。没有包含关闭标签是一个常见的初学者错误，它可能会产生奇特的结果。</li>
</ul>
<p>整个元素即指开始标签、内容、结束标签三部分组成的整体。</p>
<h3><span id="嵌套元素">嵌套元素</span></h3>
<p>My cat is <strong>very</strong> grumpy.</p>
<h3><span id="元素分类">元素分类</span></h3>
<ul>
<li>块级元素在页面中以块的形式展现。一个块级元素出现在它前面的内容之后的新行上。任何跟在块级元素后面的内容也会出现在新的行上。块级元素通常是页面上的结构元素。例如，一个块级元素可能代表标题、段落、列表、导航菜单或页脚。一个块级元素不会嵌套在一个内联元素里面，但它可能嵌套在另一个块级元素里面。</li>
<li>内联元素通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行。它通常与文本一起使用，例如，<a>元素创建一个超链接，<strong>等元素创建强调。</strong></a></li>
</ul>
<p><em>第一</em><em>第二</em><em>第三</em></p>
<p>第四</p><p>第五</p><p>第六</p>
<blockquote>
<p>在这篇文章中提到的“块”和“内联”，不应该与 CSS 盒子的类型中的同名术语相混淆。尽管它们默认是相关的，但改变 CSS 显示类型并不会改变元素的分类，也不会影响它可以包含和被包含于哪些元素。防止这种混淆也是 HTML5 摒弃这些术语的原因之一。</p>
</blockquote>
<h3><span id="空元素">空元素</span></h3>
<img src="https://roy-tian.github.io/learning-area/extras/getting-started-web/beginner-html-site/images/firefox-icon.png" alt="Firefox 图标">
<h2><span id="属性">属性</span></h2>
<p>属性包含元素的额外信息，这些信息不会出现在实际的内容中。</p>
<p>属性必须包含：</p>
<ul>
<li>一个空格，它在属性和元素名称之间。如果一个元素具有多个属性，则每个属性之间必须由空格分隔。</li>
<li>属性名称，后面跟着一个等于号。</li>
<li>一个属性值，由一对引号（“”）引起来。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mozilla.org/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;The Mozilla homepage&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>mozila<span class="tag">&lt;<span class="name">a</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>href：声明超链接的 web 地址</li>
<li>title：超链接声明额外的信息，当鼠标悬停在超链接上面时，这部分信息将以工具提示的形式显示。</li>
<li>target：指定链接如何呈现出来。例如，<code>target=&quot;_blank&quot;</code> 将在新标签页中显示链接。如果你希望在当前标签页显示链接，忽略这个属性即可。</li>
</ul>
<h3><span id="布尔属性">布尔属性</span></h3>
<p>有时你会看到没有值的属性，这也是完全可以接受的。这些属性被称为布尔属性。布尔属性只能有一个值，这个值一般与属性名称相同。例如，考虑 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#attr-disabled"><code>disabled</code></a> 属性，你可以将其分配给表单输入元素。用它来禁用表单输入元素，这样用户就不能输入了。被禁用的元素通常有一个灰色的外观。示例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 disabled 属性来防止终端用户输入文本到输入框中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 下面这个输入框不包含 disabled 属性，所以用户可以向其中输入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="属性引号">属性引号</span></h3>
<ul>
<li>
<p>建议不省略包围属性的引号</p>
</li>
<li>
<p>可以使用单引号或双引号，但不能在一个属性值里混用</p>
</li>
<li>
<p>可以在一种引号中嵌套另一种引号，若想在引号中嵌套同种引号，必须使用 HTML 实体引用 ：' (&amp;apos;)</p>
</li>
<li>
<p>连续多个空格最多显示一个，也需要使用实体引用 </p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/XML%E4%B8%8EHTML%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93%E5%BC%95%E7%94%A8%E5%88%97%E8%A1%A8#HTML%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93%E5%BC%95%E7%94%A8">XML与HTML字符实体引用列表 - 维基百科，自由的百科全书 (wikipedia.org)</a></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://www.example.com&#x27;</span> <span class="attr">title</span>=<span class="string">&#x27;Isn<span class="symbol">&amp;apos;</span>t this fun?&#x27;</span>&gt;</span>示例站点链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2><span id="html文档">HTML文档</span></h2>
<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8">
    <title>我的测试站点</title>
  </head>
  <body>
    <h1><span id="经典回忆">经典回忆</span></h1>
    <p>
     相思无用，惟别而已。别期若有定，千般煎熬又何如？莫道黯然销魂，何处<strong>柳暗花明</strong>？<br>
     ——《<a href="https://zh.wikipedia.org/zh-hans/神鵰俠侶">神雕侠侣</a>》
    </p>
    <img src="https://roy-tian.github.io/learning-area/extras/tools/playable-code/images/sdxl.jfif" alt="《神雕侠侣》作品图片">
    <div>
      <input type="text">
    </div>
	<div>
      <input type="text" disabled>
    </div>
  </body>
</html>
<ol>
<li><code>&lt;!DOCTYPE html&gt;</code>: 声明文档类型。早期的 HTML（大约 1991-1992 年）文档类型声明类似于链接，规定了 HTML 页面必须遵从的良好规则，能自动检测错误和其他有用的东西。文档类型是一个历史遗留问题，需要包含它才能使其他东西正常工作。现在，只需要知道 <code>&lt;!DOCTYPE html&gt;</code> 是html第五个版本的声明</li>
<li><code>&lt;html&gt;&lt;/html&gt;</code>: <html>元素。这个元素包裹了页面中所有的内容，有时被称为根元素。</html></li>
<li><code>&lt;head&gt;&lt;/head&gt;</code>: <head>元素。这个元素是一个容器，它包含了所有你想包含在 HTML 页面中但<strong>不在 HTML 页面中显示</strong>的内容。这些内容包括你想在搜索结果中出现的关键字和页面描述、CSS 样式、字符集声明等等。以后的章节中会学到更多相关的内容。</head></li>
<li><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>: <meta>元素。这个元素代表了不能由其他 HTML 元相关元素表示的元数据，比如<base><link><script><style><title>。charset属性将你的文档的字符集设置为 UTF-8，其中包括绝大多数人类书面语言的大多数字符。有了这个设置，页面现在可以处理它可能包含的任何文本内容。没有理由不对它进行设置，它可以帮助避免以后的一些问题。</li>
<li><code>&lt;title&gt;&lt;/title&gt;</code>: <title> 元素。这设置了页面的标题，也就是出现在该页面加载的浏览器标签中的内容。当页面被加入书签时，页面标题也被用来描述该页面。</li>
<li><code>&lt;body&gt;&lt;/body&gt;</code>: <body> 元素。包含了你访问页面时<em>所有</em>显示在页面上的内容，包含文本、图片、视频、游戏、可播放音频轨道等等。</li>
</ol>
<h2 id="格式">格式</h2>
<ul>
<li>无论你在 HTML 元素的内容中使用多少空格（包括一个或多个空白字符或换行），当渲染这些代码的时候，HTML 解释器会将连续出现的空白字符减少为一个单独的空格符。</li>
<li>在我们的HTML中，每个嵌套元素都比它所在的元素多缩进了两个空格。</li>
</ul>
<h2 id="注释">注释</h2>
<!--内容-->
<h2 id="HTML头部">HTML头部</h2>
<p>HTML 头部包含 HTML&lt;head&gt;元素的内容，与&lt;body&gt;元素内容不同，页面在浏览器加载后它的内容不会在浏览器中显示，它的作用是保存页面的一些元数据</p>
<h3 id="添加标题-title">添加标题 title</h3>
<ul>
<li>&lt;h1&gt; 元素在页面加载完毕时显示在页面中，通常只出现一次，为 body 添加顶级标题、用来标记页面内容的标题（故事名称、新闻摘要等等）。</li>
<li>&lt;title&gt;元素是一项元数据，用于表示整个 HTML 文档的标题（而不是文档内容）为head添加标题。</li>
</ul>
<h3 id="元数据-meta">元数据 meta</h3>
<ul>
<li>指定文档字符编码</li>
</ul>
<meta charset="utf-8" />
<ul>
<li>添加作者和描述</li>
</ul>
<p><meta
  name="description"
  content="The MDN Web Docs site
  provides information about Open Web technologies
  including HTML, CSS, and APIs for both Web sites and
  progressive web apps." /></p>
<p><img src="https://pic.imgdb.cn/item/63f6d267f144a01007a898af.jpg" alt=""></p>
<ul>
<li>其他类型</li>
</ul>
<h3 id="应用css和JavaScript">应用css和JavaScript</h3>
<ul>
<li>&lt;link&gt;元素经常位于文档的头部，它有 2 个属性，<code>rel=&quot;stylesheet&quot;</code> 表明这是文档的样式表，而 <code>href</code> 包含了样式表文件的路径：</li>
</ul>
<link rel="stylesheet" href="my-css-file.css" />
<ul>
<li>&lt;script&gt;元素也应当放在文档的头部，并包含 <code>src</code> 属性来指向需要加载的 JavaScript 文件路径，同时最好加上 <code>defer</code> 以告诉浏览器在解析完成 HTML 后再加载 JavaScript。这样可以确保在加载脚本之前浏览器已经解析了所有的 HTML 内容。这样你就不会因为 JavaScript 试图访问页面上不存在的 HTML 元素而产生错误。实际上有很多方法来处理在你的页面上加载 JavaScript，但对于现代浏览器来说，这是最可靠的方法</li>
</ul>
<script src="my-js-file.js" defer></script>
<h2><span id="html文本">HTML文本</span></h2>
<table>
<thead>
<tr>
<th>标签</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>p</td>
<td>双标签</td>
<td>段落</td>
</tr>
<tr>
<td>title</td>
<td>双标签</td>
<td>标题</td>
</tr>
<tr>
<td>ol（li）</td>
<td>双标签</td>
<td>有序列表</td>
</tr>
<tr>
<td>ul（li）</td>
<td>双标签</td>
<td>无序列表</td>
</tr>
<tr>
<td>strong</td>
<td>双标签</td>
<td>强调</td>
</tr>
<tr>
<td>em</td>
<td>双标签</td>
<td>斜体</td>
</tr>
<tr>
<td>br</td>
<td>单标签</td>
<td>强制换行</td>
</tr>
<tr>
<td>hr</td>
<td>单标签</td>
<td>水平线</td>
</tr>
<tr>
<td>blockquote</td>
<td>双标签</td>
<td>块引用</td>
</tr>
<tr>
<td>cite</td>
<td>双标签</td>
<td>行引用</td>
</tr>
</tbody>
</table>
<h3><span id="列表">列表</span></h3>
<ul>
<li>
<p>有序列表</p>
<ol>
  <li>沿着条路走到头</li>
  <li>右转</li>
  <li>直行穿过第一个十字路口</li>
  <li>在第三个十字路口处左转</li>
  <li>继续走 300 米，学校就在你的右手边</li>
</ol>
</li>
<li>
<p>无序列表</p>
<ul>
  <li>豆浆</li>
  <li>油条</li>
  <li>豆汁</li>
  <li>焦圈</li>
</ul>
</li>
<li>
<p>嵌套列表</p>
<ol>
  <li>先用蛋白一个、盐半茶匙及淀粉两大匙搅拌均匀，调成“腌料”，鸡胸肉切成约一厘米见方的碎丁并用“腌料”搅拌均匀，腌渍半小时。</li>
  <li>用酱油一大匙、淀粉水一大匙、糖半茶匙、盐四分之一茶匙、白醋一茶匙、蒜末半茶匙调拌均匀，调成“综合调味料”。</li>
  <li>鸡丁腌好以后，色拉油下锅烧热，先将鸡丁倒入锅内，用大火快炸半分钟，炸到变色之后，捞出来沥干油汁备用。</li>
  <li>在锅里留下约两大匙油，烧热后将切好的干辣椒下锅，用小火炒香后，再放入花椒粒和葱段一起爆香。随后鸡丁重新下锅，用大火快炒片刻后，再倒入“综合调味料”继续快炒。
    <ul>
      <li>如果你采用正宗川菜做法，最后只需加入花生米，炒拌几下就可以起锅了。</li>
      <li>如果你在北方，可加入黄瓜丁、胡萝卜丁和花生米，翻炒后起锅。</li>
    </ul>
  </li>
</ol>
</li>
</ul>
<h3><span id="强调">强调</span></h3>
<p>This liquid is <strong>highly toxic</strong> —
if you drink it, <b>you may <em>die</em></b>.</p>
<p>仅仅影响表象而且没有语义，被称为<strong>表象元素</strong>（presentational elements）并且不应该再被使用。因为正如我们在之前看到的，语义对无障碍、SEO（搜索引擎优化）等非常重要。</p>
<ul>
<li><code>&lt;b&gt;</code>、<code>&lt;i&gt;</code> 或 <code>&lt;u&gt;</code> 来表达传统上的粗体、斜体或下划线</li>
</ul>
<h3><span id="描述列表">描述列表</span></h3>
<p>目的是标记一组项目及其相关描述，例如术语和定义，或者是问题和答案等。让我们看一组术语和定义的示例：</p>
<p>描述列表使用与其他列表类型不同的闭合标签<dl>；此外，每一项都用 <dt>（description term）元素闭合。每个描述都用<dd>（description definition）元素闭合。</dd></dt></dl></p>
<dl>
  <dt>内心独白</dt>
    <dd>戏剧中，某个角色对自己的内心活动或感受进行念白表演，这些台词只面向观众，而其他角色不会听到。</dd>
  <dt>语言独白</dt>
    <dd>戏剧中，某个角色把自己的想法直接进行念白表演，观众和其他角色都可以听到。</dd>
  <dt>旁白</dt>
    <dd>戏剧中，为渲染幽默或戏剧性效果而进行的场景之外的补充注释念白，只面向观众，内容一般都是角色的感受、想法、以及一些背景信息等。</dd>
</dl>
<p>一个术语可以同时有多个描述</p>
<h3><span id="引用">引用</span></h3>
<p><strong>块引用</strong></p>
<p>你应该把它用<blockquote>元素包裹起来表示，并且在cite属性里用 URL 来指向引用的资源。</blockquote></p>
<p>Here is a blockquote:</p>
<blockquote cite="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote">
  <p>
    The <strong>HTML <code>&lt;blockquote&gt;</code> Element</strong> (or
    <em>HTML Block Quotation Element</em>) indicates that the enclosed text is
    an extended quotation.
  </p>
</blockquote>
<p><strong>行内引用</strong></p>
<q>
<p>The quote element — <code>&lt;q&gt;</code> — is <q cite="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q">intended
for short quotations that don't require paragraph breaks.</q></p>
<p>
  According to the
  <a href="/en-US/docs/Web/HTML/Element/blockquote">
    <cite>MDN blockquote page</cite></a>:
</p>
<blockquote cite="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote">
  <p>The <strong>HTML <code>&lt;blockquote&gt;</code> Element</strong> (or <em>HTML Block
  Quotation Element</em>) indicates that the enclosed text is an extended quotation.</p>
</blockquote>
<h3><span id="引文cite">引文cite</span></h3>
<p>The quote element — <code>&lt;q&gt;</code> — is <q cite="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q">intended
for short quotations that don't require paragraph breaks.</q> — <a href="/en-US/docs/Web/HTML/Element/q">
<cite>MDN q page</cite></a>.</p>
<h3><span id="水平线">水平线</span></h3>
<hr color="red" size="100px" width="700px"> 
<h2><span id="html超链接ltagt">HTML超链接&lt;a&gt;</span></h2>
<h3><span id="属性">属性</span></h3>
<ul>
<li>href：指向链接</li>
<li>title：关于链接的补充信息</li>
</ul>
<h3><span id="url-path">URL、PATH</span></h3>
<ul>
<li>
<p>URL（统一资源定位符）是一个定义了在网络上的位置的一个文本字符串。例如https://www.mozilla.org/zh-CN/`.</p>
</li>
<li>
<p>指向当前： href=“contacts.html”</p>
</li>
<li>
<p>指向子目录：href=&quot;projects/index.html</p>
</li>
<li>
<p>指向上级目录：href=“…/pdfs/project-brief.pdf”</p>
</li>
</ul>
<h3><span id="链接文档特定部分">链接文档特定部分</span></h3>
<h2><span id="邮寄地址">邮寄地址</span></h2>
<p>要提供意见和建议，请将信件邮寄至<a href="contacts.html#Mailing_address">我们的地址</a>。</p>
<ul>
<li>组件设置id</li>
<li>通过href:&quot;URL#id&quot;链接到特定的id</li>
</ul>
<p><strong>绝对 URL</strong>：指向由其在 Web 上的绝对位置定义的位置，包括<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Protocol">协议</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Domain_name">域名</a>。像下面的例子，如果 <code>index.html</code> 页面上传到了 <code>projects</code> 这一个目录。并且 <code>projects</code> 目录位于 web 服务站点的根目录，web 站点的域名为 <code>http://www.example.com</code>，那么这个页面就可以通过 <code>http://www.example.com/projects/index.html</code> 访问（或者通过 <code>http://www.example.com/projects/</code> 来访问，因为在没有指定特定的 URL 的情况下，大多数 web 服务器会默认访问加载 <code>index.html</code> 这类页面）</p>
<p><strong>相对 URL</strong>：指向与你链接的文件相关的位置，更像我们在前面一节中所看到的位置。例如，如果我们想从示例文件链接 <code>http://www.example.com/projects/index.html</code> 转到相同目录下的一个 PDF 文件，URL 就是文件名（例如 <code>project-brief.pdf</code>），没有其他的信息要求。如果 PDF 文件能够在 <code>projects</code> 的子目录 <code>pdfs</code> 中访问到，相对路径就是 <code>pdfs/project-brief.pdf</code>（对应的绝对 URL 是 <code>http://www.example.com/projects/pdfs/project-brief.pdf</code>）</p>
<p>一个相对 URL 将指向不同的位置，这取决于它所在的文件所在的位置</p>
<p><a href="https://www.example.com/large-report.pdf">
  下载销售报告（PDF, 10MB）
</a></p>
<p><a href="https://www.example.com/video-stream/" target="_blank">
  观看视频（将在新标签页中播放，HD 画质）
</a></p>
<p><a href="https://www.example.com/car-game">
  进入汽车游戏（需要 Flash 插件）
</a></p>
<h3><span id="download属性">download属性</span></h3>
<p>当你链接到要下载的资源而不是在浏览器中打开时，你可以使用 download 属性来提供一个默认的保存文件名。下面是一个 Firefox 的 Windows 最新版本下载链接的示例：</p>
<p><a href="https://download.mozilla.org/?product=firefox-latest-ssl&os=win64&lang=zh-CN" download="firefox-latest-64bit-installer.exe"><br>
下载最新的 Firefox 中文版 - Windows（64 位）<br>
</a></p>
</q></li></ol>]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
  </entry>
  <entry>
    <title>maven</title>
    <url>/post/maven/</url>
    <content><![CDATA[<p><a href="http://maven.apache.org/">Maven官网</a></p>
<h2><span id="传统项目开发存在的问题">传统项目开发存在的问题</span></h2>
<p>一个项目做成一个工程，造成工程比较庞大，package划分模块已经不再满足需求，需要使用工程来划分模块；</p>
<p>数量众多的项目之间的依赖，需要手动打包并引入；</p>
<p>项目中需要的数量众多的jar包，需要手动下载并引入，并且多个项目需要的jar包存在重复的问题；</p>
<p>项目中需要的jar包有版本兼容的问题，需要手动解决；</p>
<p>项目中需要的jar包又依赖其它的jar包，需要手动解决。</p>
<h2><span id="maven功能">Maven功能</span></h2>
<h3><span id="管理依赖">管理依赖</span></h3>
<p>只需要声明就可以自动到仓库下载</p>
<h3><span id="构建项目">构建项目</span></h3>
<h3><span id="管理项目信息">管理项目信息</span></h3>
<p>生成一个站点文档，一个命令就可以解决，最后再说</p>
<h2><span id="pomproject-object-mode">POM(Project Object Mode)</span></h2>
<p>Maven基于项目中的POM配置文件来对当前项目进行构建</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>modelVersion</em></td>
<td>固定值4.0.0</td>
</tr>
<tr>
<td><em>groupId</em></td>
<td>公司或组织的 id，<code>项目用途(com/org).公司名.项目名</code></td>
</tr>
<tr>
<td><em>artifactId</em></td>
<td>项目或某个模块的名称，作为 Maven 工程的工程名</td>
</tr>
<tr>
<td><em>version</em></td>
<td>版本号,若项目还在开发中，通常在版本后带-SNAPSHOT</td>
</tr>
<tr>
<td>packaging</td>
<td>项目打包的类型，如ar、war、rar、ear、pom，默认是jar</td>
</tr>
<tr>
<td>dependencies</td>
<td>嵌套一个或多个dependency标签</td>
</tr>
<tr>
<td>dependency</td>
<td>Maven中用于项目构建、运行所依赖的jar包被称为依赖，该标签用于定位、配置要使用的依赖</td>
</tr>
<tr>
<td>dependencyManagement</td>
<td>主要用于继承；声明依赖，并不会实际引入依赖</td>
</tr>
<tr>
<td>properties</td>
<td>定义配置属性，如project.build.sourceEncoding（项目构建源码编码方式）设置为UTF-8防止中文乱码</td>
</tr>
<tr>
<td>build</td>
<td>配置构建相关的信息，比如build下有finalName，表示的就是最终构建之后的名称</td>
</tr>
<tr>
<td>parent</td>
<td>声明要继承的父工程的pom配置</td>
</tr>
<tr>
<td>modules</td>
<td>主要用于聚合其它模块</td>
</tr>
</tbody>
</table>
<ol>
<li>groupId，artifactId，version构成了该项目的坐标，其唯一确定了一个project</li>
<li>对应Maven本地仓库根目录\【groupId】\【artifactId】\【version】\【artifactId】-【version】.jar</li>
</ol>
<h2><span id="六大属性">六大属性</span></h2>
<h3><span id="内置属性">内置属性</span></h3>
<p>内置属性(Maven预定义,用户可以直接使用)</p>
<table>
<thead>
<tr>
<th>内置属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>${basedir}</td>
<td>表示项目根目录,即包含pom.xml文件的目录</td>
</tr>
<tr>
<td>${version}</td>
<td>表示项目版本</td>
</tr>
<tr>
<td>${project.basedir}</td>
<td>同 ${basedir}</td>
</tr>
<tr>
<td>${project.baseUri}</td>
<td>表示项目文件地址</td>
</tr>
<tr>
<td>${maven.build.timestamp}</td>
<td>表示项目构件开始时间</td>
</tr>
<tr>
<td>${maven.build.timestamp.format}</td>
<td>表示属性 ${maven.build.timestamp}的展示格式,默认值为yyyyMMdd-HHmm</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">maven.build.timestamp.format</span>&gt;</span>yyyy-MM-dd HH:mm:ss<span class="tag">&lt;/<span class="name">maven.build.timestamp.format</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="pom属性">POM属性</span></h3>
<p>POM属性(使用pom属性可以引用到pom.xml文件对应元素的值)</p>
<table>
<thead>
<tr>
<th>POM属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>${project.build.directory}</td>
<td>表示主源码路径</td>
</tr>
<tr>
<td>${project.build.sourceEncoding}</td>
<td>表示主源码的编码格式</td>
</tr>
<tr>
<td>${project.build.sourceDirectory}</td>
<td>表示主源码路径</td>
</tr>
<tr>
<td>${project.build.finalName}</td>
<td>表示输出文件名称</td>
</tr>
<tr>
<td>${project.version}</td>
<td>表示项目版本,与 ${version}相同</td>
</tr>
</tbody>
</table>
<h3><span id="自定义属性">自定义属性</span></h3>
<p>自定义属性(在pom.xml文件的标签下定义的Maven属性)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-version</span>&gt;</span>5.3.20<span class="tag">&lt;/<span class="name">spring-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">mybatis-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="settingsxml文件属性">settings.xml文件属性</span></h3>
<p>(与pom属性同理,用户使用以settings.开头的属性引用settings.xml文件中的XML元素值)</p>
<table>
<thead>
<tr>
<th>settings.xml属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>${settings.localRepository}</td>
<td>表示本地仓库的地址</td>
</tr>
</tbody>
</table>
<h3><span id="java系统属性">Java系统属性</span></h3>
<p>(所有的Java系统属性都可以使用Maven属性引用)</p>
<ol>
<li>使用mvn help:system命令可查看所有的Java系统属性;</li>
<li>System.getProperties()可得到所有的Java属性;</li>
<li>${user.home}表示用户目录;</li>
</ol>
<h3><span id="环境变量属性">环境变量属性</span></h3>
<p>(所有的环境变量都可以用以env.开头的Maven属性引用)</p>
<ol>
<li>使用mvn help:system命令可查看所有环境变量;</li>
<li>${env.JAVA_HOME}表示JAVA_HOME环境变量的值;</li>
</ol>
<h2><span id="仓库">仓库</span></h2>
<p>为了提高构建的效率和依赖复用，maven把所有的依赖统一存储在某一个位置，这个位置就叫做仓库。</p>
<h3><span id="本地仓库">本地仓库</span></h3>
<p>默认存放路径为当前用户目录\.m2\repository为本机上所有的Maven工程服务</p>
<p>可在<code>【Maven_home】/conf/settings.xml</code>中通过<code>&lt;localRepository&gt;</code>标签来指定本地仓库路径</p>
<h3><span id="远程仓库">远程仓库</span></h3>
<p>构建项目时，若POM中所声明的依赖未能在本地仓库中找到，将触发Maven从远程仓库中进行下载，并保存在本地仓库中，供项目使用。</p>
<p>中央仓库是maven默认的远程仓库，其地址是:<a href="http://repo.maven.apache.org/maven2/">http://repo.maven.apache.org/maven2/</a></p>
<p>我们可以在<code>【Maven_home】/conf/settings.xml</code>或POM中通过如下配置来对远程仓库进行设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中id，name，url分别表示该远程仓库的唯一标识、名字、地址</p>
<p><strong>若配置了多个远程仓库，MAVEN寻找依赖的顺序</strong></p>
<ol>
<li>在<code>【Maven_home】/conf/settings.xml</code>文件中配置的远程仓库</li>
<li>当前项目POM文件中配置的远程仓库</li>
<li>父项目POM文件中配置的远程仓库</li>
<li>Super POM文件中配置的远程仓库（Maven的中心仓库）</li>
</ol>
<p><strong>在<code>【Maven_home】/conf/settings.xml</code>中通过如下配置来为每个远程仓库配置最多一个镜像</strong></p>
<p>当Maven需要访问某个远程仓库时，将会去访问该远程仓库的镜像，以下是阿里云maven镜像仓库配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中id，name，url，mirrorOf分别表示该镜像的唯一标识、名字、地址、所镜像的远程仓库id</p>
<h3><span id="内部仓库私服">内部仓库（私服）</span></h3>
<p>本质上就是内部使用的远程仓库，架设在局域网内的仓库服务，私服代理广域网上的远程仓库，供局域网内的Maven用户使用</p>
<p>当Maven需要下载构件的时候，它从私服请求，如果私服上不存在该构件，则从外部的远程仓库下载，缓存在私服上之后，再为Maven的下载请求提供服务。我们还可以把一些无法从外部仓库下载到的构件上传到私服上。公司中常常使用这种方式</p>
<p>当前主流的maven私服： Apache的Archiva、JFrog的Artifactory、Sonatype的Nexus</p>
<img src="https://pic.imgdb.cn/item/64a667b41ddac507ccabd228.jpg" style="zoom:50%;">
<h2><span id="依赖">依赖</span></h2>
<p>可通过如下POM配置来设置当前项目的直接依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中groupId，artifactId，version为依赖的坐标。type为依赖的类型，一般为依赖文件的后缀名，默认为jar</p>
<h2><span id="项目继承">项目继承</span></h2>
<p>当一个项目有足够多的文件时，可以将项目拆分多个模块，每个模块都需要配置自身的依赖信息</p>
<p>通过如下POM配置将当前项目设置为另一个项目的子项目</p>
<p>父模块POM文件里的<strong>变量、依赖、组织、版本</strong>配置都将合并到子项目中，成为子项目POM文件的默认值（插件配置无法继承）</p>
<ol>
<li>子模块继承了父模块的变量，父模块统一管理子模块的依赖版本</li>
<li>子模块选择性继承父模块的依赖，父模块维护整个项目的依赖信息</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span> </span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中parent标签指定了父项目的坐标，以及父模块的POM文件的相对路径</p>
<p><strong>父模块打包方式必须为pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父模块POM中设置packaging，只有打包方式为pom的工程才能够管理其他工程，工程中不写业务代码，因此可将src目录删除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>父模块统一管理依赖版本</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父模块POM中设置property，并在其它标签中使用$&#123;propertyName&#125;来表示该property的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">propertyName</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">propertyName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>父模块统一管理依赖配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父模块POM中设置dependencyManagement（依赖管理器），子模块手动继承时才会引入到工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若不使用依赖管理器，则强制使所有子模块继承一下依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>子模块引用父工程管理的依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子模块POM中直接引用依赖，可省略版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>子项目根据groupId（必填）, artifactId（必填）, type（默认为jar）, classifier（默认为null）四个值来定位到父项目dependencyManagement中的依赖，并完全沿用父项目dependencyManagement中对该依赖的配置</p>
<h2><span id="项目聚合">项目聚合</span></h2>
<p>在<strong>总工程</strong>中通过如下POM配置将各个<strong>模块工程</strong>汇集成起来，作为一个整体（完整的项目）</p>
<p>对当前项目进行编译时，也将同时为该项目所有的子模块进行编译，解决一次性编译的问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--子模块项目的相对路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">module</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">module</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="依赖传递">依赖传递</span></h2>
<p>根据直接依赖，获取到其所有的间接依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A</span><br><span class="line">├── B</span><br><span class="line">│  	└── D</span><br><span class="line">└── C</span><br><span class="line">	└── E</span><br></pre></td></tr></table></figure>
<p>如当前项目A直接依赖于B和C，而B和C分别直接依赖于D和E。通过依赖传递机制，我们仅需在项目A中配置其直接依赖B和C，Maven会自动对间接依赖D和E进行获取</p>
<h2><span id="依赖冲突">依赖冲突</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A</span><br><span class="line">├── B</span><br><span class="line">│  	└── E 1.0</span><br><span class="line">└── C</span><br><span class="line">    └── D 2.0</span><br><span class="line">    	└── E 2.0</span><br></pre></td></tr></table></figure>
<p>在上例中，A的间接依赖E发生了冲突。由于E 1.0在依赖树中的层级更加接近项目A，因此E 1.0将会被采用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A</span><br><span class="line">├── B</span><br><span class="line">│  	└── D 1.0</span><br><span class="line">└── C</span><br><span class="line">	└── D 2.0</span><br></pre></td></tr></table></figure>
<p>在上例中，A的间接依赖D发生了冲突。由于D 1.0所属的直接依赖B在A中被首先声明，因此D 1.0将会被采用</p>
<h2><span id="依赖范围">依赖范围</span></h2>
<p>在<dependency>标签中，我们可通过设置<scope>标签来指定该依赖的范围。其可选值有：</scope></dependency></p>
<p>maven项目依赖生效分为三个时期，编译期、测试期、运行期</p>
<p>通过对<code>&lt;scope&gt;</code>合理的配置，可以控制当前依赖在不同时期编译期、测试期、运行期生效的关系，指定被依赖资源的依赖范围</p>
<p>可选配置有 compile、test、provided、runtime、system、import，若不指定则默认 compile</p>
<table>
<thead>
<tr>
<th><code>&lt;scope&gt;</code>依赖范围</th>
<th>编译期</th>
<th>测试期</th>
<th>运行期</th>
<th>打入jar包</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>compile</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>默认</td>
</tr>
<tr>
<td>test</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td>如JUnit依赖，只在编译测试代码（src/test）和运行测试的时候才需要</td>
</tr>
<tr>
<td>provided</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
<td>当前依赖在运行时默认由某个子项目项目引用，运行期则不需要引用</td>
</tr>
<tr>
<td>runtime</td>
<td></td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>JDBC驱动实现，项目主代码的编译只需要JDK提供的JDBC接口，只有在执行测试或者运行项目的时候才需要实现上述接口的具体JDBC驱动</td>
</tr>
<tr>
<td>system</td>
<td>√</td>
<td>√</td>
<td></td>
<td>√</td>
<td>由systemPath标签指定依赖jar的路径，表示的是从本地磁盘上找依赖，而不是从 maven 仓库下载，不适用多人协作</td>
</tr>
<tr>
<td>import</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>将目标pom的dependencyManagement标签中的依赖，合并到当前pom的dependencyManagement标签内，供引用项目中使用</td>
</tr>
</tbody>
</table>
<p><strong>使用provided依赖范围</strong> <img src="https://pic.imgdb.cn/item/64a396961ddac507cc7a32b3.jpg" alt></p>
<p>上述工具项目中引用了spring-web依赖，但是当前项目同时引用了<code>spring-boot-starter-web</code>（包括<code>spring-web</code>）</p>
<p>既然运行时SpringBoot会提供spring-web，因此使用provided依赖范围在运行时不参与项目打包，避免重复引用依赖</p>
<p><strong>使用runtime依赖范围</strong><br>
专门用于编译时不需要，但是运行时需要的 jar 包。比如：编译时我们根据接口调用方法，但是实际运行时需要的是接口的实现类。典型案例是：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--热部署 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>使用system依赖范围</strong><br>
以 Windows 系统环境下开发为例，假设现在 D:\product\maven-demo-parent\demo-module\target\demo-module-1.0-SNAPSHOT.jar 想要引入到我们的项目中，此时我们就可以将依赖配置为 system 范围：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.javatv.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>D:\product\maven-demo-parent\demo-module\target\demo-module-1.0-SNAPSHOT.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是很明显：这样引入依赖完全不具有可移植性，所以不要使用</p>
<p><strong>使用import 依赖范围</strong></p>
<p>由于Maven中只能使用单继承，springboot项目的父工程为spring-boot-starter-parent，无法直接配置springCloud的依赖</p>
<ol>
<li>打包类型必须是 pom</li>
<li>必须在 dependencyManagement 配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringCloud 微服务 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringCloud Alibaba 微服务 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="依赖范围传递">依赖范围传递</span></h2>
<img src="file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml4668\wps2.jpg" alt="img" style="zoom:67%;"> 
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A</span><br><span class="line">└── B</span><br><span class="line">	└── C</span><br></pre></td></tr></table></figure>
<p>A直接依赖于B，B直接依赖于C</p>
<ol>
<li>当B的POM文件将依赖C配置为test和provided范围时，B和C之间的依赖传递将被阻断。此时A不再间接依赖于C</li>
<li>当B的POM文件将依赖C配置为compile和runtime范围时，C将会成为A的间接依赖，其范围值将被设置为与依赖B的范围值一致</li>
<li>特殊：当B的POM文件将依赖C配置为runtime范围且A的POM文件将依赖B配置为compile范围时，C的范围值将被设置为runtime</li>
</ol>
<table>
<thead>
<tr>
<th>test</th>
<th>provided</th>
</tr>
</thead>
<tbody>
<tr>
<td>B中依赖C仅用于测试，因此A依赖B而无需间接依赖C</td>
<td>B在运行时外界将提供C，则A无需间接依赖C</td>
</tr>
</tbody>
</table>
<h2><span id="可选依赖">可选依赖</span></h2>
<p>可通过如下POM配置来将当前项目的某个直接依赖设置为可选依赖。该设置将会阻断当前项目与该依赖间的依赖传递，使得其它项目无法通过当前项目而间接依赖于该依赖，只能本项目使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span> </span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="依赖排除">依赖排除</span></h2>
<p>可通过如下POM配置来删除当前项目的某个直接依赖中的间接依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span> </span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="依赖循环问题">依赖循环问题</span></h2>
<p>如果 A 工程依赖 B 工程，B 工程依赖 C 工程，C 工程又反过来依赖 A 工程，那么在执行构建操作时会报下面的错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DANGER</span><br><span class="line"></span><br><span class="line">[ERROR] [ERROR] The projects in the reactor contain a cyclic reference:</span><br></pre></td></tr></table></figure>
<h2><span id="生命周期">生命周期</span></h2>
<p>当我们对一个项目进行打包时，maven分别执行了</p>
<p>验证（validate） ==&gt; 编译源码（compile） ==&gt; 编译测试源码（test-compile） ==&gt; 单元测试（test）==&gt; 打包（package）</p>
<ol>
<li>这个过程就是生命周期(lifecycle)。在生命周期的过程中会有很多的阶段(phase)（如clean由pre-clean、clean、post-clean组成），这些阶段按照既定的顺序执行来完成一个项目的构建。</li>
</ol>
<p>Maven有三个内置的构建生命周期，分别是：clean、default、site，都对应成一个个的生命周期阶段，并对每一个阶段提供相应的命令</p>
<h3><span id="clean">Clean</span></h3>
<p>构建之前进行项目的清理（缓存，临时文件，编译文件等）</p>
<ol>
<li>pre-clean 执行一些需要在clean 之前完成的工作</li>
<li>clean 移除所有上一次构建生成的文件，即target目录，但是已经install到仓库里的包不会删除</li>
<li>post-clean 执行一些需要在clean 之后立即完成的工作</li>
</ol>
<h3><span id="default">Default</span></h3>
<p>负责项目的部署，构建的核心部分，编译，测试，打包，安装，部署等。</p>
<ol>
<li>compile 编译项目源码，会在当前目录下生成一个target,里边存放编译主程序之后生成的字节码文件</li>
<li>test-Compile 编译测试源代码，会在当前目录下生成一个target,里边存放编译测试程序之后生成的字节码文件</li>
<li>test 会生成一个目录surefire-reports，保存测试结果使用合适的单元测试框架运行测试，这些测试代码不会打包或者部署</li>
<li>package 编译、编译测试、测试；并把主程序按照pom.xml配置打包</li>
<li>install 打包，且按照本工程的坐标保存至本地仓库，以让其他项目依赖</li>
<li>deploy 打包、保存到本地仓库中，并将最终的包保存到私服仓库，以让其他开发人员项目共享或部署到服务器上运行</li>
</ol>
<h3><span id="site">Site</span></h3>
<p>负责项目文档的创建，生成项目报告，站点 ，发布站点</p>
<ol>
<li>pre-site 执行一些需要在生成站点文档之前完成的工作</li>
<li>site 生成项目的站点文档</li>
<li>site-deploy 将生成的站点文档部署到特定的服务器上</li>
</ol>
<p><strong>注意</strong></p>
<p>当执行某个生命周期的阶段时，该阶段及其所在生命周期中所有位于该阶段前的所有构建阶段都将被按序执行（运行任何一个阶段的时候，它前面的所有阶段都会被运行 ）</p>
<h2><span id="构建配置">构建配置</span></h2>
<p><code>&lt;build&gt;</code> 标签的子标签大致包含如下三个部分</p>
<h3><span id="定义约定的目录结构">定义约定的目录结构</span></h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project(根目录，也就是工程名)</span><br><span class="line">- src(源代码)</span><br><span class="line">  - main(主程序)</span><br><span class="line">    - java(主程序的java源码)</span><br><span class="line">    - resources(主程序的配置文件)</span><br><span class="line">  - test(测试程序)</span><br><span class="line">    - java(测试程序的java源码)</span><br><span class="line">    - resources(测试程序的配置文件)</span><br><span class="line">- pom.xml (Maven工程的核心配置文件)</span><br></pre></td></tr></table></figure>
<p>在项目根路径下查看pom.xml，右键点击Show Effective POM选项，在页面中可以查找到maven默认的目录结构</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>【module_path】\src\main\java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scriptSourceDirectory</span>&gt;</span>【module_path】e\src\main\scripts<span class="tag">&lt;/<span class="name">scriptSourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>【module_path】\src\test\java<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>【module_path】\target\classes<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testOutputDirectory</span>&gt;</span>【module_path】\target\test-classes<span class="tag">&lt;/<span class="name">testOutputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>【module_path】\src\main\resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>【module_path】\src\test\resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>【module_path】\target<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>demo-module-1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>标签</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>sourceDirectory</td>
<td>主体源程序存放目录</td>
</tr>
<tr>
<td>scriptSourceDirectory</td>
<td>脚本源程序存放目录</td>
</tr>
<tr>
<td>testSourceDirectory</td>
<td>测试源程序存放目录</td>
</tr>
<tr>
<td>outputDirectory</td>
<td>主体源程序编译结果输出目录</td>
</tr>
<tr>
<td>testOutputDirectory</td>
<td>测试源程序编译结果输出目录</td>
</tr>
<tr>
<td>resources</td>
<td>主体资源文件存放目录</td>
</tr>
<tr>
<td>testResources</td>
<td>测试资源文件存放目录件，默认位于${basedir}/src/test/resources/目录下</td>
</tr>
<tr>
<td>directory</td>
<td>构建结果输出目录，默认为${basedir}/target目录</td>
</tr>
<tr>
<td>finalName</td>
<td>构建的最终结果的名字，该名字可能在其他plugin中被改变</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>resource标签</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>resources</td>
<td>build过程中涉及的资源文件</td>
</tr>
<tr>
<td>targetPath</td>
<td>资源文件的目标路径</td>
</tr>
<tr>
<td>filtering</td>
<td>构建过程中是否对资源进行过滤，默认false</td>
</tr>
<tr>
<td>directory</td>
<td>资源文件的路径，默认位于${basedir}/src/main/resources/目录下</td>
</tr>
<tr>
<td>includes</td>
<td>一组文件名的匹配模式，被匹配的资源文件将被构建过程处理</td>
</tr>
<tr>
<td>excludes</td>
<td>一组文件名的匹配模式，被匹配的资源文件将被构建过程忽略。同时被includes和excludes匹配的资源文件，将被忽略</td>
</tr>
<tr>
<td>filters</td>
<td>给出对资源文件进行过滤的属性文件的路径，默认位于${basedir}/src/main/filters/目录下。属性文件中定义若干键值对。在构建过程中，对于资源文件中出现的变量（键），将使用属性文件中该键对应的值替换</td>
</tr>
</tbody>
</table>
<h3><span id="自定义配置资源文件">自定义配置资源文件</span></h3>
<p>将java源代码路径下的资源文件也打包输出到指定路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当是web项目时，编译结果会在target下生成目录，【project_name】是项目名</p>
<ol>
<li><code>src/main/webapps</code> 下的文件输出到 <code>target/【project_name】</code></li>
<li><code>target/classes </code>下的文件输出到 <code>target/【project_name】/WEB-INF/classes</code></li>
<li>项目所有依赖输出到 <code>target/【project_name】/WEB-INF/lib </code></li>
</ol>
<h3><span id="备用插件管理">备用插件管理</span></h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2-beta-5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-release-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>pluginManagement</strong></p>
<ol>
<li>在<code>&lt;build&gt;</code>中，<code>&lt;pluginManagement&gt;</code>与<code>&lt;plugins&gt;</code>并列 ,两者之间的关系类似于<code>&lt;dependencyManagement&gt;</code>与<code>&lt;dependencies&gt;</code>之间的关系</li>
<li><code>&lt;pluginManagement&gt;</code>中也配置<code>&lt;plugin&gt;</code>，其配置参数与<code>&lt;plugins&gt;</code>中的<code>&lt;plugin&gt;</code>完全一致</li>
<li><code>&lt;pluginManagement&gt;</code>往往出现在父项目中，其中配置的<code>&lt;plugin&gt;</code>往往通用于子项目。子项目中只要在<code>&lt;plugins&gt;</code>中以<code>&lt;plugin&gt;</code>声明该插件，该插件的具体配置参数则继承自父项目中<code>&lt;pluginManagement&gt;</code>对该插件的配置，从而避免在子项目中进行重复配置</li>
</ol>
<h3><span id="生命周期插件">生命周期插件</span></h3>
<ol>
<li>在生命周期中，各个阶段的工作由插件来完成(plugin)</li>
<li>一个插件通常可以完成一个或者多个阶段的工作。每个阶段的工作对应插件中的一个目标(goal)</li>
<li>不同的插件结合起来，就完成了项目的构建</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-clean<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>clean<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>clean<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-testResources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-test-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testResources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-resources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-jar<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-testCompile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>test<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-install<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>install<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>install<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-deploy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>deploy<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>deploy<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-site<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>site<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>site<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>D:\1MyProject\gitee-test\target\site<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">reportPlugins</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">reportPlugin</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">reportPlugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">reportPlugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-deploy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>site-deploy<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>deploy<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>D:\1MyProject\gitee-test\target\site<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">reportPlugins</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">reportPlugin</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">reportPlugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">reportPlugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>D:\1MyProject\gitee-test\target\site<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">reportPlugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">reportPlugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">reportPlugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">reportPlugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>阶段</th>
<th>插件</th>
</tr>
</thead>
<tbody>
<tr>
<td>clean</td>
<td>maven-clean-plugin:2.5</td>
</tr>
<tr>
<td>resources、testResources</td>
<td>maven-resources-plugin:2.6</td>
</tr>
<tr>
<td>compile、testCompile</td>
<td>maven-compiler-plugin:3.1</td>
</tr>
<tr>
<td>test</td>
<td>maven-surefire-plugin:2.12.4</td>
</tr>
<tr>
<td>package</td>
<td>maven-jar-plugin:2.4</td>
</tr>
<tr>
<td>install</td>
<td>maven-install-plugin:2.4</td>
</tr>
<tr>
<td>site、deploy</td>
<td>maven-site-plugin:3.3</td>
</tr>
<tr>
<td>deploy</td>
<td>maven-deploy-plugin:2.7</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>plugin标签</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>extensions</td>
<td>是否加载该插件的扩展，默认false</td>
</tr>
<tr>
<td>configuration</td>
<td>该插件所需要的特殊配置，在父子项目之间可以覆盖或合并</td>
</tr>
<tr>
<td>inherited</td>
<td>该插件的configuration中的配置是否可以被（继承该POM的其他Maven项目）继承，默认true</td>
</tr>
<tr>
<td>dependencies</td>
<td>该插件所特有的依赖类库</td>
</tr>
<tr>
<td>executions</td>
<td>该插件的某个goal（一个插件中可能包含多个goal）的执行方式</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>execution标签</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>唯一标识</td>
</tr>
<tr>
<td>goals</td>
<td>要执行的插件的goal（可以有多个），如<code>&lt;goal&gt;run&lt;/goal&gt;</code></td>
</tr>
<tr>
<td>phase</td>
<td>插件的goal要嵌入到Maven的生命周期阶段（phase）中执行，如verify</td>
</tr>
<tr>
<td>inherited</td>
<td>该execution是否可被子项目继承</td>
</tr>
<tr>
<td>configuration</td>
<td>该execution的其他配置参数</td>
</tr>
</tbody>
</table>
<p><strong>绑定插件目标(goal)</strong></p>
<p>在构建阶段上可以绑定插件目标。若阶段上未绑定任何插件目标，则该阶段将不会产生任何影响。若阶段绑定了一个或多个插件目标，则所有绑定的插件目标都将被执行</p>
<p>为构建阶段绑定插件目标(goal)：若某个阶段绑定了多个插件目标，先执行packaging中绑定的goal，后按序执行POM中绑定的goal</p>
<p><strong>在POM中设置packaging标签</strong></p>
<p>其值可以被设为jar，war，ear，pom。这些packaging值将会为每个build lifecycle中对应的build phase绑定对应的plugin goal（未指定packaging标签时，其将被默认设置为jar）</p>
<p><strong>在POM中设置plugin标签</strong></p>
<p>为某个<code>&lt;phase&gt;</code>绑定上该plugin下的某个或某些<code>&lt;goal&gt;</code></p>
<h3><span id="自定义配置插件">自定义配置插件</span></h3>
<h4><span id="指定-jdk-版本">指定 JDK 版本</span></h4>
<p>在 settings.xml 中已经配置了 JDK 版本，若将 Maven 工程部署都服务器上，脱离了 settings.xml 配置覆盖范围，无法生效</p>
<p>当前Maven工程 pom.xml 中的 maven-compiler-plugin 插件配置JDK 版本，无论在哪个环境执行编译等构建操作都有效。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插件的坐标。此处引用的 maven-compiler-plugin 插件不是第三方的，是一个 Maven 自带的插件。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- configuration 标签：配置 maven-compiler-plugin 插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 具体配置信息会因为插件不同、需求不同而有所差异 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="springboot-定制化打包">SpringBoot 定制化打包</span></h4>
<p>默认情况下 Maven 使用 maven-jar-plugin 插件的 jar 目标，打包成普通的 jar 包（无法通过 java -jar xxx.jar 直接运行），而SpringBoot项目需要为每个『微服务』导出为一个可以直接启动运行的jar 包（ java -jar xxx.jar ），因此需要使用spring-boot-maven-plugin</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过如下POM配置，来使得所有其它配置文件的值都在POM中统一管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中directory标签中为其它配置文件所在的目录路径。添加该配置后，在该目录下的所有配置文件中，我们都可以使用${…}来引用POM中的property，从而使得这些配置的具体值都可以统一在POM文件中进行管理</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>resources</td>
<td>build过程中涉及的资源文件</td>
</tr>
<tr>
<td>targetPath</td>
<td>资源文件的目标路径</td>
</tr>
<tr>
<td>filtering</td>
<td>构建过程中是否对资源进行过滤，默认false</td>
</tr>
<tr>
<td>directory</td>
<td>资源文件的路径，默认位于${basedir}/src/main/resources/目录下</td>
</tr>
<tr>
<td>includes</td>
<td>一组文件名的匹配模式，被匹配的资源文件将被构建过程处理</td>
</tr>
<tr>
<td>excludes</td>
<td>一组文件名的匹配模式，被匹配的资源文件将被构建过程忽略。同时被includes和excludes匹配的资源文件，将被忽略</td>
</tr>
<tr>
<td>filters</td>
<td>给出对资源文件进行过滤的属性文件的路径，默认位于${basedir}/src/main/filters/目录下。属性文件中定义若干键值对。在构建过程中，对于资源文件中出现的变量（键），将使用属性文件中该键对应的值替换</td>
</tr>
<tr>
<td>testResources</td>
<td>test过程中涉及的资源文件，默认位于${basedir}/src/test/resources/目录下。这里的资源文件不会被构建到目标构件中</td>
</tr>
</tbody>
</table>
<h2><span id="build-profiles">Build Profiles</span></h2>
<p>通过如下POM配置来为当前项目配置build profile</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>由于 profile 天然代表众多可选配置中的一个所以由复数形式的 profiles 标签统一管理。<br>
由于 profile 标签覆盖了 pom.xml 中的默认配置，所以 profiles 标签通常是 pom.xml 中的最后一个标签</p>
<p>一个 profile 可以覆盖项目的最终名称、项目依赖、插件配置等各个方面以影响构建行为</p>
<h3><span id="profile触发">Profile触发</span></h3>
<p><strong>默认配置触发</strong></p>
<p>POM文件中没有被<code>&lt;profile&gt;</code>标签嵌套的内容作为默认的Profile触发</p>
<p><strong>基于环境配置触发</strong></p>
<p>不同的build profile可以在不同的情况下被触发，使得其中配置的内容可以对POM文件中的内容进行补充或覆盖。这使得POM文件拥有可以根据不同情况产生不同配置的能力</p>
<p>设置build profile的触发方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当jdk版本为...时，将触发profile-1；--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>profile-1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当操作系统为...时，将触发profile2；--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>profile-2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">os</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当构建命令中带了environment=test参数时，将触发profile-3--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--（mvn &lt;build phase&gt; -Denvironment=test）；--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当构建命令中带了-P profile-x时，将触发profile-x--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--（mvn &lt;build phase&gt; -P profile-x）；--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>profile-3<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>environment<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>test<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>profile-4<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exists</span>&gt;</span>file2.properties<span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">missing</span>&gt;</span>file1.properties<span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当未触发任何一个build profile时，将默认触发profile-5。--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--多个build profile可被同时触发。对于发生冲突的配置，先触发的build profile中的内容会被后触发的build profile中的内容覆盖。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>profile-5<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>若一个profile存在多个触发条件：</strong></p>
<ol>
<li>Maven 3.2.2 之前：满足第一个条件即可触发</li>
<li>Maven 3.2.2 开始：需满足所有条件才能触发</li>
</ol>
<h3><span id="运行环境">运行环境</span></h3>
<ul>
<li>开发环境：供不同开发工程师开发的各个模块之间互相调用、访问；内部使用</li>
<li>测试环境：供测试工程师对项目的各个模块进行功能测试；内部使用</li>
<li>生产环境：供最终用户访问——所以这是正式的运行环境，对外提供服务</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/64a76b2f1ddac507cca1df6d.jpg" alt></p>
<h3><span id="spring-boot-多环境">Spring Boot 多环境</span></h3>
<p>在不同的环境中的配置可能不同，如数据源、日志文件</p>
<p>为了避免部署不同环境下反复修改环境配置文件，可定义多个 profile对应不同的环境，从而达到不同环境使用不同配置信息的效果</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- profile对资源的操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 先排除所有环境相关的配置文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application*.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否替换 @xx@ 表示的maven properties属性值 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--通过开启 filtering，maven 会将文件中的 @xx@ 替换 profile 中定义的 xx 变量/属性--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>application.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>application-$&#123;profileActive&#125;.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多环境文件配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--默认激活--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>test<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--正式环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在application.yml 中配置spring.profiles.active= ‘@profileActive@’（或者dev、prod、test）指定使用的配置文件</li>
<li>在 idea 右侧Maven栏中的Profiles中可以看到配置的多环境，可勾选指定环境打包</li>
<li>SpringBoot 本身支持多环境配置，application-dev.yml、application-test.yml、application.prod.yml分别存放三个环境的配置</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/649f9d401ddac507cc1c4579.jpg" alt></p>
<h2><span id="maven在idea中的应用">Maven在IDEA中的应用</span></h2>
<h3><span id="idea配置maven">IDEA配置Maven</span></h3>
<p>File —&gt; Settings —&gt; Build, Execution, Deployment —&gt; Build Tools —&gt; Maven</p>
<ol>
<li>设置maven安装主目录</li>
<li>maven的settings.xml文件和本地仓库所在位置</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/64a67b131ddac507ccdd0129.jpg" alt></p>
<h3><span id="idea创建maven版java工程">IDEA创建Maven版java工程</span></h3>
<p>File–&gt;New–&gt;Module</p>
<img src="https://pic.imgdb.cn/item/64a67b6d1ddac507ccddbfd7.jpg" style="zoom:67%;">
<h3><span id="idea创建maven版web工程">IDEA创建Maven版web工程</span></h3>
<p>File–&gt;New–&gt;Module</p>
<img src="https://pic.imgdb.cn/item/64a67c441ddac507cce08cf8.jpg" style="zoom:67%;">
<p>创建后的视图：</p>
<img src="https://pic.imgdb.cn/item/64a67f1d1ddac507cce72c7c.jpg" style="zoom:67%;">
<p>显然，按照maven archetype原型创建的maven web工程缺少maven项目的完整结构：src-main-<a href="http://lib.csdn.net/base/javase">java</a> / resources，src-test-java/resources，所以需要我们手动添加文件目录</p>
<img src="https://pic.imgdb.cn/item/64a67faa1ddac507cce83aec.jpg" style="zoom:67%;">
<p>File —&gt; Project  Structure —&gt; Modules</p>
<p>给文件夹选择Mask as</p>
<img src="https://pic.imgdb.cn/item/64a67ff01ddac507cce8c0a5.jpg" style="zoom:67%;">
<h3><span id="idea中导入maven工程module">IDEA中导入Maven工程(module)</span></h3>
<p>File —&gt; Project  Structure</p>
<img src="https://pic.imgdb.cn/item/64a680961ddac507ccea59bb.jpg" style="zoom:67%;">
<img src="https://pic.imgdb.cn/item/64a680cb1ddac507cceb1fe5.jpg" style="zoom:67%;">
<h3><span id="idea中导入maven项目project">IDEA中导入Maven项目(Project)</span></h3>
<p>File–&gt;New–&gt;Project from Existing Sources</p>
]]></content>
      <categories>
        <category>第三阶段</category>
      </categories>
  </entry>
  <entry>
    <title>mybatisPlus</title>
    <url>/post/mybatis%20plus/</url>
    <content><![CDATA[<p><a href="https://baomidou.com/">mybatis plus官方文档</a></p>
<h2><span id="springboot-引入">Springboot 引入</span></h2>
<h3><span id="导入依赖">导入依赖</span></h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>最新版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="配置">配置</span></h3>
<p>在 <code>application.yml</code> 配置文件中添加数据库的相关配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment"># Mybatis配置信息(MybatisPlus是对Mybatis的增强)</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># Sql日志的输出到控制台</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="comment"># 加载xml映射配置文件的位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br></pre></td></tr></table></figure>
<p>在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.bjpowernode.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="实体类">实体类</span></h3>
<table>
<thead>
<tr>
<th>MybatisPlus注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@TableName</td>
<td>映射的数据库表</td>
</tr>
<tr>
<td>@TableId</td>
<td>映射表中主键字段</td>
</tr>
<tr>
<td>@TableField</td>
<td>映射表中非主键字段</td>
</tr>
</tbody>
</table>
<h3><span id="mapper接口">Mapper接口</span></h3>
<ol>
<li>继承<code>BaseMapper&lt;实体类&gt;</code></li>
<li>仅增删改查，根据ids批量删除、根据ids批量查询</li>
</ol>
<h3><span id="service接口">Service接口</span></h3>
<ol>
<li>Service接口继承<code>IService&lt;实体类&gt;</code>(MybatisPlus)接口</li>
<li>Service实现类继承<code>Service接口</code>及<code>ServiceImpl&lt;Mapper,实体类&gt;</code></li>
<li>可以批量新增或修改操作，根据ids批量删除，根据ids批量查询</li>
</ol>
<p>通用Service和通用Mapper的继承关系主要是为了使用api增删改查数据库操作**(**单表)，多表操作必须通过sql实现</p>
<h2><span id="crud">CRUD</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过通用service查询用户列表数据</span></span><br><span class="line">userService.list().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过通用mapper查询用户列表数据</span></span><br><span class="line">userMapper.selectList(<span class="literal">null</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">//批量新增</span></span><br><span class="line">userService.saveBatch(</span><br><span class="line">    Arrays.asList(</span><br><span class="line">        User.builder()</span><br><span class="line">        .loginAct(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">        .loginPwd(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">        .name(<span class="string">&quot;张三&quot;</span>+<span class="number">1</span>)</span><br><span class="line">        .build(),</span><br><span class="line">        User.builder()</span><br><span class="line">        .loginAct(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">        .loginPwd(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">        .name(<span class="string">&quot;张三&quot;</span>+<span class="number">2</span>)</span><br><span class="line">        .build(),</span><br><span class="line">        User.builder()</span><br><span class="line">        .loginAct(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">        .loginPwd(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">        .name(<span class="string">&quot;张三&quot;</span>+<span class="number">3</span>)</span><br><span class="line">        .build(),</span><br><span class="line">        User.builder()</span><br><span class="line">        .loginAct(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">        .loginPwd(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">        .name(<span class="string">&quot;张三&quot;</span>+<span class="number">4</span>)</span><br><span class="line">        .build(),</span><br><span class="line">        User.builder()</span><br><span class="line">        .loginAct(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">        .loginPwd(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">        .name(<span class="string">&quot;张三&quot;</span>+<span class="number">5</span>)</span><br><span class="line">        .build()</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据id查询出用户信息</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(<span class="string">&quot;1682305372411715585&quot;</span>);</span><br><span class="line"><span class="comment">//修改用户操作</span></span><br><span class="line">user.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">userService.updateById(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有逻辑删除，执行的是delete操作，有逻辑删除执行的update操作</span></span><br><span class="line">userService.removeById(<span class="string">&quot;1682316120911327236&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2><span id="条件构造器">条件构造器</span></h2>
<table>
<thead>
<tr>
<th>条件构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>QueryWrapper</td>
<td>条件只能根据字符串来封装</td>
</tr>
<tr>
<td>LambdaQueryWrapper</td>
<td>根据上下文推断（将被编译检查）</td>
</tr>
<tr>
<td>UpdateWrapper</td>
<td></td>
</tr>
<tr>
<td>LambdaUpdateWrapper</td>
<td></td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="string">&quot;1682305372646596611&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印所有userId非空且id为userId的用户</span></span><br><span class="line">userService.list(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().eq(StringUtils.isNotBlank(userId),<span class="string">&quot;id&quot;</span>,userId)).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">userService.list(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;().eq(StringUtils.isNotBlank(userId),User::getId,userId)).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据更新条件来修改数据</span></span><br><span class="line"><span class="comment">//        userService.update(</span></span><br><span class="line"><span class="comment">//                //更新的用户信息</span></span><br><span class="line"><span class="comment">//                User.builder()</span></span><br><span class="line"><span class="comment">//                        .loginAct(&quot;李四&quot;)</span></span><br><span class="line"><span class="comment">//                        .loginPwd(&quot;321&quot;)</span></span><br><span class="line"><span class="comment">//                        .name(&quot;李四&quot;)</span></span><br><span class="line"><span class="comment">//                        .build(),</span></span><br><span class="line"><span class="comment">//                //更新的条件</span></span><br><span class="line"><span class="comment">//                new LambdaUpdateWrapper&lt;User&gt;()</span></span><br><span class="line"><span class="comment">//                .like(</span></span><br><span class="line"><span class="comment">//                        User::getName,</span></span><br><span class="line"><span class="comment">//                        &quot;张三&quot;</span></span><br><span class="line"><span class="comment">//                )</span></span><br><span class="line"><span class="comment">//        );</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先根据条件，将要更新的数据查询出来</span></span><br><span class="line">List&lt;User&gt; userList = userService.list(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;().like(User::getName, <span class="string">&quot;李四&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//将李四更新为张三</span></span><br><span class="line">userList.forEach(user -&gt; user.setLoginAct(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//批量更新</span></span><br><span class="line">userService.updateBatchById(userList);</span><br></pre></td></tr></table></figure>
<h2><span id="分页与乐观锁">分页与乐观锁</span></h2>
<h3><span id="配置文件">配置文件</span></h3>
<p>在配置文件中配置分页拦截器与乐观锁拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">interceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="comment">//乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="分页查询">分页查询</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">        Page&lt;User&gt; page = userService.page(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Page</span>&lt;User&gt;(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//获取分页结果集</span></span><br><span class="line">        System.out.println(page);</span><br><span class="line">        <span class="comment">//获取当前页数</span></span><br><span class="line">        System.out.println(page.getCurrent());</span><br><span class="line">        <span class="comment">//获取每页数据量</span></span><br><span class="line">        System.out.println(page.getSize());</span><br><span class="line">        <span class="comment">//获取总页数</span></span><br><span class="line">        System.out.println(page.getPages());</span><br><span class="line">        <span class="comment">//获取总数据量</span></span><br><span class="line">        System.out.println(page.getTotal());</span><br><span class="line">        <span class="comment">//获取分页结果</span></span><br><span class="line">        System.out.println(page.getRecords());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意： 分页查询从1开始代表第一页（即使0也代表第一页）</p>
<h3><span id="乐观锁">乐观锁</span></h3>
<p>在批量更新时，防止数据超出更新的限制</p>
<h3><span id="实体类添加注解">实体类添加注解</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="meta">@TableField(value = &quot;version&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>
<p>使用MybatisPlus的updateById方法时，先对乐观锁进行更新（version+1），再查出符合乐观锁赋值后的数据并修改</p>
<h2><span id="逻辑删除">逻辑删除</span></h2>
<ol>
<li>在查询时自动拼接未删除的查询条件，查出未删除的数据</li>
<li>删除数据实际上执行修改操作，只是无法通过MybatisPlus查出，但仍存在在数据库中（可找回）</li>
</ol>
<h3><span id="配置">配置</span></h3>
<p>在 <code>application.yml</code> 配置文件中添加逻辑删除的相关配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># 配置逻辑删除操作</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 逻辑删除的字段是什么</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">is_delete</span></span><br><span class="line">      <span class="comment"># 删除的值为1</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 未删除的值为0</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3><span id="实体类添加注解">实体类添加注解</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="meta">@TableField(value = &quot;is_delete&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String isDelete;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>nacos</title>
    <url>/post/nacos/</url>
    <content><![CDATA[<p><a href="https://nacos.io/zh-cn/docs/quick-start.html">nacos官方文档</a></p>
<h1><span id="cap原则">CAP原则</span></h1>
<p>CAP 原则又称 CAP 定理，指的是在一个分布式系统中，</p>
<p>一致性（Consistency）</p>
<p>可用性（Availability）</p>
<p>分区容错性（Partition tolerance）（这个特性是不可避免的），这三个要素最多只能同时实现两点，不可能三者兼顾</p>
<table>
<thead>
<tr>
<th>要素</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>一致性（C）</td>
<td>在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）</td>
</tr>
<tr>
<td>可用性（A）</td>
<td>在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）</td>
</tr>
<tr>
<td>分区容错性（P）</td>
<td>以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。</td>
</tr>
</tbody>
</table>
<p>在分布式系统中网络会存在脑裂的问题，部分Server与整个集群失去节点联系，无法组成一个群体。只有在AP和CP选择一个平衡点</p>
<p><strong>分布式特征</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Nacos</th>
<th>Zookeeper</th>
<th>Eureka</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据一致性</td>
<td></td>
<td>注重数据的一致性</td>
<td>不是很注重数据的一致性！</td>
</tr>
<tr>
<td>服务可用性Paxos（多数派）</td>
<td></td>
<td>若集群中的master挂了，则 zk 集群整体不对外提供服务了，需要选一个新的出来（120s</td>
<td>注重服务的可用性，当 Eureka 集群只有一台活着，它就能对外提供服务</td>
</tr>
<tr>
<td>分区容错性</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Zookeeper注重数据的一致性，Eureka注重服务的可用性</p>
<h1><span id="版本依赖关系">版本依赖关系</span></h1>
<p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E#%E7%BB%84%E4%BB%B6%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB">版本说明 · alibaba/spring-cloud-alibaba Wiki · GitHub</a></p>
<h2><span id="毕业版本依赖关系推荐使用">毕业版本依赖关系(推荐使用)</span></h2>
<p>由于 Spring Boot 3.0，Spring Boot 2.7~2.4 和 2.4 以下版本之间变化较大，目前企业级客户老项目相关 Spring Boot 版本仍停留在 Spring Boot 2.4 以下，为了同时满足存量用户和新用户不同需求，社区以 Spring Boot 3.0 和 2.4 分别为分界线，同时维护 2022.x、2021.x、2.2.x 三个分支迭代。如果不想跨分支升级，如需使用新特性，请升级为对应分支的新版本。 为了规避相关构建过程中的依赖冲突问题，我们建议可以通过 <a href="https://start.aliyun.com/">云原生应用脚手架</a> 进行项目创建。</p>
<h3><span id="2022x-分支">2022.x 分支</span></h3>
<p>适配 Spring Boot 3.0，Spring Cloud 2022.x 版本及以上的 Spring Cloud Alibaba 版本按从新到旧排列如下表（最新版本用标记）： (注意，该分支 Spring Cloud Alibaba 版本命名方式进行了调整，未来将对应 Spring Cloud 版本，前三位为 Spring Cloud 版本，最后一位为扩展版本，比如适配 Spring Cloud 2022.0.0 版本对应的 Spring Cloud Alibaba 第一个版本为：2022.0.0.0，第个二版本为：2022.0.0.1，依此类推)</p>
<table>
<thead>
<tr>
<th>Spring Cloud Alibaba Version</th>
<th>Spring Cloud Version</th>
<th>Spring Boot Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>2022.0.0.0-RC2*</td>
<td>Spring Cloud 2022.0.0</td>
<td>3.0.2</td>
</tr>
<tr>
<td>2022.0.0.0-RC1</td>
<td>Spring Cloud 2022.0.0</td>
<td>3.0.0</td>
</tr>
</tbody>
</table>
<h3><span id="2021x-分支">2021.x 分支</span></h3>
<p>适配 Spring Boot 2.4，Spring Cloud 2021.x 版本及以上的 Spring Cloud Alibaba 版本按从新到旧排列如下表（最新版本用*标记）：</p>
<table>
<thead>
<tr>
<th>Spring Cloud Alibaba Version</th>
<th>Spring Cloud Version</th>
<th>Spring Boot Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>2021.0.5.0*</td>
<td>Spring Cloud 2021.0.5</td>
<td>2.6.13</td>
</tr>
<tr>
<td>2021.0.4.0</td>
<td>Spring Cloud 2021.0.4</td>
<td>2.6.11</td>
</tr>
<tr>
<td>2021.0.1.0</td>
<td>Spring Cloud 2021.0.1</td>
<td>2.6.3</td>
</tr>
<tr>
<td>2021.1</td>
<td>Spring Cloud 2020.0.1</td>
<td>2.4.2</td>
</tr>
</tbody>
</table>
<h3><span id="22x-分支">2.2.x 分支</span></h3>
<p>适配 Spring Boot 为 2.4，Spring Cloud Hoxton 版本及以下的 Spring Cloud Alibaba 版本按从新到旧排列如下表（最新版本用*标记）：</p>
<table>
<thead>
<tr>
<th>Spring Cloud Alibaba Version</th>
<th>Spring Cloud Version</th>
<th>Spring Boot Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>2.2.10-RC1*</td>
<td>Spring Cloud Hoxton.SR12</td>
<td>2.3.12.RELEASE</td>
</tr>
<tr>
<td>2.2.9.RELEASE</td>
<td>Spring Cloud Hoxton.SR12</td>
<td>2.3.12.RELEASE</td>
</tr>
<tr>
<td>2.2.8.RELEASE</td>
<td>Spring Cloud Hoxton.SR12</td>
<td>2.3.12.RELEASE</td>
</tr>
<tr>
<td>2.2.7.RELEASE</td>
<td>Spring Cloud Hoxton.SR12</td>
<td>2.3.12.RELEASE</td>
</tr>
<tr>
<td>2.2.6.RELEASE</td>
<td>Spring Cloud Hoxton.SR9</td>
<td>2.3.2.RELEASE</td>
</tr>
<tr>
<td>2.2.1.RELEASE</td>
<td>Spring Cloud Hoxton.SR3</td>
<td>2.2.5.RELEASE</td>
</tr>
<tr>
<td>2.2.0.RELEASE</td>
<td>Spring Cloud Hoxton.RELEASE</td>
<td>2.2.X.RELEASE</td>
</tr>
<tr>
<td>2.1.4.RELEASE</td>
<td>Spring Cloud Greenwich.SR6</td>
<td>2.1.13.RELEASE</td>
</tr>
<tr>
<td>2.1.2.RELEASE</td>
<td>Spring Cloud Greenwich</td>
<td>2.1.X.RELEASE</td>
</tr>
<tr>
<td>2.0.4.RELEASE(停止维护，建议升级)</td>
<td>Spring Cloud Finchley</td>
<td>2.0.X.RELEASE</td>
</tr>
<tr>
<td>1.5.1.RELEASE(停止维护，建议升级)</td>
<td>Spring Cloud Edgware</td>
<td>1.5.X.RELEASE</td>
</tr>
</tbody>
</table>
<h2><span id="组件版本关系">组件版本关系</span></h2>
<p>每个 Spring Cloud Alibaba 版本及其自身所适配的各组件对应版本如下表所示（注意，Spring Cloud Dubbo 从 2021.0.1.0 起已被移除出主干，不再随主干演进）：</p>
<table>
<thead>
<tr>
<th>Spring Cloud Alibaba Version</th>
<th>Sentinel Version</th>
<th>Nacos Version</th>
<th>RocketMQ Version</th>
<th>Dubbo Version</th>
<th>Seata Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>2022.0.0.0-RC2</td>
<td>1.8.6</td>
<td>2.2.1</td>
<td>4.9.4</td>
<td>~</td>
<td>1.7.0-native-rc2</td>
</tr>
<tr>
<td>2021.0.5.0</td>
<td>1.8.6</td>
<td>2.2.0</td>
<td>4.9.4</td>
<td>~</td>
<td>1.6.1</td>
</tr>
<tr>
<td>2.2.10-RC1</td>
<td>1.8.6</td>
<td>2.2.0</td>
<td>4.9.4</td>
<td>~</td>
<td>1.6.1</td>
</tr>
<tr>
<td>2022.0.0.0-RC1</td>
<td>1.8.6</td>
<td>2.2.1-RC</td>
<td>4.9.4</td>
<td>~</td>
<td>1.6.1</td>
</tr>
<tr>
<td>2.2.9.RELEASE</td>
<td>1.8.5</td>
<td>2.1.0</td>
<td>4.9.4</td>
<td>~</td>
<td>1.5.2</td>
</tr>
<tr>
<td>2021.0.4.0</td>
<td>1.8.5</td>
<td>2.0.4</td>
<td>4.9.4</td>
<td>~</td>
<td>1.5.2</td>
</tr>
<tr>
<td>2.2.8.RELEASE</td>
<td>1.8.4</td>
<td>2.1.0</td>
<td>4.9.3</td>
<td>~</td>
<td>1.5.1</td>
</tr>
<tr>
<td>2021.0.1.0</td>
<td>1.8.3</td>
<td>1.4.2</td>
<td>4.9.2</td>
<td>~</td>
<td>1.4.2</td>
</tr>
<tr>
<td>2.2.7.RELEASE</td>
<td>1.8.1</td>
<td>2.0.3</td>
<td>4.6.1</td>
<td>2.7.13</td>
<td>1.3.0</td>
</tr>
<tr>
<td>2.2.6.RELEASE</td>
<td>1.8.1</td>
<td>1.4.2</td>
<td>4.4.0</td>
<td>2.7.8</td>
<td>1.3.0</td>
</tr>
<tr>
<td>2021.1 or 2.2.5.RELEASE or 2.1.4.RELEASE or 2.0.4.RELEASE</td>
<td>1.8.0</td>
<td>1.4.1</td>
<td>4.4.0</td>
<td>2.7.8</td>
<td>1.3.0</td>
</tr>
<tr>
<td>2.2.3.RELEASE or 2.1.3.RELEASE or 2.0.3.RELEASE</td>
<td>1.8.0</td>
<td>1.3.3</td>
<td>4.4.0</td>
<td>2.7.8</td>
<td>1.3.0</td>
</tr>
<tr>
<td>2.2.1.RELEASE or 2.1.2.RELEASE or 2.0.2.RELEASE</td>
<td>1.7.1</td>
<td>1.2.1</td>
<td>4.4.0</td>
<td>2.7.6</td>
<td>1.2.0</td>
</tr>
<tr>
<td>2.2.0.RELEASE</td>
<td>1.7.1</td>
<td>1.1.4</td>
<td>4.4.0</td>
<td>2.7.4.1</td>
<td>1.0.0</td>
</tr>
<tr>
<td>2.1.1.RELEASE or 2.0.1.RELEASE or 1.5.1.RELEASE</td>
<td>1.7.0</td>
<td>1.1.4</td>
<td>4.4.0</td>
<td>2.7.3</td>
<td>0.9.0</td>
</tr>
<tr>
<td>2.1.0.RELEASE or 2.0.0.RELEASE or 1.5.0.RELEASE</td>
<td>1.6.3</td>
<td>1.1.1</td>
<td>4.4.0</td>
<td>2.7.3</td>
<td>0.7.1</td>
</tr>
</tbody>
</table>
<h1><span id="微服务注册">微服务注册</span></h1>
<h2><span id="导入依赖">导入依赖</span></h2>
<table>
<thead>
<tr>
<th>SpringBoot</th>
<th>SpringCloud</th>
<th>SpringCloudAlibaba</th>
<th>Nacos</th>
<th>Sentinel</th>
<th>Seata</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2.3.12.RELEASE</code></td>
<td><code>Hoxton.SR12</code></td>
<td><code>2.2.9.RELEASE</code></td>
<td><code>2.1.0</code></td>
<td><code>1.8.5</code></td>
<td><code>1.5.2</code></td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>User模块中添加如下配置</strong></p>
<p>nacos 注册中心、配置中心依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Spring Boot web启动、测试依赖</p>
<p>mybatisPlus依赖</p>
<p>mysql连接java依赖</p>
<h2><span id="填写配置">填写配置</span></h2>
<p>在application.yml中配置如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 微服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">crm-user</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="comment"># 命名空间，默认是public，不用写</span></span><br><span class="line"><span class="comment">#        namespace:</span></span><br><span class="line">        <span class="comment"># 注册的群组名称</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="comment"># Nacos用户名和密码</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br></pre></td></tr></table></figure>
<p><strong>数据源配置</strong></p>
<p><strong>MybatisPlus配置</strong></p>
<h2><span id="引导类添加注解">引导类添加注解</span></h2>
<p><code>@EnableDiscoveryClient</code>：将当前微服务注册到注册中心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将当前微服务注册到注册中心中</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="comment">//MybatisPlus的mapper包扫描</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.bjpowernode.mapper&quot;&#125;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(UserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="查看微服务">查看微服务</span></h2>
<p>进入本地nacos <code>http://localhost:8848/nacos</code>，输入用户名、密码</p>
<p>在服务管理下的服务列表中可以看到注册的微服务<img src="https://pic.imgdb.cn/item/64bf3ebc1ddac507cc641da5.jpg" alt></p>
<h1><span id="远程调用">远程调用</span></h1>
<h2><span id="resttemplate"><code>RestTemplate</code></span></h2>
<p>不同微服务之间可通过RestTemplate进行调用</p>
<h3><span id="注入spring容器">注入Spring容器</span></h3>
<p>在引导类中将RestTemplate交给Spring管理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.bjpowernode.mapper&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityApplication</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ActivityApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;activity&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="resttemplate的api">RestTemplate的API</span></h3>
<p><strong><code>T getForObject(url,T ResponseType,uriVariables)</code></strong></p>
<ol>
<li>url：请求地址</li>
<li>ResponseType：响应字节码类型</li>
<li>uriVariables：若地址栏占位符有参数，则代表地址栏占位符封装的Map集合</li>
<li>直接返回T类型的结果</li>
</ol>
<p><strong><code>ResponseEntity&lt;T&gt; getForEntity(url,T ResponseType,uriVariables)</code></strong></p>
<ol>
<li>url：请求地址</li>
<li>ResponseType：响应字节码类型</li>
<li>uriVariables：若地址栏占位符有参数，则代表地址栏占位符封装的Map集合</li>
<li>返回<code>ResponseEntity&lt;T&gt;</code>封装的结果</li>
</ol>
<p><strong><code>T postForObject(url,Object request, T ResponseType,uriVariables)</code></strong></p>
<ol>
<li>url：请求地址</li>
<li>request：请求体封装的参数</li>
<li>ResponseType：响应字节码类型</li>
<li>uriVariables：若地址栏占位符有参数，则代表地址栏占位符封装的Map集合</li>
<li>直接返回T类型的结果</li>
</ol>
<p><strong><code>ResponseEntity&lt;T&gt; postForEntity(url,Object request, T ResponseType,uriVariables)</code></strong></p>
<ol>
<li>url：请求地址</li>
<li>request：请求体封装的参数</li>
<li>ResponseType：响应字节码类型</li>
<li>uriVariables：若地址栏占位符有参数，则代表地址栏占位符封装的Map集合</li>
<li>返回<code>ResponseEntity&lt;T&gt;</code>封装的结果</li>
</ol>
<p><strong><code>void put(url,Object request, uriVariables)</code></strong></p>
<ol>
<li>url：请求地址</li>
<li>request：要修改的数据</li>
<li>uriVariables：若地址栏占位符有参数，则代表地址栏占位符封装的Map集合</li>
</ol>
<p><strong><code>void delete(url,uriVariables)</code></strong></p>
<ol>
<li>url：请求地址</li>
<li>uriVariables：若地址栏占位符有参数，则代表地址栏占位符封装的Map集合</li>
</ol>
<p><strong><code>exchange(url,HttpMethod,HttpEntity,ResponseType,uriVarialbes)</code></strong></p>
<ol>
<li>url：请求地址</li>
<li>HttpMethod：请求方式</li>
<li>HttpEntity：封装请求头（可用于权限校验，比如传递令牌，传递身份信息）或请求体（POST或PUT的请求体数据）</li>
<li>ResponseType：响应字节码类型</li>
<li>uriVariables：若地址栏占位符有参数，则代表地址栏占位符封装的Map集合</li>
<li>返回<code>ResponseEntity&lt;T&gt;</code>封装的结果</li>
</ol>
<p>当需要发送请求时传递请求头信息或远程调用PUT、DELETE并有Boolean作为返回值时可使用</p>
<h2><span id="openfeign"><code>OpenFeign</code></span></h2>
<p>直接根据微服务名称进行负载均衡请求调用，使用方式类似一个控制器</p>
<p>请求参数的接收上：<br>
get/delete请求方式接收参数：<br>
url/111 -&gt; @PathVariable<br>
url?id=111 -&gt; @RequestParam<br>
post/put请求方式接收参数：<br>
传递的都是json数据，封装到请求体中 -&gt; @RequestBody<br>
怎么进行接收的参数，我就怎么传递！！！<br>
实现：</p>
<h3><span id="导入依赖">导入依赖</span></h3>
<p>引入pom.xml起步依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Feign远程调用起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="添加注解">添加注解</span></h3>
<p>引导类上添加新的注解，开启Feign远程调用，@EnableFeignClients</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.bjpowernode.mapper&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="comment">//开启Feign远程调用</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityApplication</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ActivityApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="创建接口">创建接口</span></h3>
<p>创建一个接口，作为Feign的调用接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加注解<code>@FeignClient(&quot;crm-user&quot;)</code>，使SpringBoot能够扫描到Feign的接口，并创建它的代理对象，交给Spring容器进行管理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;crm-user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在接口中声明远程微服务的控制器方法（没有方法体），根据注解确定发送的请求方式与请求地址</p>
<p>注意在映射路径中添加控制器最上方的映射路径，如<code>/list =&gt; /user/list</code></p>
<p>可通过反射注入远程调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoWired</span></span><br><span class="line">UserService userService;</span><br></pre></td></tr></table></figure>
<p>注意：只要是在接口中声明的参数，在远程调用时必须填写（<code>required = false</code>不生效）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; <span class="title function_">list</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;,required = false)</span>String name)</span>；</span><br><span class="line"><span class="comment">//远程调用,name不能为空，</span></span><br><span class="line">userService.list(<span class="string">&quot;111&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1><span id="负载均衡">负载均衡</span></h1>
<p>请求均衡的分配到每个节点中</p>
<h2><span id="idea创建集群">IDEA创建集群</span></h2>
<p>本质上是服务名称一致，端口号名称不一致的微服务</p>
<p><img src="https://pic.imgdb.cn/item/64c0d7da1ddac507cceb3960.jpg" alt></p>
<p>选中要复制的微服务，点击复制</p>
<p><img src="https://pic.imgdb.cn/item/64c0d88c1ddac507cced1fac.jpg" alt></p>
<p>点击编辑选项<code>Modify options</code>，添加<code>VM Options</code>选项</p>
<p><img src="https://pic.imgdb.cn/item/64c0d8d01ddac507ccedca09.jpg" alt></p>
<p>在添加的选项中输入 <code>-Dserver.port=2001</code>为主机分配端口后，集群分配端口号同理</p>
<p><img src="https://pic.imgdb.cn/item/64c0d93b1ddac507ccee8560.jpg" alt></p>
<p><img src="https://pic.imgdb.cn/item/64c0d9fc1ddac507ccf00d86.jpg" alt></p>
<p>在Nacos页面中可以看到 crm-user 微服务下有两个实例</p>
<p><img src="https://pic.imgdb.cn/item/64c0da401ddac507ccf08540.jpg" alt></p>
<h2><span id="resttemplate"><code>RestTemplate</code></span></h2>
<p>Ribbon实现</p>
<h3><span id="添加注解">添加注解</span></h3>
<p>在注入RestTemplate方法上添加<code>@LoadBalanced</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.bjpowernode.mapper&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityApplication</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//负载均衡</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ActivityApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="远程调用">远程调用</span></h3>
<p>在远程调用的地址上将具体IP（localhost:2001）改为微服务的名称（crm-user）</p>
<p>此时对于拥有多个节点的微服务，无法再通过IP直接访问，只能通过微服务名称访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://crm-user/user/list  </span><br><span class="line">均衡分配到：</span><br><span class="line">=&gt;  http://localhost:2001/user/list</span><br><span class="line">=&gt;  http://localhost:2002/user/list</span><br></pre></td></tr></table></figure>
<p>可通过打印被调用节点的端口号进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer port;</span><br></pre></td></tr></table></figure>
<h2><span id="openfeign"><code>OpenFeign</code></span></h2>
<p>feign通过微服务名远程调用，自动负载均衡</p>
<h1><span id="配置中心">配置中心</span></h1>
<h2><span id="加载自定义配置">加载自定义配置</span></h2>
<h3><span id="新建配置">新建配置</span></h3>
<p>在<code>http://localhost:8848</code>中的配置管理下的配置列表页面点击＋号</p>
<p><img src="https://pic.imgdb.cn/item/64c1edd91ddac507cc905a85.jpg" alt></p>
<p>填写Data Id以及配置内容</p>
<p><img src="https://pic.imgdb.cn/item/64c1f0061ddac507cc93b67f.jpg" alt></p>
<h3><span id="spring-boot配置">Spring Boot配置</span></h3>
<p>在项目中新建文件 <code>bootstrap.yml</code></p>
<p><code>application.yml</code> 为用户级别配置文件，<code>bootstrap.yml</code> 为系统级别配置文件，作为配置中心加载的内容，优先级最高</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">32b466f9-2121-4b5a-908b-392ca6acb647</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="comment"># 加载配置文件的前缀名称</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">application</span></span><br><span class="line">        <span class="comment"># 加载配置文件的后缀名称（配置格式）</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment"># 加载配置文件的环境名称</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">crm</span></span><br></pre></td></tr></table></figure>
<h3><span id="控制器测试">控制器测试</span></h3>
<p>控制器添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;getInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/64c1f4091ddac507cc996b05.jpg" alt></p>
<h3><span id="配置热更新">配置热更新</span></h3>
<p>在控制器上添加<code>@RefreshScope</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置热更新</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;activity&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityController</span> &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="多配置文件拆分">多配置文件拆分</span></h2>
<p>对于配置文件中可能重用的公共部分，可以根据功能拆分成多个配置文件，例如一下可以拆分成</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 微服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">crm-user</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="comment"># 命名空间，默认是public，不用写</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">32b466f9-2121-4b5a-908b-392ca6acb647</span></span><br><span class="line">        <span class="comment"># 注册的群组名称</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="comment"># Nacos用户名和密码</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:1111/crm?characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment"># Mybatis配置信息(MybatisPlus是对Mybatis的增强)</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">/mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">is_delete</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>application-nacos.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="comment"># 命名空间，默认是public，不用写</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">32b466f9-2121-4b5a-908b-392ca6acb647</span></span><br><span class="line">        <span class="comment"># 注册的群组名称</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="comment"># Nacos用户名和密码</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br></pre></td></tr></table></figure>
<p>application-mybatis-plus.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mybatis配置信息(MybatisPlus是对Mybatis的增强)</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">/mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">is_delete</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>application-datasource.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:1111/crm?characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>
<h2><span id="多配置文件加载">多配置文件加载</span></h2>
<p>在<code>bootstrap.yml</code>文件的<code>Spring.profiles.active</code>进行加载</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">32b466f9-2121-4b5a-908b-392ca6acb647</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">application</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span></span><br><span class="line">      <span class="string">crm,mybatis-plus,nacos,datasource</span></span><br></pre></td></tr></table></figure>
<h2><span id="持久化保存配置文件">持久化保存配置文件</span></h2>
<p>nacos内置了数据库Derby</p>
<h3><span id="创建mysql数据库">创建MySQL数据库</span></h3>
<p>执行nacos安装目录下的 <code>/conf/nacos-mysql.sql</code> 文件</p>
<h3><span id="导出配置">导出配置</span></h3>
<p><img src="https://pic.imgdb.cn/item/64c214181ddac507ccdc0481.jpg" alt></p>
<h3><span id="修改配置文件">修改配置文件</span></h3>
<p>nacos安装目录下的 <code>/conf/application.properties</code> 文件，找到并修改如下配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#*************** Config Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If use MySQL as datasource:</span></span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:1111/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create --driver bridge --subnet 127.0.0.1/16 biyixia</span><br><span class="line"></span><br><span class="line">docker run -<span class="built_in">id</span> --name=nacos --hostname=nacos -p 8848:8848 -p 9848:9848  -e MODE=standalone -e SPRING_DATASOURCE_PLATFORM=mysql -e MYSQL_SERVICE_HOST=host.docker.internal -e MYSQL_SERVICE_PORT=1111 -e MYSQL_SERVICE_DB_NAME=nacos_config -e MYSQL_SERVICE_USER=root -e MYSQL_SERVICE_PASSWORD=123456 -e MYSQL_DATABASE_NUM=1 -e MYSQL_SERVICE_DB_PARAM=<span class="string">&quot;characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false&quot;</span> -e JVM_XMS=256m -e JVM_XMX=256m nacos/nacos-server:v2.1.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3><span id="重启nacos">重启nacos</span></h3>
<p>注意：此时保存配置数据源从nacos内置数据库修改成MySQL数据库，<strong>重启nacos前必须导出原有的配置</strong>，否则将会丢失数据</p>
<h3><span id="导入配置">导入配置</span></h3>
<p><img src="https://pic.imgdb.cn/item/64c216911ddac507cce25760.jpg" alt></p>
<p>此时配置文件也被同步到上述配置的<code>nacos_config</code>数据库中的<code>config_info</code>表</p>
<p><img src="https://pic.imgdb.cn/item/64c2171e1ddac507cce3c4bd.jpg" alt></p>
]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>redis</title>
    <url>/post/redis/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>rabbitMQ</title>
    <url>/post/rabbitMQ/</url>
    <content><![CDATA[<h1><span id="消息队列message-queue">消息队列(Message Queue)</span></h1>
<p>消息指的是两个应用间传递的数据（字符串、对象等）</p>
<p>消息队列是在消息的传输过程中保存消息的容器</p>
<p>在消息队列中，通常有生产者和消费者两个角色</p>
<table>
<thead>
<tr>
<th>角色</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>生产者</td>
<td>只负责发送数据到消息队列，无需关心谁从消息队列中取出数据处理</td>
</tr>
<tr>
<td>消费者</td>
<td>只负责从消息队列中取出数据处理，无需关心是谁发送的数据</td>
</tr>
</tbody>
</table>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE5LzE3MzY3NTNjNDc1M2M2Zjk?x-oss-process=image/format,png" alt="img"></p>
<h2><span id="消息队列的作用">消息队列的作用</span></h2>
<p><strong>解耦</strong></p>
<img src="https://pic.imgdb.cn/item/64c774ca1ddac507cc90bee8.jpg" style="zoom:67%;">
<p>如上图，系统A通过调用三个方法（sendMsgForB、sendMsgForC、sendMsgForD）分别发送数据到系统B、C、D</p>
<p>若系统D不再需要系统A的数据且新增系统E需要系统A的数据，则需要删除系统A的sendMsgForD方法并添加sendMsgForE方法</p>
<p>使用MQ可以降低这种强耦合，系统A只需要把数据发送到MQ，需要数据的其他系统可从MQ中获取</p>
<p><strong>异步</strong></p>
<img src="https://pic.imgdb.cn/item/64c774fe1ddac507cc911621.jpg" style="zoom:67%;">
<p>如上图，客户端发送一个请求到系统A，系统A会顺序调用系统B、C、D三个系统，响应时间为系统A、B、C、D的总和，也就是800ms</p>
<p><strong>若使用MQ，系统A发送数据到MQ，然后就可以返回响应给客户端，不需要再等待系统B、C、D的响应，可以大大地提高性能</strong></p>
<p>应用于一些非必要的业务，比如发送短信，发送邮件等等</p>
<p><strong>削峰</strong></p>
<img src="https://pic.imgdb.cn/item/64c7751c1ddac507cc914516.jpg" style="zoom:67%;">
<p>如上图，假设系统A在某一段时间请求数暴增，有5000个请求发送过来，系统A这时就会发送5000条SQL进入MySQL进行执行，MySQL无法处理如此多的请求，MySQL就会崩溃导致系统瘫痪</p>
<p><strong>如果使用MQ，系统A不再是直接发送SQL到数据库，而是把数据发送到MQ，MQ短时间积压数据是可以接受的，然后由消费者每次拉取2000条进行处理，防止在请求峰值时期大量的请求直接发送到MySQL导致系统崩溃</strong></p>
<h1><span id="rabbitmq">RabbitMQ</span></h1>
<h2><span id="rabbitmq特点">RabbitMQ特点</span></h2>
<p>RabbitMQ是一款使用Erlang语言开发的，实现AMQP(高级消息队列协议)的开源消息中间件</p>
<ul>
<li>可靠性。支持持久化，传输确认，发布确认等保证了MQ的可靠性。</li>
<li>灵活的分发消息策略。这应该是RabbitMQ的一大特点。在消息进入MQ前由Exchange(交换机)进行路由消息。分发消息策略有：简单模式、工作队列模式、发布订阅模式、路由模式、通配符模式。</li>
<li>支持集群。多台RabbitMQ服务器可以组成一个集群，形成一个逻辑Broker。</li>
<li>多种协议。RabbitMQ支持多种消息队列协议，比如 STOMP、MQTT 等等。</li>
<li>支持多种语言客户端。RabbitMQ几乎支持所有常用编程语言，包括 Java、.NET、Ruby 等等。</li>
<li>可视化管理界面。RabbitMQ提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker。</li>
<li>插件机制。RabbitMQ提供了许多插件，可以通过插件进行扩展，也可以编写自己的插件。</li>
</ul>
<h2><span id="rabbitmq组成部分">RabbitMQ组成部分</span></h2>
<p><img src="https://pic.imgdb.cn/item/64c771bd1ddac507cc8ac3fb.jpg" alt></p>
<table>
<thead>
<tr>
<th>组成</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Producer</td>
<td>生产者。生产方客户端将消息同交换机路由发送到队列中</td>
</tr>
<tr>
<td>Broker</td>
<td>中间服务进程。此进程包括两个部分：Exchange和Queue</td>
</tr>
<tr>
<td>Exchange</td>
<td>交换机。按一定的规则将消息路由转发到某个队列</td>
</tr>
<tr>
<td>Queue</td>
<td>消息队列，存储消息的队列（先进先出）</td>
</tr>
<tr>
<td>Consumer</td>
<td>消费者。消费队列中存储的消息</td>
</tr>
</tbody>
</table>
<ol>
<li>消息的生产者创建连接对象（Connect）并开启管道对象（Channel），从而连接中间服务进程</li>
<li>生产者声明交换机类型、名称、是否持久化等</li>
<li>生产者发送消息，并指定消息是否持久化等属性和路由键（routing key）</li>
<li>交换机接收消息并根据路由键（routing key）路由到当前交换机绑定（binding）的消息队列</li>
<li>消费者监听接收到消息之后开始业务处理</li>
</ol>
<h2><span id="交换机">交换机</span></h2>
<p><strong>直连交换机（direct）</strong></p>
<p>适用于一对一、点对点的发送消息，即只能被一个消费者消费，若有多个消费者，则最先的消费者消费</p>
<p>若没有消费者消费，则消息会被持久化保存到消息队列中</p>
<p>绑定消息队列的参数 交换机名称、路由键、消息队列名称</p>
<p><strong>Fanout类型交换机</strong></p>
<p>适用于一对多发送消息（广播模式）</p>
<p>若没有消费者及时监听，则该消息被丢失（不会持久化保存到消息队列中）</p>
<p>绑定消息队列参数：交换机名称、消息队列名称</p>
<p><strong>Topic类型交换机</strong></p>
<p>适用于一对一、一对多的发送消息，可根据Topic类型交换机匹配的通配规则来将消息路由转发</p>
<p>若没有消费者消费，则消息会被持久化保存到消息队列中</p>
<p>绑定消息队列参数：交换机名称、通配符、消息队列、路由键</p>
<p><strong>Headers类型交换机</strong></p>
<p>特殊队列容器：延迟队列、死信队列，都可以在某种情况下进行扣除或补回的操作</p>
<h3><span id="队列">队列</span></h3>
<table>
<thead>
<tr>
<th>队列属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>队列名称（name）</td>
<td>队列的名称</td>
</tr>
<tr>
<td>持久化（durable）</td>
<td>消息将持久化保存到消息队列中</td>
</tr>
<tr>
<td>排外（exclusive）</td>
<td>该消息只能被一个消费者（创建者）消费，反之，排外表示该消息能被多个消费者消费</td>
</tr>
<tr>
<td>自动删除（autoDelete）</td>
<td>是否自动删除，也就是临时队列。当最后一个消费者断开连接后，会自动删除</td>
</tr>
<tr>
<td>其他属性</td>
<td>可以在控制台获取参数的key来针对性配置，例如，延迟队列、死信队列、消息的过期时间、消息的倒计时</td>
</tr>
</tbody>
</table>
<h1><span id="环境搭建">环境搭建</span></h1>
<h2><span id="容器安装">容器安装</span></h2>
<h3><span id="拉取镜像">拉取镜像</span></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure>
<h3><span id="创建容器">创建容器</span></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开放端口：5672(Java通信端口) 15672(管理控制台通信端口) 25672(集群通信端口) 4369(集群通信端口)</span></span><br><span class="line">docker run -d --hostname rabbitmq --name rabbitmq -p 5672:5672 -p 15672:15672 -p 25672:25672 -p 4369:4369 -e RABBITMQ_DEFAULT_VHOST=/ -e RABBITMQ_DEFAULT_USER=root -e RABBITMQ_DEFAULT_PASS=root rabbitmq:management</span><br></pre></td></tr></table></figure>
<h2><span id="导入依赖">导入依赖</span></h2>
<p>在pom.xml文件中导入如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--RabbitMQ起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以及Springboot、nacos依赖</p>
<h2><span id="添加配置">添加配置</span></h2>
<p>在application.yml中添加如下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>
<h1><span id="使用rabbitmq">使用RabbitMQ</span></h1>
<h2><span id="生产者发送消息">生产者发送消息</span></h2>
<p><strong>模板对象</strong></p>
<p>RabbitTemplate、AmqpTemplate</p>
<p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>convertAndSend(String routingKey, Object object)</td>
<td>使用直流交换机进行消息的路由转发<br>routingKey代表当前消息队列名称<br>Object代表要传输的消息数据</td>
</tr>
<tr>
<td>convertAndSend(String exchange, String routingKey, Object object)</td>
<td>exchange代表要使用的交换机<br>routingKey代表路由键信息<br>Object代表要传输的消息数据</td>
</tr>
</tbody>
</table>
<p>在生产者微服务中发送消息</p>
<h3><span id="使用默认交换机">使用默认交换机</span></h3>
<p><strong>配置消息队列，使用默认绑定关系</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">    <span class="comment">//声明消息队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">basicQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;basicQueue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>发送消息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDefaultExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(</span><br><span class="line">                <span class="string">&quot;basicQueue&quot;</span>,</span><br><span class="line">                <span class="string">&quot;\&quot;id\&quot;:111&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="指定直流交换机direct">指定直流交换机（direct）</span></h3>
<p><strong>配置消息队列、交换机以及它们的绑定关系</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">    <span class="comment">//声明消息队列（首次创建必须声明）</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">basicQueue</span><span class="params">()</span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;basicQueue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">amqDirect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;amp.direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">amqDirectBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(basicQueue()).to(amqDirect()).with(<span class="string">&quot;basic&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>发送消息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(</span><br><span class="line">                <span class="string">&quot;directExchange&quot;</span>,</span><br><span class="line">                <span class="string">&quot;directRoutingKey&quot;</span>,</span><br><span class="line">                <span class="string">&quot;\&quot;id\&quot;:111&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="指定扇出交换机fanout">指定扇出交换机（fanout）</span></h3>
<p><strong>配置消息队列、交换机以及它们的绑定关系</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;fanoutExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanoutQueue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanoutQueue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutExchangeBinding1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutExchangeBinding2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>发送消息</strong></p>
<p>无需指定路由键，将发送到指定交换机绑定的所有消息队列上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(</span><br><span class="line">                <span class="string">&quot;fanoutExchange&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;\&quot;id\&quot;:321&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="指定主题交换机topic">指定主题交换机（topic）</span></h3>
<p><strong>配置消息队列、交换机以及它们的绑定关系</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">topicExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;topicExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topicQueue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topicQueue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topicQueue3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicExchangeBinding1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//精准匹配aa</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicExchangeBinding2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//匹配以aa开头的两段英文字母</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class="string">&quot;aa.*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicExchangeBinding3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//匹配以aa开头的所有英文字母</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue3()).to(topicExchange()).with(<span class="string">&quot;aa.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>发送消息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopicExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(</span><br><span class="line">                <span class="string">&quot;topicExchange&quot;</span>,</span><br><span class="line">                <span class="string">&quot;aa&quot;</span>,</span><br><span class="line">                <span class="string">&quot;\&quot;id\&quot;:111&quot;</span></span><br><span class="line">        );</span><br><span class="line">        rabbitTemplate.convertAndSend(</span><br><span class="line">                <span class="string">&quot;topicExchange&quot;</span>,</span><br><span class="line">                <span class="string">&quot;aa.bb&quot;</span>,</span><br><span class="line">                <span class="string">&quot;\&quot;id\&quot;:222&quot;</span></span><br><span class="line">        );</span><br><span class="line">        rabbitTemplate.convertAndSend(</span><br><span class="line">                <span class="string">&quot;topicExchange&quot;</span>,</span><br><span class="line">                <span class="string">&quot;aa.bb.cc&quot;</span>,</span><br><span class="line">                <span class="string">&quot;\&quot;id\&quot;:333&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>消费者接收结果</strong></p>
<p><img src="https://pic.imgdb.cn/item/64c86a101ddac507cc2a31b9.jpg" alt></p>
<h2><span id="消费者接收消息">消费者接收消息</span></h2>
<p>在消费者微服务中接收消息，添加如下配置类以及注解<code>@RabbitListener(queues = &#123;&quot;【消息队列名称】&quot;&#125;)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveMessageListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &#123;&quot;basicQueue&quot;,&quot;directQueue&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveBasicQueue</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">        <span class="comment">//当消费者从消息队列中接收消息时，消息队列默认将该数据删除</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收到的消息：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;fanoutQueue1&quot;,&quot;fanoutQueue2&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveFanoutQueue</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">    System.out.println(message.getMessageProperties().getConsumerQueue()+<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">    //监听器中也能声明绑定关系，如下声明了一个绑定了“fanoutExchange”的随机名称的消息队列</span></span><br><span class="line"><span class="meta">    //它默认属性为exclusive：true，auto-delete：true</span></span><br><span class="line"><span class="meta">    //当把消费者服务关闭（没有消费者监听该消息队列），则该消息队列自动删除</span></span><br><span class="line"><span class="meta">    @QueueBinding(value = @Queue,exchange = @Exchange(name = &quot;fanoutExchange&quot;,type = &quot;fanout&quot;))</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveSpringQueue</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">    <span class="comment">//当消费者从消息队列中接收消息时，消息队列默认将该数据删除</span></span><br><span class="line">    System.out.println(message.getMessageProperties().getConsumerQueue()+<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="生产者消息确认机制">生产者消息确认机制</span></h2>
<h3><span id="添加配置">添加配置</span></h3>
<p>在<code>application.yml</code>中添加如下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="comment"># 以下开启生产者消息确认模式</span></span><br><span class="line">    <span class="comment"># 是否路由到指定交换机</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">    <span class="comment"># 是否路由到指定消息队列</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3><span id="发送确认">发送确认</span></h3>
<p>是否发送到指定交换机或消息队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProducerConfirm</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//消息是否发送到指定交换机与消息队列中</span></span><br><span class="line">    rabbitTemplate.setReturnCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(Message message, <span class="type">int</span> replyCode, String replyText, String exchange, String routingKey)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----------------------------returnedMessage----------------------------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;message:&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">            System.out.println(<span class="string">&quot;replyCode:&quot;</span> + replyCode);</span><br><span class="line">            System.out.println(<span class="string">&quot;replyText:&quot;</span> + replyText);</span><br><span class="line">            System.out.println(<span class="string">&quot;exchange:&quot;</span> + exchange);</span><br><span class="line">            System.out.println(<span class="string">&quot;routingKey:&quot;</span> + routingKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----------------------------confirm----------------------------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;correlationData:&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(correlationData.getReturnedMessage().getBody()));</span><br><span class="line">            System.out.println(<span class="string">&quot;ack:&quot;</span> + ack);</span><br><span class="line">            System.out.println(<span class="string">&quot;cause:&quot;</span> + cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">	<span class="comment">//设置回调信息</span></span><br><span class="line">    <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>();</span><br><span class="line">    correlationData.setReturnedMessage(<span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;&#123;id:111&#125;&quot;</span>.getBytes()));</span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">        <span class="string">&quot;directExchange&quot;</span>,</span><br><span class="line">        <span class="string">&quot;directRoutingKey&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#123;\&quot;id\&quot;:123&#125;&quot;</span>,</span><br><span class="line">        <span class="comment">//当无法找到指定的交换机，会执行回调的方法进行消息的确认</span></span><br><span class="line">        correlationData</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>
<p><strong>当指定交换机不存在时</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----------------------------confirm----------------------------------</span><br><span class="line">correlationData:&#123;id:111&#125;</span><br><span class="line">ack:false</span><br><span class="line">cause:channel error; protocol method: #method&lt;channel.close&gt;(reply-code=404, reply-text=NOT_FOUND - no exchange &#x27;directExchange123&#x27; in vhost &#x27;/&#x27;, class-id=60, method-id=40)</span><br></pre></td></tr></table></figure>
<p><strong>当指定路由不存在时</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----------------------------returnedMessage----------------------------------</span><br><span class="line">message:&#123;&quot;id&quot;:123&#125;</span><br><span class="line">replyCode:312</span><br><span class="line">replyText:NO_ROUTE</span><br><span class="line">exchange:directExchange</span><br><span class="line">routingKey:directRoutingKey123</span><br><span class="line">-----------------------------confirm----------------------------------</span><br><span class="line">correlationData:&#123;id:111&#125;</span><br><span class="line">ack:true</span><br><span class="line">cause:null</span><br></pre></td></tr></table></figure>
<h2><span id="消费者消息确认机制">消费者消息确认机制</span></h2>
<h3><span id="添加配置">添加配置</span></h3>
<p>在<code>application.yml</code>中添加如下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="comment"># 消费者确认模式设置为  手动确认模式</span></span><br><span class="line">        <span class="comment"># 默认为自动设置模式，当消息队列中的消息被消费者消费，自动确认后删除消息队列中的消息</span></span><br><span class="line">        <span class="comment"># 设置手动确认模式后，必须手动确认消费消息，否则不会删除消息队列中的消息</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure>
<h3><span id="消息确认">消息确认</span></h3>
<p>监听器中添加参数<code>channel</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;basicQueue&quot;,&quot;directQueue&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveBasicQueue</span><span class="params">(Message message, Channel channel)</span>&#123;</span><br><span class="line">    <span class="comment">//当消费者从消息队列中接收消息时，消息队列默认将该数据删除</span></span><br><span class="line">    System.out.println(message.getMessageProperties().getConsumerQueue()+<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动确认消息</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        channel.basicAck(</span><br><span class="line">            <span class="comment">//消费者消息id</span></span><br><span class="line">            message.getMessageProperties().getDeliveryTag(),</span><br><span class="line">            <span class="comment">//是否批量消费</span></span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="延迟队列与死信队列">延迟队列与死信队列</span></h2>
<p>若在指定时间没有消费者接收消息队列（延迟队列）中的消息，则该消息将被转发至死信队列，并进行消息的补回操作</p>
<p><strong>声明延迟队列（配置属性）、死信队列、死信交换机以及死信队列与死信交换机的绑定关系</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明延迟队列</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">delayQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; arguments = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//声明消息过期时间(以ms为单位)</span></span><br><span class="line">    arguments.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">30</span> * <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">//死信交换机</span></span><br><span class="line">    arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, <span class="string">&quot;deadLetterExchange&quot;</span>);</span><br><span class="line">    <span class="comment">//死信路由键</span></span><br><span class="line">    arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;deadLetterRoutingKey&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;delayQueue&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, arguments);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明死信队列</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">deadLetterQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;deadLetterQueue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明死信交换机</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">deadLetterExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;deadLetterExchange&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明死信交换机与死信队列的绑定关系</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">deadLetterBinding</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(deadLetterQueue()).to(deadLetterExchange()).with(<span class="string">&quot;deadLetterRoutingKey&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>发送消息至延迟队列</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelayMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(</span><br><span class="line">                <span class="string">&quot;delayQueue&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;\&quot;id:\&quot;:321&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>经过指定时间后接收死信队列消息（手动确认）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;deadLetterQueue&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveDeadLetterQueue</span><span class="params">(Message message,Channel channel)</span> &#123;</span><br><span class="line">    <span class="comment">//消息补回操作</span></span><br><span class="line">    System.out.println(message.getMessageProperties().getConsumerQueue()+<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">    <span class="comment">//手动确认消息</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        channel.basicAck(</span><br><span class="line">            message.getMessageProperties().getDeliveryTag(),</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>sentinel</title>
    <url>/post/sentinel/</url>
    <content><![CDATA[<h1><span id="基础概念">基础概念</span></h1>
<h2><span id="资源">资源</span></h2>
<p>通过 Sentinel API 某一代码定义为资源，可以是 Java 应用程序中的任何内容（服务、调用的服务、代码段），可以使用方法签名，URL，甚至服务名称作为资源名来标示资源</p>
<h2><span id="规则">规则</span></h2>
<p>对指定资源（某一代码段）的实时状态设定的规则（包括流量控制规则、熔断降级规则以及系统保护规则），所有规则可以动态实时调整</p>
<h2><span id="设置规则">设置规则</span></h2>
<h3><span id="java代码">Java代码</span></h3>
<p>直接在代码中对指定资源进行规则的设置</p>
<h3><span id="sentinel控制台">sentinel控制台</span></h3>
<p>在Sentinel控制台中对指定资源进行规则的设置</p>
<p>使用控制台的方式进行规则设置时，需对控制台所在地址进行配置，从而使应用可从控制台处获取到动态的规则配置</p>
<h1><span id="基础配置">基础配置</span></h1>
<h2><span id="下载sentinel控制台">下载sentinel控制台</span></h2>
<p><code>sentinel-dashboard-1.8.5.jar</code></p>
<h2><span id="启动sentinel控制台">启动sentinel控制台</span></h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar -Dserver.port=8888 sentinel-dashboard-1.8.5.jar</span><br></pre></td></tr></table></figure>
<h2><span id="spring-boot-导入sentinel">Spring Boot 导入sentinel</span></h2>
<h3><span id="引入sentinel依赖">引入sentinel依赖</span></h3>
<p>在pom.xml文件中导入如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="添加配置">添加配置</span></h3>
<p>在application.xml中添加如下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment"># sentinel仪表盘地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8888</span></span><br><span class="line">        <span class="comment"># 客户端与sentinel通信地址</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br></pre></td></tr></table></figure>
<h1><span id="流量控制">流量控制</span></h1>
<p>根据系统的处理能力对流量进行控制</p>
<p>Sentinel 可以根据需要把随机的请求调整成合适的形状</p>
<p>Sentinel 的设计理念是让您自由选择控制的角度，并进行灵活组合，从而达到想要的效果</p>
<img src="https://sentinelguard.io/docs/zh-cn/img/sentinel-flow-overview.jpg" alt="arch" style="zoom:67%;">
<h2><span id="基于qps并发线程数的流控">基于QPS/并发线程数的流控</span></h2>
<img src="https://pic.imgdb.cn/item/64c3acd11ddac507cc9305a8.jpg" style="zoom:50%;">
<h3><span id="qpsquery-per-second">QPS（Query Per Second）</span></h3>
<p>每秒查询率，即服务器在一秒的时间内处理了多少个请求</p>
<p>当 QPS 超过某个阈值的时候，则采取措施进行流量控制</p>
<h3><span id="并发线程数">并发线程数</span></h3>
<p>用于保护业务线程数不被耗尽</p>
<p>Sentinel线程数限流不负责创建和管理线程池，而是简单统计当前请求上下文的线程个数，如果超出阈值，新的请求会被立即拒绝</p>
<p>当应用所依赖的下游应用由于某种原因导致服务不稳定、响应延迟增加，对于调用者来说，意味着吞吐量下降和更多的线程数占用，极端情况下甚至导致线程池耗尽</p>
<p>为应对高线程占用的情况，业内有使用隔离的方案，比如通过不同业务逻辑使用不同线程池来隔离业务自身之间的资源争抢（线程池隔离），或者使用信号量来控制同时请求的个数（信号量隔离）</p>
<p>这种隔离方案虽然能够控制线程数量，但无法控制请求排队时间。当请求过多时排队也是无益的，直接拒绝能够迅速降低系统压力</p>
<h3><span id="系统负载">系统负载</span></h3>
<p>系统维度的自适应保护能力。防止雪崩，是系统防护中重要的一环</p>
<p>当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去</p>
<p>如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。</p>
<p>针对这个情况，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求</p>
<h3><span id="流控效果">流控效果</span></h3>
<h4><span id="快速失败直接限流">快速失败（直接限流）</span></h4>
<p>默认的流量控制方式，当QPS超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出<code>FlowException</code></p>
<p>适用于对系统处理能力确切已知的情况下，比如通过压测确定了系统的准确水位时</p>
<h4><span id="warm-up冷启动">Warm up（冷启动）</span></h4>
<p>于系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过&quot;冷启动&quot;，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮的情况</p>
<p>通常冷启动的过程系统允许通过的 QPS 曲线如下图所示：</p>
<p><img src="https://github.com/alibaba/Sentinel/wiki/image/warmup.gif" alt="冷启动过程 QPS 曲线"></p>
<h4><span id="排队等待">排队等待</span></h4>
<p>严格控制了请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法</p>
<p>用于处理间隔性突发的流量，例如消息队列。在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求</p>
<p><img src="https://github.com/alibaba/Sentinel/wiki/image/queue.gif" alt="img"></p>
<h2><span id="基于调用关系的流控">基于调用关系的流控</span></h2>
<p>调用关系包括调用方、被调用方；方法又可能会调用其它方法，形成一个调用链路的层次关系。Sentinel 通过 <code>NodeSelectorSlot</code> 建立不同资源间的调用的关系，并且通过 <code>ClusterNodeBuilderSlot</code> 记录每个资源的实时统计信息。</p>
<h3><span id="调用方限流">调用方限流</span></h3>
<p><code>ContextUtil.enter(resourceName, origin)</code> 方法中的 <code>origin</code> 参数标明了调用方身份。这些信息会在 <code>ClusterBuilderSlot</code> 中被统计。可通过以下命令来展示不同的调用方对同一个资源的调用数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8719/origin?id=nodeA</span><br></pre></td></tr></table></figure>
<p>调用数据示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id: nodeA</span><br><span class="line">idx origin  threadNum passedQps blockedQps totalQps aRt   1m-passed 1m-blocked 1m-total </span><br><span class="line">1   caller1 0         0         0          0        0     0         0          0</span><br><span class="line">2   caller2 0         0         0          0        0     0         0          0</span><br></pre></td></tr></table></figure>
<p>上面这个命令展示了资源名为 <code>nodeA</code> 的资源被两个不同的调用方调用的统计。</p>
<p>限流规则中的 <code>limitApp</code> 字段用于根据调用方进行流量控制。该字段的值有以下三种选项，分别对应不同的场景：</p>
<ul>
<li><code>default</code>：表示不区分调用者，来自任何调用者的请求都将进行限流统计。如果这个资源名的调用总和超过了这条规则定义的阈值，则触发限流。</li>
<li><code>&#123;some_origin_name&#125;</code>：表示针对特定的调用者，只有来自这个调用者的请求才会进行流量控制。例如 <code>NodeA</code> 配置了一条针对调用者<code>caller1</code>的规则，那么当且仅当来自 <code>caller1</code> 对 <code>NodeA</code> 的请求才会触发流量控制。</li>
<li><code>other</code>：表示针对除 <code>&#123;some_origin_name&#125;</code> 以外的其余调用方的流量进行流量控制。例如，资源<code>NodeA</code>配置了一条针对调用者 <code>caller1</code> 的限流规则，同时又配置了一条调用者为 <code>other</code> 的规则，那么任意来自非 <code>caller1</code> 对 <code>NodeA</code> 的调用，都不能超过 <code>other</code> 这条规则定义的阈值。</li>
</ul>
<p>同一个资源名可以配置多条规则，规则的生效顺序为：<strong>{some_origin_name} &gt; other &gt; default</strong></p>
<h3><span id="关联流控">关联流控</span></h3>
<p>当两个资源之间具有资源争抢或者依赖关系的时候，这两个资源便具有了关联；当关联资源超出流控规则限制的调用时，Sentinel对当前资源进行流控</p>
<p>例如，对数据库同一个字段的读操作和写操作存在争抢，读的速度过高会影响写得速度，写的速度过高会影响读的速度。如果放任读写操作争抢资源，则争抢本身带来的开销会降低整体的吞吐量。可使用关联限流来避免具有关联关系的资源之间过度的争抢，这样当写库操作过于频繁时，读数据的请求会被限流。</p>
<h3><span id="链路限流">链路限流</span></h3>
<p>根据调用链路入口限流</p>
<p><code>NodeSelectorSlot</code> 中记录了资源之间的调用链路，这些资源通过调用关系，相互之间构成一棵调用树。这棵树的根节点是一个名字为 <code>machine-root</code> 的虚拟节点，调用链的入口都是这个虚节点的子节点。</p>
<p>一棵典型的调用树如下图所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">          machine-root</span><br><span class="line">              /       \</span><br><span class="line">             /         \</span><br><span class="line">       Entrance1     Entrance2</span><br><span class="line">          /             \</span><br><span class="line">         /               \</span><br><span class="line">DefaultNode(nodeA)   DefaultNode(nodeA)</span><br></pre></td></tr></table></figure>
<p>上图中来自入口 <code>Entrance1</code> 和 <code>Entrance2</code> 的请求都调用到了资源 <code>NodeA</code>，Sentinel 允许只根据某个入口的统计信息对资源限流。比如我们可以设置 <code>FlowRule.strategy</code> 为 <code>RuleConstant.CHAIN</code>，同时设置 <code>FlowRule.ref_identity</code> 为 <code>Entrance1</code> 来表示只有从入口 <code>Entrance1</code> 的调用才会记录到 <code>NodeA</code> 的限流统计当中，而对来自 <code>Entrance2</code> 的调用漠不关心。</p>
<p>调用链的入口是通过 API 方法 <code>ContextUtil.enter(name)</code> 定义的</p>
<h1><span id="熔断降级">熔断降级</span></h1>
<p>不同服务之间相互调用，组成复杂的调用链路，熔断降级用于降低调用链路中的不稳定的弱依赖服务调用（暂时切断）</p>
<p>如果调用链路中的某个资源出现了不稳定，可能层层级联，最终会导致请求发生堆积</p>
<p>例如，请求响应时间变长或异常比例升高时，调用服务的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身不可用，则需要对这个资源的调用进行限制，并让请求快速失败，避免该服务的不稳定因素导致整体的雪崩</p>
<p>熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置</p>
<img src="https://user-images.githubusercontent.com/9434884/62410811-cd871680-b61d-11e9-9df7-3ee41c618644.png" alt="image" style="zoom:67%;">
<table>
<thead>
<tr>
<th>Hystrix设计理念</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>通过线程池隔离资源</td>
<td>资源和资源之间彻底隔离</td>
<td>增加了线程切换的成本，还需要预先给各个资源做线程池大小的分配</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Sentinel设计理念</th>
<th></th>
<th>优点</th>
</tr>
</thead>
<tbody>
<tr>
<td>通过并发线程数进行限制</td>
<td>减少不稳定资源对其他资源的影响</td>
<td>没有线程切换的损耗无需预先分配线程池的大小</td>
</tr>
<tr>
<td>通过响应时间对资源进行降级</td>
<td>直接拒绝响应时间过长的请求访问资源，经过指定时间后恢复</td>
<td></td>
</tr>
</tbody>
</table>
<h2><span id="熔断降级规则">熔断降级规则</span></h2>
<p>熔断触发后，将拒绝请求并抛出异常<code>com.alibaba.csp.sentinel.slots.block.degrade.DegradeException: null</code></p>
<table>
<thead>
<tr>
<th>熔断规则</th>
<th>熔断触发条件</th>
</tr>
</thead>
<tbody>
<tr>
<td>慢调用比例</td>
<td>单位统计时长内请求数目大于设置的最小请求数目，并且慢调用（请求的响应时间大于最大RT）的比例大于阈值</td>
</tr>
<tr>
<td>异常比例</td>
<td>单位统计时长内请求数目大于设置的最小请求数目，并且异常的比例大于阈值（范围：<code>[0.0, 1.0]对应0% - 100%</code>）</td>
</tr>
<tr>
<td>异常数</td>
<td>单位统计时长内请求数目大于设置的最小请求数目，并且异常数目超过阈值</td>
</tr>
</tbody>
</table>
<p>熔断后经过<strong>熔断时长</strong>后熔断器会进入探测恢复状态（HALF-OPEN 状态），此时的恢复条件如下</p>
<table>
<thead>
<tr>
<th>熔断规则</th>
<th>熔断后恢复条件</th>
</tr>
</thead>
<tbody>
<tr>
<td>慢调用比例</td>
<td>若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断</td>
</tr>
<tr>
<td>异常比例</td>
<td>若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断</td>
</tr>
<tr>
<td>异常数</td>
<td>若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断</td>
</tr>
</tbody>
</table>
<h3><span id="慢调用比例">慢调用比例</span></h3>
<img src="https://pic.imgdb.cn/item/64c888441ddac507cc6b4987.jpg" style="zoom: 50%;">
<ol>
<li>对于userList资源采取慢调用比例熔断策略</li>
<li>在5秒内超过2个请求时，且有超过一半的请求的响应时间超过500毫秒则进行熔断降级</li>
<li>5秒后的第一个请求响应时间小于500毫秒则恢复，否则再次熔断</li>
</ol>
<h3><span id="异常比例">异常比例</span></h3>
<img src="https://pic.imgdb.cn/item/64c8a9471ddac507ccab6e59.jpg" style="zoom:50%;">
<ol>
<li>对于userList资源采取异常比例熔断策略</li>
<li>在5秒内超过2个请求时，且有超过一半的请求发生异常则进行熔断降级</li>
<li>5秒后的第一个请求没有异常则恢复，否则再次熔断</li>
</ol>
<h3><span id="异常数">异常数</span></h3>
<img src="https://pic.imgdb.cn/item/64c8b03d1ddac507ccb98a87.jpg" style="zoom:50%;">
<ol>
<li>对于userList资源采取异常数熔断策略</li>
<li>在5秒内超过2个请求时，且至少有一个以上请求发生异常则进行熔断降级</li>
<li>5秒后的第一个请求没有异常则恢复，否则再次熔断</li>
</ol>
<h3><span id="资源名">资源名</span></h3>
<p><strong>未在代码段配置资源名</strong>时，可以通过微服务中某个控制器的访问相对路径来指定，例如 <code>/user/list</code></p>
<p>当超出流控规则限制的调用时，服务器返回<code>429 Too Many Requests</code>，且返回响应体：<code>Blocked by Sentinel (flow limiting)</code></p>
<p><strong>在代码段配置资源名</strong></p>
<p>为微服务中某个控制器添加注解：<code>@SentinelResource(value = &quot;【资源名】&quot;)</code></p>
<p>重启服务器（流控规则将丢失），重新配置流控规则</p>
<p>当超出流控规则限制的调用时，服务器返回<code>500 Internal Server Error</code>，且在服务器触发异常：</p>
<p><code>com.alibaba.csp.sentinel.slots.block.flow.FlowException: null</code></p>
]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>关于配置servlet的url-pattern的问题</title>
    <url>/post/servlet%20url-pattern%E7%9A%84%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2><span id="servlet-url-pattern的匹配问题">servlet url-pattern的匹配问题</span></h2>
<p>url-pattern 有三种匹配模式，分别是路径匹配、精确匹配、后缀匹配</p>
<h3><span id="精确匹配">精确匹配</span></h3>
<p>url-pattern 中配置的项必须与url完全精确匹配。 代码举例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Kata/detail.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/table<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当在浏览器中输入如下几种url时，都会被匹配到该servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/Kata/detail.html</span><br><span class="line">http://localhost:8080/demo.html</span><br><span class="line">http://localhost:8080/table </span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ol>
<li><code>http://localhost:8080/table/</code> 是非法的url，不会被当作<code>http://localhost:8080/table</code> 识别</li>
<li>另外上述url后面可以跟任意的查询条件，都会被匹配，如 <code>http://localhost:8080/table?hello</code> 这个请求就会被匹配到MyServlet。</li>
</ol>
<h3><span id="路径匹配">路径匹配</span></h3>
<p>以“/”字符开头，并以“/*”结尾的字符串用于路径匹配</p>
<p>代码举例:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>路径以/user/开始，后面的路径可以任意。比如下面的url都会被匹配。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/user/users.html </span><br><span class="line">http://localhost:8080/user/admin/addUser.action </span><br></pre></td></tr></table></figure>
<p>/* 为优先级最低的路径匹配，匹配所有请求(所有的后台请求和所有的前端请求)</p>
<h3><span id="后缀匹配">后缀匹配</span></h3>
<p>以“ *. ”开头的字符串被用于后缀匹配</p>
<p>代码举例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>则任何扩展名为jsp或action的url请求都会匹配，比如下面的url都会被匹配</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/user/users.jsp </span><br><span class="line">http://localhost:8080/toHome.action</span><br></pre></td></tr></table></figure>
<p>注意：路径和后缀匹配无法同时设置 ,如果设置，启动tomcat服务器会报错</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user/*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>user*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="url-pattern的优先级问题">url-pattern的优先级问题</span></h2>
<ol>
<li>当配置了多个Servlet的url-pattern同时匹配同一个请求时，会将请求匹配给优先级高的Servlet</li>
<li>精确匹配&gt;路径匹配（/*）&gt;扩展名匹配&gt;缺省匹配</li>
</ol>
<h2><span id="url-pattern中-和-的区别">url-pattern中 / 和 /* 的区别</span></h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em><em>web.xml中配置dispatcherServlet， /</em> 不能访问jsp而 / 可以访问jsp</em>*</p>
<p>/* 能匹配所有请求 ， / 当所有其他匹配都不合适时匹配</p>
<ol>
<li>
<p>在tomcat/conf/web.xml里 面单独配置了 *.jsp 的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>/*作为路径匹配优先级高于tomcat里的后缀匹配，因此匹配，jsp不再交给tomcat中的JspServlet处理导致jsp文件无法访问</p>
</li>
<li>
<p>/ 是最低优先级的匹配，因此匹配tomcat中的JspServlet</p>
</li>
</ol>
<p><em><em>web.xml中配置dispatcherServlet， /</em> 和 / 都不能访问html</em>*</p>
<ol>
<li>
<p>在tomcat/conf/web.xml里 面单独配置了 / （缺省）的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>/*作为路径匹配优先级高于tomcat里的缺省匹配，因此匹配，jsp不再交给tomcat中的DefaultServlet处理导致无法访问</p>
</li>
<li>
<p>/ 与 tomcat中的DefaultServlet同优先级导致无法访问html</p>
</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>/*</th>
<th>/</th>
</tr>
</thead>
<tbody>
<tr>
<td>范围</td>
<td>最广，所有的请求都符合它的要求（jsp、servlet、Controller等）</td>
<td>当所有其他匹配都不合适时匹配</td>
</tr>
<tr>
<td>匹配优先级</td>
<td>它是路径匹配的一种，相对 / 较高</td>
<td>最低，当一个url和所有的 url-pattern 匹配都不合适时匹配</td>
</tr>
</tbody>
</table>
<p><strong>根路径 / 的匹配问题</strong></p>
<p>/ 访问<code>http://localhost:8080/</code>可以自动转发到<code>http://localhost:8080/index.html</code></p>
<p>而/*不能自动转发，只能直接访问<code>http://localhost:8080/index.html</code>（spring容器里面配置了<code>&lt;mvc:default-servlet-handler/&gt;</code>）</p>
<p><code>http://localhost:8080/</code>会被url-pattern为/*的匹配，但他不会被url-pattern为/匹配。</p>
<p>在tomcat中，/默认是属于会被defaultservlet匹配，但是其优先级低于路径匹配，所以当某一个servlet的url-pattern为/*时，/就 会被这个servlet匹配，从而不被defaultservlet匹配。 <code>http://localhost:8080/</code>自动转发到<code>http://localhost:8080/index.html</code>的前提是/必须被defaultservlet匹配。</p>
]]></content>
      <categories>
        <category>第三阶段</category>
      </categories>
  </entry>
  <entry>
    <title>static、final关键字、代码块</title>
    <url>/post/static%E3%80%81final%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
    <content><![CDATA[<h1><span id="static">static</span></h1>
<h2><span id="修饰属性">修饰属性</span></h2>
<p>static修饰的属性称为：静态变量、全局变量、静态属性、全局属性、类变量、类属性，非static修饰的属性可称为实例变量</p>
<span id="more"></span>
<ul>
<li>静态属性随类的加载而加载，先于对象存在</li>
<li>静态属性仅存放JVM方法区的静态域中，所有对象共享</li>
</ul>
<p>静态属性常用于所有对象属性值唯一的属性，即属性值与对象无关</p>
<p><img src="https://pic.imgdb.cn/item/63a97c1608b6830163f144a1.png" alt></p>
<h2><span id="修饰方法">修饰方法</span></h2>
<p>static修饰的方法称为：静态方法，非static修饰的方法可称为实例方法</p>
<ul>
<li>静态方法随着类的加载而加载，先于对象存在</li>
<li>静态方法常通过 类名.方法名 调用</li>
<li>静态方法无法访问非静态属性、非静态方法，他们需要实例才可以访问</li>
<li>实例方法既可以访问静态属性、静态方法，也可以访问非静态属性、非静态方法</li>
</ul>
<p>静态方法常用于</p>
<p>1.工具类（直接使用  类名.方法名 调用，Math.random() ）</p>
<p>2.处理静态属性的方法</p>
<p><strong>main()方法</strong>也是静态方法，在main()方法中不能直接访问该类中的非静态成员，需要创建实例对象，通过实例对象访问该类中的非静态成员</p>
<p>main()方法中的关键字</p>
<ul>
<li>Java虚拟机需要访问main()方法，访问权限使用public</li>
<li>main()方法无需创建实例对象，使用static</li>
<li>接收个String类型的数组参数，可通过java指令传参   <strong>java 类名  “XXX” “XXX” “XXX”</strong></li>
</ul>
<h2><span id="修饰代码块">修饰代码块</span></h2>
<p>static修饰的代码块，当类被载入时，静态代码块被执行，且只被执行一次，常用于初始化静态属性</p>
<ul>
<li>静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块可以赋值，但是不能访问</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    i = <span class="number">0</span>; <span class="comment">// 给变量复制可以正常编译通过</span></span><br><span class="line">    System.out.print(i); <span class="comment">// 这句编译器会提示“非法向前引用”</span></span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="静态代码块-静态方法区别">静态代码块 静态方法区别</span></h3>
<table>
<thead>
<tr>
<th>静态代码块</th>
<th>静态方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>在类加载时自动执行，且只执行一次</td>
<td>在类加载时加载到方法区,其他程序来调用时,无需创建对象,通过类名.方法名执行</td>
</tr>
</tbody>
</table>
<h2><span id="修饰内部类">修饰内部类</span></h2>
<h3><span id="为什么静态方法无法直接访问非静态成员">为什么静态方法无法直接访问非静态成员</span></h3>
<ol>
<li>静态方法在类加载的解析阶段实现了符号引用转换成直接引用，在类加载后就能通过类名.方法名访问</li>
<li>而非静态成员要等到符号引用被使用时（即类加载后的初始化阶段），才会对常量池中指向非静态成员的符号引用进行解析，因为非静态成员可能在运行期间发生改变（变量赋值、方法重写）</li>
<li>在静态方法解析完成时，非静态成员可能仍未开始解析，因此静态方法获取不了非静态成员的直接引用，即无法访问非静态成员</li>
<li>在静态方法中定义非静态成员所属类的实例对象，通过对象可以访问类的非静态成员</li>
</ol>
<h3><span id="为什么非静态成员为什么无法容纳静态成员">为什么非静态成员为什么无法容纳静态成员</span></h3>
<h4><span id="实例方法无法定义静态属性">实例方法无法定义静态属性</span></h4>
<ol>
<li>静态属性是属于类的，在类加载阶段就加载到方法区的静态域中</li>
<li>实例方法等到它被调用时，它的符号引用才被解析，然后被JVM压入方法调用栈</li>
<li>如果实例方法中定义了静态属性，实例方法被调用时才被解析，无法满足其静态变量在类加载阶段就被解析；</li>
<li>而且实例方法中的属性会随着方法压入栈中，而静态变量唯一存放在方法区的静态域中</li>
</ol>
<h4><span id="实例内部类无法访问静态成员属性-静态方法-静态代码块">实例内部类无法访问静态成员（属性、静态方法、静态代码块）</span></h4>
<p>假设实例内部类中定义了静态成员，在类加载时，静态成员就应被初始化，定义了静态成员的实例内部类作为外部类的成员之一，还需要通过外部类实例对象被调用才会被初始化，因此无法实现在类加载时实现实例内部类的静态初始化。(JDK16以后可以)</p>
<p>但是实例内部类中可以定义static、final常量，常量在编译期就是确定的，加载常量不需要加载它所属的实例内部类</p>
<h1><span id="代码块">代码块</span></h1>
<p>代码块只能有static关键字来修饰，其中static修饰的称为静态代码块，否则称为实例代码块，代码块是为了对Java类或对象进行初始化</p>
<table>
<thead>
<tr>
<th>静态代码块</th>
<th>非静态代码块</th>
</tr>
</thead>
<tbody>
<tr>
<td>随着类的加载而加载，仅执行一次</td>
<td>每次创建对象都执行一次，先于构造器执行</td>
</tr>
<tr>
<td>静态代码块先于非静态代码块执行</td>
<td></td>
</tr>
<tr>
<td>静态代码块间顺序执行</td>
<td>非静态代码块间顺序执行</td>
</tr>
<tr>
<td>不可以调用非静态的属性和方法。</td>
<td>既能调用非静态成员，还能调用静态成员</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class Order&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">orderId</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    &#123;</span><br><span class="line">    	orderId = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">    	orderId = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">orderId</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">&#125;<span class="comment">//同级别顺序执行</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123; </span><br><span class="line">        System.out.print(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;F&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 由父及子 静态先行</span></span><br><span class="line">        System.out.print(<span class="string">&quot;G&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Son</span>();      <span class="comment">//BCEF</span></span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Son</span>();      <span class="comment">//BCEF</span></span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Father</span>();   <span class="comment">//BC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ADG************************</span><br><span class="line">BCEF************************</span><br><span class="line">BCEF************************</span><br><span class="line">BC</span><br></pre></td></tr></table></figure>
<h1><span id="final">final</span></h1>
<ol>
<li>使用final修饰的类不能被继承</li>
<li>使用final修饰的方法不能被重写</li>
<li>使用final标记的变量称为常量。名称大写，且只能被赋值一次。</li>
</ol>
<p>final标记的成员变量必须在声明时或在每个构造器中或代码块中显式赋值，然后才能使用。</p>
<ul>
<li>final修饰基本数据类型的变量，值不能改变</li>
<li>修饰引用型数据类型的变量时，地址不能改变</li>
</ul>
<p>final、static同时修饰的属性为：全局唯一常量</p>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>Spring学习</title>
    <url>/post/spring%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2><span id="spring能做什么">Spring能做什么</span></h2>
<ul>
<li>IOC【依赖反转/控制反转】【Inversion of Control】
<ul>
<li>类产生对象的过程交给Spring去管理，不用程序员创建类的对象</li>
<li>把类交给Spring容器</li>
<li>把对象从Spring容器拿出来</li>
<li>依赖Spring容器里面的对象</li>
</ul>
</li>
<li>AOP</li>
</ul>
<h3><span id="传统mapper-service实现">传统Mapper、Service实现</span></h3>
<p>Mapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Mapper</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doing</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Mapper实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperImplA</span> <span class="keyword">implements</span> <span class="title class_">StuMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AAAAAAAAAAAAAAStuMapperImplA is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Service接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doing</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Service实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceImplA</span> <span class="keyword">implements</span> <span class="title class_">Service</span>&#123;</span><br><span class="line">	<span class="type">Mapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mapper</span>;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doing</span><span class="params">()</span> &#123;</span><br><span class="line">        mapper.doing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="依赖">依赖</span></h2>
<p><strong>主要依赖context</strong></p>
<ul>
<li>org.springframework:spring-aop:5.3.25</li>
<li>org.springframework:spring-beans:5.3.25</li>
<li>org.springframework:spring-core:5.3.25</li>
<li>org.springframework:spring-expression:5.3.25</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="实战">实战</span></h2>
<h3><span id="xml配置方式">xml配置方式</span></h3>
<p><strong>把类交给Spring容器</strong></p>
<ul>
<li>在resource文件夹下创建spring.xml配置文件</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/63f872e4f144a0100733bdb9.jpg" alt></p>
<p><img src="https://pic.imgdb.cn/item/63f872fff144a0100733e016.jpg" alt></p>
<p><img src="https://pic.imgdb.cn/item/63f8730af144a0100733f069.jpg" alt></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans 						  http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--    使用bean标签把需要的类交给Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperImplA&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.mapper.MapperImplA&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperImplB&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.mapper.MapperImplB&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;serviceImplA&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.service.ServiceImplA&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Mapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mapperImplA&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring采用注入手法，让业务的Mapper属性等于引用了Spring容器里面的对象--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--属性必须要求getting,setting--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ServiceImplB&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.service.ServiceImplB&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Mapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mapperImplB&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用bean标签把需要的类交给Spring</li>
<li>Spring采用注入手法，让业务的Mapper属性等于引用了Spring容器里面的对象</li>
<li>此时可以通过修改spring.xml文件来修改mapper注入的实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceImplA</span> <span class="keyword">implements</span> <span class="title class_">Service</span>&#123;</span><br><span class="line">    Mapper mapper;	<span class="comment">//业务层的mapper不需创建对象，而是作为类的属性，在刚刚的spring.xml文件中注入了mapperImplA</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doing</span><span class="params">()</span> &#123;</span><br><span class="line">        mapper.doing();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Mapper <span class="title function_">getMapper</span><span class="params">()</span> &#123;	<span class="comment">//实现getting,setting方法</span></span><br><span class="line">        <span class="keyword">return</span> mapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMapper</span><span class="params">(Mapper mapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mapper = mapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceImplB</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    Mapper mapper;	<span class="comment">//业务层的mapper不需创建对象，而是作为类的属性，在刚刚的spring.xml文件中注入了mapperImplB</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doing</span><span class="params">()</span> &#123;</span><br><span class="line">        mapper.doing();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Mapper <span class="title function_">getMapper</span><span class="params">()</span> &#123;	<span class="comment">//实现getting,setting方法</span></span><br><span class="line">        <span class="keyword">return</span> mapper;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMapper</span><span class="params">(Mapper mapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mapper = mapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>属性必须要求实现getting,setting方法</li>
<li>此时的接口无需创建对象，根据刚刚的spring.xml文件自动指向对应的实现类</li>
</ul>
<p><img src="/post/spring%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cmomo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230224170715705.png" alt="image-20230224170715705"></p>
<p><strong>获取Spring容器里的对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建ClassPathXmlApplicationContext对象，导入spring.xml配置文件</span></span><br><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">classPathXmlApplicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:spring.xml&quot;</span>);</span><br><span class="line"><span class="comment">//2.获取外部配置文件，用于byName指定接口</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> MyApp.class.getResourceAsStream(<span class="string">&quot;/my.properties&quot;</span>);</span><br><span class="line">properties.load(resourceAsStream);</span><br><span class="line"><span class="type">String</span> <span class="variable">property</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;dbc.Service&quot;</span>);</span><br><span class="line"><span class="comment">//3.通过getBean方法获取实现类</span></span><br><span class="line"><span class="comment">//Service service = classPathXmlApplicationContext.getBean(Service.class);</span></span><br><span class="line"><span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> classPathXmlApplicationContext.getBean(property, Service.class);</span><br><span class="line">service.doing();</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>创建ClassPathXmlApplicationContext对象，导入spring.xml配置文件</p>
</li>
<li>
<p>通过getBean方法获取实现类</p>
<blockquote>
<p>getBean方法有两种传参方式：getBean(class&lt;T&gt;)、getBean(String name,class&lt;T&gt;)</p>
<p>对应两种取出对象方式：byType、byName</p>
<p>byType：根据类类型找到实现类，当Service接口有多个实现类，必然报错，只能用于Service接口唯一实现类的情况</p>
<p>byName：根据类类型以及类名查找实现类，适用Service接口有多个实现类，从而达到开闭原则【对修改关闭，对扩展开放】</p>
</blockquote>
</li>
<li>
<p>当Service接口有多个实现类时，可以从外部配置文件获取类名，用于byName指定接口</p>
</li>
<li>
<p>my.properties文件</p>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">dbc.Service</span>=<span class="string">serviceImplA  #此时可以通过修改外部文件来改变Service实现类</span></span><br></pre></td></tr></table></figure>
<ul>
<li>此时可以通过修改外部文件来改变Service实现类</li>
</ul>
<h3><span id="注解配置方式">注解配置方式</span></h3>
<p>spring.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans 						  http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>把类交给Spring容器</strong></p>
<ul>
<li>@Component：所有mapper实现类、Service实现类</li>
<li>@Autowired：自动属性注入，即byType方式</li>
<li>@Qualifier：配合@Autowired实现byName</li>
</ul>
<p>注意：</p>
<ul>
<li>
<p>注解方式可以不实现属性的getting,setting方法</p>
</li>
<li>
<p>注解方式不适用HttpServlet的控制子类，因为tomcat会优先于Spring，因此需要整合tomcat</p>
<p><img src="https://pic.imgdb.cn/item/63f8894ef144a0100757b815.jpg" alt></p>
</li>
</ul>
<p>以ServiceImplA为例，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceImplA</span> <span class="keyword">implements</span> <span class="title class_">Service</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;mapperImplA&quot;)</span></span><br><span class="line">    Mapper mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doing</span><span class="params">()</span> &#123;</span><br><span class="line">        mapper.doing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63f8815bf144a010074ab58a.jpg" alt></p>
<p><strong>获取Spring容器里的对象</strong></p>
<p>与xml方式一致</p>
<table>
<thead>
<tr>
<th></th>
<th>xml配置</th>
<th>注解配置</th>
</tr>
</thead>
<tbody>
<tr>
<td>Mapper有多个实现类</td>
<td>spring.xml中注入</td>
<td>@Autowired配合@Qualifier</td>
</tr>
<tr>
<td>Service有多个实现类</td>
<td>通过外部资源文件，getBean的ByName方式</td>
<td>与xml配置一致</td>
</tr>
</tbody>
</table>
<h3><span id="整合第三方依赖">整合第三方依赖</span></h3>
<p>通过&lt;bean&gt;方式把第三方类放入到|Spring进行管理，并把第三方类的对象取出使用</p>
<p><strong>导入第三方依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-context.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>application.xml配置文件（原spring.xml）</strong></p>
<p>原mybatis.xml文件会有删除</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载外部文件jdbc.properties    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> <span class="attr">ignore-resource-not-found</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--JDBC和连接池的管理 数据库连接池配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis的配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dao接口在哪【接口本身】？数据层的dao接口在哪个包    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--basePackage属性值必须是你的mapper接口目录        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.bjpowernode.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis的SqlSessionFactoryBean类交给Spring管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载mybatis mapper接口实现类文件的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载原mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63f88856f144a010075686f7.jpg" alt></p>
<h3><span id="spring环境下的单元测试">Spring环境下的单元测试</span></h3>
<p><strong>导入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-context.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- junit-jupiter-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- junit-jupiter-engine --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- junit-jupiter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- junit-jupiter-params --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-params<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- junit-vintage-engine --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- junit-platform-launcher --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-platform-launcher<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>创建单元测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:application.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StuServices stuServices;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>    <span class="comment">//必须是org.junit.jupiter.api.Test类，绝对不能是org.junit.Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">fun1</span><span class="params">()</span>&#123;</span><br><span class="line">        ArrayList&lt;Stu&gt; all = stuServices.getAll();</span><br><span class="line">        <span class="keyword">for</span> (Stu stu : all) &#123;</span><br><span class="line">            System.out.println(stu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ClassroomMapper classroomMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun2</span><span class="params">()</span>&#123;</span><br><span class="line">        ArrayList&lt;Classroom&gt; all = classroomMapper.getAll();</span><br><span class="line">        <span class="keyword">for</span> (Classroom classroom : all) &#123;</span><br><span class="line">            System.out.println(classroom);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="springmvc整合tomcat">SpringMVC整合tomcat</span></h3>
<p><strong>导入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-context.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>spring-mvc.xml配置文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描控制器包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--打开springMVC注解    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--视图解析器ViewResolver【目前解析JSP视图】 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  prefix【前缀】指的是视图放在哪个目录     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--WEB-INF为安全目录只有通过控制器的跳转才能访问【req.getRequestDispatcher】        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  suffix【后缀】指的是视图文件的扩展名     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>扫描控制器包</li>
<li>—打开springMVC注解</li>
<li>视图解析器ViewResolver【目前解析JSP视图】</li>
<li>WEB-INF为安全目录只有通过控制器的跳转才能访问【req.getRequestDispatcher】</li>
<li>prefix【前缀】指的是视图放在哪个目录</li>
<li>suffix【后缀】指的是视图文件的扩展名</li>
</ul>
<p><strong>web.xml配置文件</strong></p>
<ul>
<li>tomcat通过tomcat服务启动监听器，来启动Spring</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1——利用tomcat启动监听器，并启动Spring    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--全局变量设置Spring的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:application.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启Spring【监听器】--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>tomcat通过注册Servlet来注册SpringMVC中的DispatcherServlet</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2——springMVC本身是一个Servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--初始化springMVC，主要目的是为了加载SpringMVC的配置文件        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--服务器启动时创建核心处理器实例--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Servlet本身是在第一次请求的时候才会实例化，且只有一个对象【懒汉式（懒加载）（节约内存，但效率低）】--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在tomcat启动的时候直接Servlet实例化对象【饿汉式（耗费内存，但效率高）】--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Spring代劳做了一个字符集过滤器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--3——SpringMVC编写的过滤器，主要过滤编码--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--乱码处理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringMVC自带的CharacterEncodingFilter过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>控制器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/stu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StuController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StuServices stuServices;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;view.action&quot;)</span></span><br><span class="line">    <span class="comment">//使用org.springframework.ui.Model传递参数</span></span><br><span class="line">    <span class="keyword">public</span> String  <span class="title function_">getAll</span><span class="params">(Model model)</span>&#123;<span class="comment">//方法返回值String</span></span><br><span class="line">        ArrayList&lt;Stu&gt; all = stuServices.getAll();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;stus&quot;</span>,all);</span><br><span class="line">        <span class="comment">//1——代表跳转</span></span><br><span class="line">        <span class="comment">//2——return的字符串代表文件名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;stuView&quot;</span>;<span class="comment">//如果返回的字符串要代表重定向，可以使用redirect: return &quot;redirect:/index.html&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="controller注解">@Controller注解</span></h3>
<p>在一个类上添加@Controller注解，表明了这个类是一个控制器类。但想要让这个类成为一个处理请求的处理器光有@Controller注解是不够的，他还需要进一步修炼才能成为一个处理器。</p>
<p>1.在spring容器中创建该类的实例。创建实例的方式有两种：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;test.controller.MyController&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述这种方式是在spring容器中注入单个bean，当项目比较大，控制器类比较多时，用这种方式向Spring容器中注入bean非常的让人苦恼，索性有第二种方式。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-scan</span>=<span class="string">&quot;test.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种方式会扫描指定包中的所有类，并生成相应的bean注入到spring容器中。使用这种方式当然能够极大提高我们的开发效率，但是有时候我们不想某一类型的类注入到spring容器中。这个时候第二种方式也可以解决。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;test&quot;</span>&gt;</span>　　</span><br><span class="line">	<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述代码表示扫描test包中除有@Service注解之外的类。</p>
]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/post/servlet/</url>
    <content><![CDATA[<h2><span id="web应用目录结构">web应用目录结构</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project(Web应用程序根目录)</span><br><span class="line">src</span><br><span class="line">----- main</span><br><span class="line">--------- java</span><br><span class="line">--------- resources</span><br><span class="line">--------- webapp(视图相关文件)</span><br><span class="line">------------- WEB-INF(源代码)</span><br><span class="line">----------------- classes(编译后的Servlet类)</span><br><span class="line">--------------------- XXX.class</span><br><span class="line">--------------------- XXX.class</span><br><span class="line">----------------- lib(web应用程序需要的外部jar包)</span><br><span class="line">--------------------- XXX.jar</span><br><span class="line">--------------------- XXX.jar</span><br><span class="line">----------------- web.xml (Web应用程序配置文件)</span><br><span class="line">------------- JSP，HTML，图片等资源(放在WEB-INF外,用户只要输入资源URL就可以直接访问到)</span><br></pre></td></tr></table></figure>
<p>下图中，Servlet/JSP容器对应于如Tomcat这类程序，里面的三个框框对应于各种Servlet类的实例</p>
<p>当容器收到请求时，则会根据请求的url去调用相应的servlet类的实例的方法去处理响应该请求</p>
<p>注：在一个应用程序中，容器会为每个Servlet类生成一个实例<br>
<img src="https://pic.imgdb.cn/item/64ad17391ddac507ccbbcf38.jpg" style="zoom:67%;"></p>
<h2><span id="servlet结构">Servlet结构</span></h2>
<img src="https://pic.imgdb.cn/item/64acba0c1ddac507cc27c59d.jpg" style="zoom:67%;">
<h3><span id="servlet接口">Servlet接口</span></h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>void init(ServletConfig var1)</td>
<td>初始化在实例化后自动执行，默认首次请求该Servlet时实例化，可配置为服务器启动时实例化（避免首次请求耗时过长），且Servlet使用单例模式，只执行一次实例化、初始化</td>
</tr>
<tr>
<td>void service(ServletRequest v1,ServletResponse v2)</td>
<td>当客户端发送请求访问该Servlet时，服务器就会自动调用该方法处理请求</td>
</tr>
<tr>
<td>void destroy()</td>
<td>服务器关闭或重启时需要清空内存，将会调用该方法销毁Servlet</td>
</tr>
<tr>
<td>ServletConfig getServletConfig()</td>
<td>返回当前Servlet的ServletConfig对象</td>
</tr>
<tr>
<td>String getServletInfo()</td>
<td>返回对当前Servlet的描述</td>
</tr>
</tbody>
</table>
<p>其中init、Service和destroy是生命周期方法</p>
<h3><span id="genericservlet">GenericServlet</span></h3>
<ol>
<li>提供了Servlet接口的默认实现（除了service）</li>
<li>当我们要创建自己的Servlet时只需要继承GenericServlet类，覆盖需要改写的方法即可</li>
</ol>
<h3><span id="httpservlet">HttpServlet</span></h3>
<p><strong>继承并重写了父类GenericServlet中的service方法</strong></p>
<ol>
<li>参数(ServletRequest req, ServletResponse resp) 强制转换为 (HttpServletRequest, HttpServletResponse)</li>
<li>并调用重载的方法：service(HttpServletRequest req, HttpServletResponse  )</li>
</ol>
<p><strong>重载的Service方法</strong></p>
<ol>
<li>获取请求方式，并根据请求方式的不同执行对应的doXXX方法（doGet、doPost、doHead、doPut、doTrace、doOptions、doDelete）</li>
<li>对应的doXXX方法在自定义Servlet中继承重写，用于实际处理请求</li>
</ol>
<h2><span id="request和response结构">Request和Response结构</span></h2>
<img src="https://pic.imgdb.cn/item/64acbbc41ddac507cc2eb6e5.jpg" style="zoom:67%;">
<h3><span id="servletrequest接口">ServletRequest接口</span></h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>String getParameter(String var1)</td>
<td>获得客户端传来的参数的，即Parameter是用于客户端和服务端之间的信息传递</td>
</tr>
<tr>
<td>String[] getParameterValues(java.lang.String name)</td>
<td>返回一个包含所有的给定请求参数的值的字符串对象的向量。若该参数不存在，则返回一个空值</td>
</tr>
<tr>
<td>Object getAttribute(String var1)</td>
<td>在服务端获得另一个服务端通过setAttribute传进去的参数</td>
</tr>
<tr>
<td>void setAttribute(String var1, Object var2)</td>
<td>用于服务端之间的信息传递</td>
</tr>
<tr>
<td>void removeAttribute(String var1)</td>
<td>删除服务端中存储的数据</td>
</tr>
<tr>
<td>getRemoteAddr</td>
<td>浏览器的IP地址</td>
</tr>
<tr>
<td>getRemotePort</td>
<td>浏览器端端口号</td>
</tr>
<tr>
<td>getServerName</td>
<td>服务器名称</td>
</tr>
<tr>
<td>getServerPort</td>
<td>服务器端口号</td>
</tr>
<tr>
<td>getScheme</td>
<td>协议名称</td>
</tr>
<tr>
<td>setCharacterEncoding(String var1)</td>
<td>设置字符集编码</td>
</tr>
</tbody>
</table>
<h3><span id="servletresponse接口">ServletResponse接口</span></h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>PrintWriter getWriter()</td>
<td>获取writer（打印流），通过调用writer的print方法向response中写入内容（可识别前端代码html,css,javascript）</td>
</tr>
<tr>
<td>void setContentType(String var1)</td>
<td>设置response的内容类型，一般用于处理响应中的中文乱码现象</td>
</tr>
</tbody>
</table>
<h3><span id="httpservletrequst">HttpServletRequst</span></h3>
<p>实现ServletRequest接口，封装了http请求报文，使得我们可以不用自己去解析http报文</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>getMethod()</td>
<td>请求方式</td>
</tr>
<tr>
<td>getRequestURL</td>
<td>请求的完整路径URL</td>
</tr>
<tr>
<td>getRequestURI</td>
<td>请求的相对路径URI</td>
</tr>
</tbody>
</table>
<h3><span id="httpservletresponse">HttpServletResponse</span></h3>
<p>实现ServletResponse接口，封装了响应报文，使得我们不用自己管http协议中的许多细节</p>
<p><strong>响应状态码</strong></p>
<p>表示程序的运行状态</p>
<table>
<thead>
<tr>
<th>响应状态码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>404</td>
<td>无法通过路径找到资源文件</td>
</tr>
<tr>
<td>500</td>
<td>服务端运行发生了异常</td>
</tr>
<tr>
<td>200</td>
<td>程序运行一切正常</td>
</tr>
</tbody>
</table>
<p><strong>手动发送状态码</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>void sendError(int sc)</td>
<td>向客户端发送【sc】状态码响应错误</td>
</tr>
<tr>
<td>void sendError(<em>int</em> var1, String var2)</td>
<td>向客户端发送【var1】状态码、【var2】描述信息响应错误</td>
</tr>
</tbody>
</table>
<h2><span id="cookie和httpsession">Cookie和HttpSession</span></h2>
<h3><span id="cookie">cookie</span></h3>
<p>通过浏览器将键值对数据保存在客户端硬盘上（如商城的购物车、登录的记住密码或免登录）</p>
<p><strong>保存键值对</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.需要实例化cookie对象，需要键值对参数</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(id,name);</span><br><span class="line"><span class="comment">//2.设置cookie数据的有效时间，单位是秒</span></span><br><span class="line">cookie.setMaxAge(<span class="number">60</span>);</span><br><span class="line"><span class="comment">//3.利用响应对象将cookie数据保存在浏览器硬盘中</span></span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure>
<p><strong>查看键值对</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过请求对象获取cookie对象数组</span></span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="comment">//遍历cookies数组查看每个cookie的键值数据</span></span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">if</span> (cookies != <span class="literal">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">        System.out.println(cookie.getName());</span><br><span class="line">        System.out.println(cookie.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="httpsession">HttpSession</span></h3>
<p>可存储键值对数据（setAttribute），一般应用于登录功能</p>
<p><img src="https://pic.imgdb.cn/item/64113030ebf10e5d5374df8a.jpg" alt></p>
<ol>
<li>HttpSession对象存储在服务器中（tomcat）</li>
<li>相同客户端、相同浏览器对应一个HttpSession对象</li>
<li>一个HttpSession对象可以存储多个键值对，且在该对象中共享（即同一客户端、同一浏览器范围内共享数据）</li>
</ol>
<p><strong>生命周期</strong></p>
<ul>
<li>HttpSession对象生命周期为整个浏览器运行期间，浏览器运行结束，即浏览器关闭（所有页面关闭），HttpSession对象的生命周期结束</li>
<li>不同品牌的浏览器HttpSession对象生命周期不一样</li>
</ul>
<p><strong>实例化</strong></p>
<p>当浏览器首次使用httpSession的任意方法，服务器会自动的创建一个session对象（先创建该客户端的该浏览器的JSESSIONID并存储到浏览器的Cookies中，浏览器可以通过Cookies携带的SessionID从服务器的HttpSession对象获取键值对数据）</p>
<p>当浏览器中存储SessionID的Cookies丢失（手动删除），此时使用HttpSession任意方法，则服务器自动重新生成Session对象（重新存储JSESSIONID到新的Cookies）</p>
<p>当浏览器禁用Cookies，由于浏览器无法通过Cookies访问服务器中的HttpSession对象，则每次使用HttpSession任意方法，服务器都会重新生成Session对象（此时可通过url找到之前的HttpSession）</p>
<p><strong>客户端浏览器访问HttpSession的方式</strong></p>
<table>
<thead>
<tr>
<th>方式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>通过Cookies携带SessionID</td>
<td>默认使用Cookies</td>
</tr>
<tr>
<td>通过url携带SessionID（<code>url + &quot;;jsessionid=【sessionID】&quot;</code>）</td>
<td>与Cookies同时使用时Cookies传递优先级更高</td>
</tr>
</tbody>
</table>
<p><strong>销毁</strong></p>
<table>
<thead>
<tr>
<th>方式</th>
<th>说明</th>
<th>HttpSession</th>
</tr>
</thead>
<tbody>
<tr>
<td>浏览器关闭或手动删除Cookies</td>
<td>仅cookies销毁，浏览器无法通过之前的SessionID找到HttpSession</td>
<td>存在</td>
</tr>
<tr>
<td><code>httpSession.removeAttribute(K);</code></td>
<td>仅HttpSession中的key删除</td>
<td>存在</td>
</tr>
<tr>
<td><code>httpSession.setMaxInactiveInterval</code></td>
<td>设置过期时间(单位是秒)，HttpSession对象将被GC清除</td>
<td>销毁</td>
</tr>
<tr>
<td>服务器重启或关闭</td>
<td>tomcat重启或关闭</td>
<td>销毁</td>
</tr>
</tbody>
</table>
<p><strong>请求对象request获取HttpSession对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回关于该请求的当前会话。或者若该请求没有会话则就创建一个</span></span><br><span class="line">getSession();</span><br><span class="line"><span class="comment">//返回有关本请求的当前HttpSession，或者若该请求没有会话，且“创建”属性为真，则就创建一个</span></span><br><span class="line">getSession(<span class="type">boolean</span> create);</span><br></pre></td></tr></table></figure>
<h2><span id="其他接口">其他接口</span></h2>
<h3><span id="servletconfig接口">ServletConfig接口</span></h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>String getInitParameter(String var1)</td>
<td>获取该servlet的初始参数。初始参数以键值对的形式在注解中或者在部署描述符web.xml中设置</td>
</tr>
<tr>
<td><em>ServletContext</em> getServletContext();</td>
<td>获得该Servlet的上下文信息，返回一个ServletContext对象</td>
</tr>
<tr>
<td>void setContentType(String type)</td>
<td>处理响应中的中文乱码（代码开始处添加）</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">out.write(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;title&gt;&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;hello!!!!!!!!!!&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;/title&gt;&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;div style=&#x27;color:red;font-size:50px&#x27;&gt;helloWorld!!!!!!!&lt;/div&gt;&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;百度一下&lt;/a&gt;&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure>
<h3><span id="servletcontext接口">ServletContext接口</span></h3>
<p>整个当前的web应用程序的上下文</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>String getInitParameter(String var1)</td>
<td>相较于ServletConfig是全局范围，所有Servlet都能访问</td>
</tr>
<tr>
<td>Object getAttribute(String var1)</td>
<td>相较于ServletConfig是全局范围，所有Servlet都能访问</td>
</tr>
<tr>
<td>void setAttribute(String var1, Object var2)</td>
<td>相较于ServletConfig是全局范围，所有Servlet都能访问</td>
</tr>
</tbody>
</table>
<h2><span id="servlet配置">Servlet配置</span></h2>
<h3><span id="webxml">web.xml</span></h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>【servlet_name】<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>【servlet_class】<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--修改类实例化时间为服务器启动时,多个类在服务器启动时共同实例化时，数字越小越先实例化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>【servlet_name】<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>【servlet_path】<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3><span id="注解">注解</span></h3>
<p><strong>@WebServlet</strong></p>
<table>
<thead>
<tr>
<th>1</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>servlet类的名称，如果没有定义默认使用的是类名，servlet-name标签一致(一般不写)</td>
</tr>
<tr>
<td>urlPatterns</td>
<td>servlet类的请求名称，以/开始，不能重复，可以有多个(必须存在)</td>
</tr>
<tr>
<td>loadOnStartup</td>
<td>服务器启动时实例化该类对象(有选择使用)</td>
</tr>
</tbody>
</table>
<p>当@WebServlet只配置一个请求名称可简化属性名称，@WebServlet(urlPatterns =“/anno”)    ==&gt;     @WebServlet(“/anno”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;【servlet_name】&quot;,urlPatterns =&#123;&quot;/【servlet_path】&quot;,&quot;/【servlet_path】&quot;&#125;,loadOnStartup =1)</span></span><br><span class="line"><span class="keyword">public</span> class 【servlet_class】 <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="欢迎页面">欢迎页面</span></h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置欢迎首页，省略第一个页面的路径编写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/a.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/b.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/hello.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="会话跟踪">会话跟踪</span></h2>
<p>保存键值对参数</p>
<table>
<thead>
<tr>
<th>保存键值对方式</th>
<th>客户端请求</th>
<th>服务端接收</th>
</tr>
</thead>
<tbody>
<tr>
<td>URL重写</td>
<td>加在url地址后面，如<code>url?key1=value1&amp;key2=value2...</code></td>
<td>request.getParameter(key)</td>
</tr>
<tr>
<td>隐藏域</td>
<td>表单中的隐藏域中<code>&lt;input type='hidden' name='id' value='1'/&gt;</code></td>
<td>request.getParameter(“id”)</td>
</tr>
<tr>
<td>Cookie</td>
<td><code>Cookie cookie = new Cookie(String key, String value);</code><br><code>httpServletResponse.addCookie(cookie);</code></td>
<td><code>request.getCookies();</code><br><code>cookie.getValue;</code><br><code>cookie.getName;</code></td>
</tr>
<tr>
<td>Session</td>
<td><code>HttpSession session = request.getSession;</code><br><code>session.setAttribute(name,value);</code></td>
<td><code>HttpSession session = request.getSession;</code><br><code>session.getAttribute(name);</code></td>
</tr>
</tbody>
</table>
<p>s服务端会为每一个客户端在服务端的内存中保存一个HttpSession对象，该对象可以通过HttpServletRequest对象的getSession方法获得（若该客户端在服务端中没有对应的HttpSession对象，则调用该方法会为其创建一个；若该客户端的HttpSession对象已经存在于服务端中了，则该方法会直接返回该对象）。当服务端为该客户端在服务端内存中创建HttpSession对象时，会为该客户端生成给一个独一无二的id，并通过cookie的方式回复给该客户端（该过程无需我们管），则在之后该客户端对服务端的访问中，都会带上这个写有id的cookie，从而使得服务端可以通过该id在服务端的内存中找到与该客户端对应的session对象</p>
<table>
<thead>
<tr>
<th>不同</th>
<th>Cookie</th>
<th>Session</th>
</tr>
</thead>
<tbody>
<tr>
<td>键值对存储</td>
<td>客户端，服务端将键值对参数写进cookie后相应给客户端，让客户端保存存有键值对参数的cookie</td>
<td>服务端，服务端将键值对参数写进HttpSession对象中存在自己的内存里</td>
</tr>
<tr>
<td>说明</td>
<td>当服务端需要获取键值对参数时，需要从客户端发来的cookie中获取</td>
<td>当服务端需要获取键值对参数时，只需要从客户端获取其id，就可以从自己的内存中获取到对应的键值对参数</td>
</tr>
</tbody>
</table>
<p>对于在多个页面中跳转并保存键值对参数的情况，前两种方式存取较为复杂，而后两种方法由于将键值对保存在客户端或服务端，可直接通过客户端或服务端获取，且能较持久的保存</p>
<p><strong>当使用Post请求方式且请求参数为中文时会出现乱码现象</strong></p>
<p>请求：<code>request.setCharacterEncoding(&quot;UTF-8&quot;);</code> 设置字符编码，避免中文乱码现象</p>
<p><strong>响应参数为中文时，响应到客户端页面会出现乱码现象</strong></p>
<p>响应：<code>response.setContentType(&quot;text/html;charset=utf-8&quot;);</code> 处理响应的中文乱码</p>
<h2><span id="servlet跳转">Servlet跳转</span></h2>
<h3><span id="请求转发">请求转发</span></h3>
<img src="https://pic.imgdb.cn/item/64abcf1d1ddac507cce9ef9e.jpg" style="zoom: 50%;">
<p>服务端在执行servlet执行到这个动作时发生的跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取转发器对象,参数：目标的请求名称</span></span><br><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;【参数】&quot;</span>);</span><br><span class="line">requestDispatcher.forward(request,response);</span><br></pre></td></tr></table></figure>
<h3><span id="响应重定向">响应重定向</span></h3>
<img src="https://pic.imgdb.cn/item/64abcf331ddac507ccea4c66.jpg" style="zoom:50%;">
<p>服务端通过HttpServletResponse去回复给客户端一个url，让客户端再去发请求给这个新的url</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数：目标的请求名称</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;【参数】&quot;</span>);</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th></th>
<th>请求转发</th>
<th>响应重定向</th>
</tr>
</thead>
<tbody>
<tr>
<td>调用方法的对象</td>
<td>HttpServletRequest</td>
<td>HttpServletResponse</td>
</tr>
<tr>
<td>URL</td>
<td>转发前的路径</td>
<td>转发后的路径</td>
</tr>
<tr>
<td>客户端请求参数</td>
<td>转发与被转发的Servlet都能获取，转发前后共用一个Request</td>
<td>仅被转发的Servlet能获取</td>
</tr>
<tr>
<td>转发前存储在request作用域的键值对数据</td>
<td>只有一次请求，转发后的Servlet能获取</td>
<td>多次请求、响应，转发后的Servlet不能获取</td>
</tr>
<tr>
<td>执行顺序</td>
<td>类似方法调用，转发后仍继续执行原Servlet下行代码</td>
<td>执行完当前Servlet再重定向，即访问第二个请求</td>
</tr>
<tr>
<td>转发后的请求方式</td>
<td>转发后执行doPost</td>
<td>转发后执行doGet</td>
</tr>
<tr>
<td>执行效率</td>
<td>较高</td>
<td>较低</td>
</tr>
<tr>
<td>访问范围</td>
<td>服务器内部资源</td>
<td>任意资源路径</td>
</tr>
</tbody>
</table>
<p><strong>当执行对数据增删改操作时，应使用response.sendRedirect()</strong></p>
<p>若使用request.getRequestDispatcher().forward(request,response)，转发前后的URL不发生改变，因此对页面刷新则再次发送转发前的请求，即刷新一次页面后就修改了一条数据的原因</p>
<h2><span id="jsp">JSP</span></h2>
<p>JSP本质上时另一种形式的Servlet类，当jsp页面首次被访问时会被服务器翻译为一个Servlet实现类</p>
<p>当jsp后续被访问时，服务器会检查jsp是否改动，若改动则重新编译，否则按原来的Servlet生命周期执行</p>
<p>jsp本身包含html，也能写java</p>
<p>JSP中的内容由语法元素和模板数据两部分构成。语法元素由如&lt;% %&gt;这种类型的符号包裹。其余的内容都为模板数据。模板数据在转换成servlet时，会全部原封不动的被writer.print到response中，而语法元素部分则会被转为相应的Java代码。</p>
<h3><span id="jsp隐式对象">JSP隐式对象</span></h3>
<p>以下对象可在jsp中直接使用</p>
<table>
<thead>
<tr>
<th>对象名</th>
<th>所属类</th>
</tr>
</thead>
<tbody>
<tr>
<td>request</td>
<td>javax.servlet.http.HttpServletRequest</td>
</tr>
<tr>
<td>response</td>
<td>javax.servlet.http.HttpServletResponse</td>
</tr>
<tr>
<td>out</td>
<td>javax.servlet.jsp.JspWriter</td>
</tr>
<tr>
<td>session</td>
<td>javax.servlet.http.HttpSession</td>
</tr>
<tr>
<td>application</td>
<td>javax.servlet.ServletContext</td>
</tr>
<tr>
<td>config</td>
<td>javax.servlet.ServletConfig</td>
</tr>
<tr>
<td>pageContext</td>
<td>javax.servlet.jsp.PageContext</td>
</tr>
</tbody>
</table>
<ol>
<li>out 相当于从HttpServletResponse中获得的PrintWriter对象</li>
<li>pageContext的 getAttribute(String name, int scope)和setAttribute(String name, Object value, int scope)方法可以指定Attribute的作用范围</li>
</ol>
<table>
<thead>
<tr>
<th>scope参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>REQUEST_ SCOPE</td>
<td>HttpServletRequest中的get/setAttribute方法</td>
</tr>
<tr>
<td>SESSION_SCOPE</td>
<td>HttpSession中的get/setAttribute方法</td>
</tr>
<tr>
<td>APPLICATION_SCOPE</td>
<td>ServletContext中的get/setAttribute方法</td>
</tr>
<tr>
<td>PAGE_SCOPE</td>
<td>只是在当前页面有效</td>
</tr>
</tbody>
</table>
<h3><span id="语法元素">语法元素</span></h3>
<hr>
<h4><span id="指令">指令</span></h4>
<p><strong>page</strong></p>
<p>语法格式：<code>&lt;%@ page attr1=&quot;value1&quot; attr2=&quot;value2&quot;...%&gt;</code></p>
<p>示例：</p>
<ol>
<li><code>&lt;%@ page contentType=&quot;text/html;charset=utf-8&quot; language=&quot;java&quot; %&gt;</code> 指定响应字符集编码以及编码语言</li>
<li><code>&lt;%@ page import=&quot;java.util.ArrayList, java.util.Date&quot; errorPage=&quot;errorHandler.jsp&quot;%&gt;</code> 引入了ArrayList和Date包；指定了当前页面的errorPage（当前页面发生异常后会跳转到errorPage且那个跳转重点jsp也要用page指令声明属性isErrorPage=“True”）</li>
</ol>
<hr>
<p><strong>include</strong></p>
<p>语法格式：<code>&lt;%@ include file=&quot;【路径】&quot;%&gt;</code></p>
<p>在jsp被服务器翻译前，该指令会被【路径】所指向文件内容所替换；然后被翻译为一个Servlet实现类（url所指向的文件不会被翻译成Servlet）</p>
<hr>
<h4><span id="脚本">脚本</span></h4>
<table>
<thead>
<tr>
<th>脚本元素</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;% ... %&gt;</code></td>
<td>Java代码（局部变量、循环、选择、方法体），被服务器拼接到Servlet的service方法中</td>
</tr>
<tr>
<td><code>&lt;%! ... %&gt;</code></td>
<td>声明方法、成员变量、代码块、内部类，被服务器翻译成Servlet的成员方法、成员变量</td>
</tr>
<tr>
<td><code>&lt;%= ... %&gt;</code></td>
<td>打印流输出到浏览器显示</td>
</tr>
<tr>
<td><code>&lt;%-- ... --%&gt;</code></td>
<td>jsp注释（推荐）</td>
</tr>
<tr>
<td><code>&lt;!-- --&gt;</code></td>
<td>html注释</td>
</tr>
</tbody>
</table>
<h4><span id="动作">动作</span></h4>
<p><strong>include</strong></p>
<p>语法格式：&lt;jsp:include page=“XXX.jsp”/&gt;</p>
<p>在jsp被服务器翻译时，将不同页面分别翻译为对应的Servlet实现类，然后依次运行输出（多个Servlet实现类）</p>
<hr>
<p><strong>forward</strong></p>
<p>语法格式：&lt;jsp:forward page=“XXX.jsp”/&gt;</p>
<p>在jsp被服务器翻译时，该动作会被翻译成一个forward方法，类似于方法调用，当前jsp余下部分在XXX.jsp执行完成后执行</p>
<hr>
<p>目前推荐 在jsp页面中使用 <strong>EL</strong> 、<strong>JSTL</strong> ，替代脚本元素的使用（&lt;% … %&gt;），使得JSP中不包含Java后端代码，使得前后端能更好的解耦</p>
<h2><span id="el表达式">EL表达式</span></h2>
<p>语法：<code>$&#123;表达式&#125;</code></p>
<p>从内存中  <strong>从作用域范围最小开始</strong>  <strong>根据键检索数据</strong> 作为jsp数据（找不到则进入作用域范围更大范围检索)</p>
<p>语法： <code>$&#123;a[b]&#125;</code> 或 <code>$&#123;a.b&#125;</code></p>
<table>
<thead>
<tr>
<th>a的数据类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>List或者数组</td>
<td>b的数据类型为int，b作为索引取值，本质上调用 <code>$&#123;a.get(b)&#125;</code></td>
</tr>
<tr>
<td>Map</td>
<td>b作为键，返回值，本质上调用 <code>$&#123;a.get(&quot;b&quot;)&#125;</code></td>
</tr>
<tr>
<td>对象</td>
<td>b为对象a的属性，本质上调用 <code>$&#123;a.getB()&#125;</code></td>
</tr>
</tbody>
</table>
<p><strong>EL隐式对象</strong></p>
<p>和JSP隐式对象类似，表达式语言也有隐式对象用于访问request，response这类的对象</p>
<table>
<thead>
<tr>
<th>EL隐式对象</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>applicationScope<br>sessionScope<br>requestScope<br>pageScope</td>
<td>可以获取不同范围的Attribute</td>
<td>${applicationScope.myVar}相当于&lt;%application.getAttribute(“myVar”)%&gt;</td>
</tr>
<tr>
<td>cookie</td>
<td>可以获取当前请求中的所有cookie（用key唯一识别）</td>
<td></td>
</tr>
<tr>
<td>pageContext</td>
<td>可以获取所有JSP隐式对象</td>
<td>${pageContext.request.method}相当于&lt;%request.getMethod()%&gt;</td>
</tr>
<tr>
<td>initParam</td>
<td>可以获取当前ServletContext的初始参数</td>
<td>${initParam.key}相当于&lt;%application.getInitParameter(“key”)%&gt;</td>
</tr>
<tr>
<td>param</td>
<td>可以获取当前请求的参数</td>
<td>${param.key}相当于&lt;%request.getParameter(“key”)%&gt;</td>
</tr>
<tr>
<td>paramValues</td>
<td>与param类似，只不过value都是数组，用于获取值是数组的参数</td>
<td>${paramValues.selectedOptions[0]}表示取出selectedOptions参数的第一个值</td>
</tr>
<tr>
<td>header</td>
<td>Map，可以获取请求的头</td>
<td></td>
</tr>
</tbody>
</table>
<h2><span id="jstl">JSTL</span></h2>
<p>JSP标准标签库，JSP Standard Tag Library</p>
<ol>
<li>使用前导入jstl依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在jsp中声明</li>
</ol>
<p><code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;	</code></p>
<hr>
<p><strong>set标签</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--在当前request中set一个名字为job的attribute，并将value赋给这个attribute--%&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;job&quot;</span> scope=<span class="string">&quot;request&quot;</span> value=<span class="string">&quot;$&#123;...&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;%--相当于&lt;%request.setAttribute(<span class="string">&quot;job&quot;</span>, value)%&gt;--%&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--调用address对象的setCity方法将value的值set进去--%&gt;</span><br><span class="line">&lt;c:set target=<span class="string">&quot;$&#123;address&#125;&quot;</span> property=<span class="string">&quot;city&quot;</span> value=<span class="string">&quot;$&#123;...&#125;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>remove标签</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--删除request中job这个attribute--%&gt;</span><br><span class="line">&lt;c:remove <span class="keyword">var</span>=<span class="string">&quot;job&quot;</span> scope=<span class="string">&quot;request&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>if标签</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--如果请求参数中的user为<span class="string">&#x27;usr&#x27;</span>，password为<span class="string">&#x27;psw&#x27;</span>，则中间的JSP片段会被执行，反之被忽略--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;param.user==&#x27;usr&#x27; &amp;&amp; param.password==&#x27;psw&#x27;&#125;&quot;</span>&gt; </span><br><span class="line">    JSP segment</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--遵循的是ifelse的规则,只执行其中一条语句--%&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;requestScope.score &gt;= 90 &amp;&amp; requestScope.score &lt;= 100&#125;&quot;</span>&gt;&lt;%--表示一个条件--%&gt;</span><br><span class="line">        &lt;h2&gt;成绩等级为优秀!!!!!&lt;/h2&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;requestScope.score &gt;= 80 &amp;&amp; requestScope.score &lt; 90&#125;&quot;</span>&gt;&lt;%--表示一个条件--%&gt;</span><br><span class="line">        &lt;h2&gt;成绩等级为良好!!!!!&lt;/h2&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;requestScope.score &gt;= 70 &amp;&amp; requestScope.score &lt; 80&#125;&quot;</span>&gt;&lt;%--表示一个条件--%&gt;</span><br><span class="line">        &lt;h2&gt;成绩等级为中等!!!!!&lt;/h2&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;requestScope.score &gt;= 60 &amp;&amp; requestScope.score &lt; 70&#125;&quot;</span>&gt;&lt;%--表示一个条件--%&gt;</span><br><span class="line">        &lt;h2&gt;成绩等级为及格!!!!!&lt;/h2&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;requestScope.score &gt;= 0 &amp;&amp; requestScope.score &lt; 60&#125;&quot;</span>&gt;&lt;%--表示一个条件--%&gt;</span><br><span class="line">        &lt;h2&gt;成绩等级为不及格!!!!!&lt;/h2&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt; &lt;%--上面所有的都不成立，执行此代码--%&gt;</span><br><span class="line">        &lt;h2&gt;分数有误!!!!!&lt;/h2&gt;</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>forEach标签</strong></p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>items</td>
<td>数据源，也就是要遍历的集合容器(EL表达式结合)</td>
</tr>
<tr>
<td>var</td>
<td>自定义一个变量，这个变量自动接收每次循环从集合中获取的一个元素</td>
</tr>
<tr>
<td>varStatus</td>
<td>自定义一个变量，变量用来记录循环的运行</td>
</tr>
<tr>
<td>begin</td>
<td>varStatus属性定义变量初始值</td>
</tr>
<tr>
<td>end</td>
<td>varStatus属性定义变量结束值</td>
</tr>
<tr>
<td>step</td>
<td>varStatus属性定义变量在每次循环后的变化</td>
</tr>
</tbody>
</table>
<p>后四个属性用于自定义控制循环，map集合没有索引值，因此遍历时无法使用后四个属性</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--遍历address.phones。其中varStatus是一个LoopTagStatus类型的对象，它有一个index属性可以获得当前遍历到的索引--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.userList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt; </span><br><span class="line">    $&#123;user&#125;--------------------</span><br><span class="line">    $&#123;user.uid&#125;===&gt;</span><br><span class="line">    $&#123;user.username&#125;===&gt;</span><br><span class="line">    $&#123;user.password&#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.userList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span> varStatus=<span class="string">&quot;i&quot;</span> begin=<span class="string">&quot;0&quot;</span> end=<span class="string">&quot;30000&quot;</span> step=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">    $&#123;user&#125;--------------------</span><br><span class="line">    $&#123;user.uid&#125;===&gt;</span><br><span class="line">    $&#123;user.username&#125;===&gt;</span><br><span class="line">    $&#123;user.password&#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>综上，EL更倾向用于访问或者获取某些东西和对它们进行一些算术或逻辑运算，而JSTL则用于完成其余部分。两者共同配合使用来完成对scriplet的替代</p>
<h2><span id="监听器listener">监听器Listener</span></h2>
<p>对监听器接口进行实现并注册，便可以对当前web应用程序的某些行为进行监听</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 实现监听器接口ListenerInterface</span></span><br><span class="line"><span class="comment">//2. 通过注解WebListener进行注册（也可通过web.xml注册）</span></span><br><span class="line"><span class="meta">@WebListener</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerClass</span> <span class="keyword">implements</span> <span class="title class_">ListenerInterface</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> xxx <span class="title function_">methodA</span><span class="params">(...)</span>&#123;...&#125;</span><br><span class="line">    <span class="keyword">public</span> xxx <span class="title function_">methodB</span><span class="params">(...)</span>&#123;...&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>监听器接口</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ServletContextListener</td>
<td>当ServletContext被创建和销毁时，接口中对应的那个方法会被调用</td>
</tr>
<tr>
<td>ServletContextAttributeListener</td>
<td>当ServletContext中的Attributes被添加、删除、修改时，接口中对应的那个方法会被调用</td>
</tr>
<tr>
<td>HttpSessionListener</td>
<td>当HttpSession被创建和销毁时，接口中对应的那个方法会被调用</td>
</tr>
<tr>
<td>HttpSessionAttributeListener</td>
<td>当HttpSession中的Attributes被添加、删除、修改时，接口中对应的那个方法会被调用</td>
</tr>
<tr>
<td>ServletRequestListener</td>
<td>当ServletRequest被创建和销毁时，接口中对应的那个方法会被调用</td>
</tr>
<tr>
<td>ServletRequestAttributeListener</td>
<td>当ServletRequest中的Attributes被添加、删除、修改时，接口中对应的那个方法会被调用</td>
</tr>
</tbody>
</table>
<p>这些接口中的方法都会接收一个xxxEvent类型的对象，通过该对象可以拿到触发当前方法的对象</p>
<p>如ServletContextListener中的方法都会接收一个ServletContextEvent对象，通过该对象的getServletContext方法可以拿到触发该方法的ServletContext</p>
<p>ServletRequestListener中的方法都会接收一个ServletRequestEvent对象，通过该对象的getServletRequest方法可以拿到触发该方法的ServletRequest</p>
<h2><span id="过滤器filter">过滤器Filter</span></h2>
<p>过滤器可以对客户端的请求、响应进行拦截，在其对应Servlet执行serivce方法前做处理</p>
<p><strong>多个过滤器可以形成一个链条，不同配置方式下的过滤器链执行顺序不同</strong></p>
<table>
<thead>
<tr>
<th>web.xml</th>
<th>注解</th>
<th>两种配置都存在</th>
</tr>
</thead>
<tbody>
<tr>
<td>由filter-mapping顺序决定</td>
<td>由类名的字典顺序由小到大决定</td>
<td>先执行所有xml配置，再执行所有注解配置</td>
</tr>
</tbody>
</table>
<p>注意：过滤器链在请求过程 与 响应过程 中的处理顺序相反</p>
<p><img src="https://pic.imgdb.cn/item/64acfdf21ddac507cc4cc398.jpg" alt></p>
<h3><span id="过滤器配置">过滤器配置</span></h3>
<p><strong>web.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>XXX.XXX.XXX<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截指定路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截HTTP类型请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>dispatcher</th>
<th>拦截请求类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>REQUEST</td>
<td>拦截HTTP请求</td>
</tr>
<tr>
<td>FORWORD</td>
<td>拦截请求转发方式的请求</td>
</tr>
<tr>
<td>INCLUDE</td>
<td>拦截通过<code>request.getRequestDispatcher(&quot;&quot;).indeclude()</code>以及通过<code>&lt;jsp:include page=&quot;…&quot;&gt;</code>发出的请求</td>
</tr>
<tr>
<td>ERROR</td>
<td>拦截&lt;error - page&gt;发出的请求</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter.destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拦截并处理请求，注意参数为ServletRequest、ServletResponse，而非Servlet的HttpServletRequest、HttpServletResponse</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//1. 执行chain对象中的doFilter方法则继续运行下一个过滤器或目标程序，否则终止运行</span></span><br><span class="line">        <span class="comment">//2. chain对象的doFilter方法将过滤器分为上下两部分，方法之上的代码请求时运行，方法之下的代码响应时运行   </span></span><br><span class="line">        chain.doFilter(request,response);  <span class="comment">//放行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter.init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注解配置拦截指定路径</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/testServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain Chain)</span><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>init(FilterConfig filterConfig)</td>
<td>过滤器初始化，服务器启动时直接实例化过滤器对象，自动调用该方法</td>
</tr>
<tr>
<td>doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)</td>
<td>方法最后必须要调用FilterChain接口的doFilter(request, response)方法，用于将request继续向后传递给链条中的下一个（可能是Filter或者Servlet）进行处理</td>
</tr>
<tr>
<td>destroy()</td>
<td>过滤器销毁的方法,服务器关闭时自动销毁对象，自动调用该方法</td>
</tr>
</tbody>
</table>
<h3><span id="过滤器应用">过滤器应用</span></h3>
<ol>
<li>过滤乱码</li>
<li>限制资源访问</li>
</ol>
<h2><span id="同步与异步">同步与异步</span></h2>
<table>
<thead>
<tr>
<th></th>
<th>同步</th>
<th>异步</th>
</tr>
</thead>
<tbody>
<tr>
<td>调用某方法时</td>
<td>必须得到方法执行结果后才继续执行后续指令，否则一致等待方法执行完成（阻塞）</td>
<td>即使没有得到方法执行结果也能继续执行后续指令（调用完成后一般通过状态、通知和回调来通知调用者）</td>
</tr>
</tbody>
</table>
<h2><span id="异步处理">异步处理</span></h2>
<p>每次有请求进来时，容器会从线程池中为该请求分配一个线程来处理该请求。然而，容器中的线程池能分配的线程数是有上限的。当处理请求的程序（如service或doFilter方法）较耗时时，会导致线程无法短时间内完成并归还池中，线程池将很快耗尽，便无法接受新进来的请求</p>
<p>为了解决这个问题，可以使用异步的Servlet或Filter，使得处理请求的过程不在当前的方法（如service或doFilter方法）中进行，而是只在当前方法中新建一个线程去处理该请求，然后就结束当前方法，使得该条从容器线程池中取出的线程能很快被还回</p>
<p>可以认为只是换了个线程（不使用容器的线程池中的线程）去处理这个请求，其它完全没有区别。当新建的线程结束后，便会发回response给客户端（同非异步的过程）</p>
<p><strong>使用方法</strong></p>
<ol>
<li>
<p>在Servlet或Filter上注解为异步的（也可以通过web.xml部署）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(asyncSupported=true)</span></span><br><span class="line"><span class="meta">@WebFilter(asyncSupported=true)</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在如service、doFilter、doGet、doPost这类处理请求的方法中新建线程去处理该请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AsyncContext</span> <span class="variable">asyncContext</span> <span class="operator">=</span> request.startAsync();</span><br><span class="line">asyncContext.start(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>(asyncContext));</span><br></pre></td></tr></table></figure>
<ol>
<li>调用ServletRequest的startAsync方法获得一个AsyncContext 的实例。该实例包含了当前的ServletRequest和ServletResponse，可通过getter方法取出</li>
<li>调用AsyncContext实例的start方法并传一个Runnable实例来开启一个新线程去执行Runnable中的run方法</li>
<li>如果run方法中需要用到request，则可以把AsyncContext实例传递过去（也可以使用匿名内部类，就可以直接访问AsyncContext实例了）</li>
<li>在run方法的最后需要调用AsyncContext实例的complete()方法（用以结束当前线程）或者dispatch(String url)方法（用以将请求转发给url指定的servlet并结束当前线程）</li>
</ol>
</li>
</ol>
<h2><span id="异步监听器">异步监听器</span></h2>
<p>AsyncListener接口：当异步操作启动完毕、执行完成、执行出错、执行超时时，接口中对应的那个方法会被调用。接口中的每个方法都会接收一个AsyncEvent对象，可以从中获取到AsyncContex和当执行出错时抛出的异常</p>
<p>异步监听器的注册：在调用AsyncContext对象的start方法前，通过调用AsyncContext对象的addListener(a AsyncListener instance)方法进行注册</p>
<h2><span id="文件上传">文件上传</span></h2>
<h3><span id="前端代码">前端代码</span></h3>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;upload&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;!--显示为一个选择要上传的文件的按钮,multiple属性可选择多个文件上传--&gt;</span><br><span class="line">    Select a file &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;fieldName&quot;</span> multiple=<span class="string">&quot;multiple&quot;</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Upload&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<h3><span id="后端代码">后端代码</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/upload&quot;)</span></span><br><span class="line"><span class="comment">//为Servlet增加MultipartConfig注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取表单中文件的部分</span></span><br><span class="line">        <span class="type">Part</span> <span class="variable">part</span> <span class="operator">=</span> request.getPart(<span class="string">&quot;fieldName&quot;</span>);</span><br><span class="line">        <span class="comment">//写入硬盘</span></span><br><span class="line">        part.write(<span class="string">&quot;D:\\temp\\1.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="文件下载">文件下载</span></h2>
<ol>
<li>客户端直接访问要下载的文件的url（文件位于web应用程序目录下）</li>
<li>在servlet中将文件放进response中响应到客户端</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//若设置file-type为octet-stream，则浏览器会提示用户进行下载；若设置file-type为pdf或者图片之类的，则浏览器会直接解析显示出来</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;application/pdf&quot;</span>);</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\Temp\\1.pdf&quot;</span>);</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fileInputStream);</span><br><span class="line">    <span class="comment">//将文件通过输入流读取成二进制放进byte数组中</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[bufferedInputStream.available()];</span><br><span class="line">    bufferedInputStream.read(bytes);</span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    <span class="comment">//将byte数组中的内容通过输出流写进response中</span></span><br><span class="line">    outputStream.write(bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
  </entry>
  <entry>
    <title>super</title>
    <url>/post/super/</url>
    <content><![CDATA[<p>super	超类的</p>
<span id="more"></span>
<h2><span id="子类对象实例化过程">子类对象实例化过程</span></h2>
<ul>
<li>
<p>不断向上查找直至到达顶层父类Object，然后不断向下依次调用父类的构造器进行父特征的初始化</p>
</li>
<li>
<p>整个过程只产生了一个对象</p>
</li>
</ul>
<p>super代表的就是父特征</p>
<h2><span id="使用">使用</span></h2>
<blockquote>
<p>super()</p>
</blockquote>
<p>继承体系中,一定会调用<strong>父类的构造器</strong>初始化父特征，super()是子类构造器默认的第一行</p>
<blockquote>
<p>super.成员</p>
</blockquote>
<p>调用<strong>父类的属性和方法</strong></p>
<h3><span id="调用父类的构造器">调用父类的构造器</span></h3>
<ol>
<li>子类中所有的构造器默认都会访问父类中无参数的构造器（默认有super()）</li>
<li>若父类中没有无参数的构造器，子类构造器必须调用本类或者父类中相应的构造器。即通过this(参数列表)或者super(参数列表)语句，且必须放在构造器的首行</li>
<li>若父类中没有无参数的构造器，且子类构造器中既未显式调用父类或本类的构造器，则编译出错</li>
</ol>
<h3><span id="super大多情况可省略">super（大多情况可省略）</span></h3>
<ul>
<li>当<strong>父类和子类的属性名称相同</strong>，必须使用super.属性指定父类的属性</li>
<li>当<strong>方法重写需要调用父类的同名属性或者方法</strong>的时候,super不能省略</li>
</ul>
<h3><span id="this和super">this和super</span></h3>
<table>
<thead>
<tr>
<th>区别点</th>
<th>this</th>
<th>super</th>
</tr>
</thead>
<tbody>
<tr>
<td>访问属性</td>
<td>访问本类中的属性，如果本类没有此属性则从父类中继续查找</td>
<td>直接访问父类中的属性</td>
</tr>
<tr>
<td>调用方法</td>
<td>访问本类中的方法，如果本类没有此方法则从父类中继续查找</td>
<td>直接访问父类中的方法</td>
</tr>
<tr>
<td>调用构造器</td>
<td>调用本类构造器，必须放在构造器的首行</td>
<td>调用父类构造器，必须放在子类构造器的首行</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>内部类</title>
    <url>/post/%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<p>当一个事物的内部，有一个完整、复杂部分不能简单使用属性或者方法来描述时，且该结构只为外部事物提供服务，那么整个内部的完整结构最好使用内部类。</p>
<p>在Java中，允许一个类的定义位于另一个类的内部，该类称为内部类，被定义的类称为外部类</p>
<p>内部类一般用在定义它的类或语句块之内，在外部引用它时必须给出完整的名称。</p>
<p>内部类的名字不能与包含它的外部类类名相同；</p>
<p>内部类按照声明位置又分为成员内部类和局部内部类</p>
<span id="more"></span>
<h2><span id="成员内部类">成员内部类</span></h2>
<p>成员内部类声明在外部类的成员位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">TestPojo</span> <span class="keyword">implements</span> <span class="title class_">TestInterface</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我正在跑！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testf</span><span class="params">()</span> &#123;<span class="comment">//重写的接口方法</span></span><br><span class="line">            System.out.println(<span class="string">&quot;实现接口！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法里面调用内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.testf(); <span class="comment">// 掉用重写接口方法</span></span><br><span class="line">        b.run(); 　<span class="comment">// 调用自己的方法</span></span><br><span class="line">        b.testpojo(); <span class="comment">// 调用继承父类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// main 方法测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>() ;</span><br><span class="line">        a.test() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义了一个接口 ，方法为testf()</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TestInterface</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testf</span><span class="params">()</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义了一个普通类 方法testpojo()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestPojo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testpojo</span><span class="params">()</span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;我是简单的pojo类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现 调用内部类里面的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Textone</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        A.<span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>().<span class="keyword">new</span> <span class="title class_">B</span>() ; <span class="comment">//调用类A里面的内部类B</span></span><br><span class="line">        <span class="comment">/** 等同于 下面代码</span></span><br><span class="line"><span class="comment">        * A a = new A() ;</span></span><br><span class="line"><span class="comment">        * A.B b = a.new B() ;</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        b.testf() ; <span class="comment">// 掉用重写接口方法</span></span><br><span class="line">        b.run() ; <span class="comment">// 调用自己的方法</span></span><br><span class="line">        b.testpojo() ; <span class="comment">// 调用继承父类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="特点">特点</span></h3>
<h4><span id="作为类的成员">作为类的成员</span></h4>
<table>
<thead>
<tr>
<th>类的成员</th>
<th>成员内部类</th>
</tr>
</thead>
<tbody>
<tr>
<td>可被static、final修饰，abstract可修饰方法</td>
<td>可被static、abstract、final修饰</td>
</tr>
<tr>
<td>可被4种访问权限修饰符修饰</td>
<td>可被(public default protected private) 访问权限修饰符修饰，，类一般只能被public、default修饰</td>
</tr>
<tr>
<td>方法可直接访问类的其他成员(包括private成员)</td>
<td>实例内部类可直接访问外部类的所有成员(包括private成员)；静态内部类只能访问外部类的静态成员(类似静态方法只能访问静态成员)</td>
</tr>
<tr>
<td>存在同名成员则编译报错</td>
<td>实例内部类和外部类有同名成员，可使用<code>外部类名.this.成员名</code> 访问外部类成员；静态内部类和外部静态成员同名，使用<code>类名.静态成员名</code>访问</td>
</tr>
</tbody>
</table>
<h4><span id="作为类">作为类</span></h4>
<table>
<thead>
<tr>
<th>类</th>
<th>成员内部类</th>
</tr>
</thead>
<tbody>
<tr>
<td>类的成员</td>
<td>可定义类的所有成员（属性、方法、构造器、代码块、内部类）</td>
</tr>
<tr>
<td>创建实例对象</td>
<td>构建内部类对象（静态内部类、实例内部类构建方式不同）</td>
</tr>
<tr>
<td>编译生成字节码文件</td>
<td>编译后生成独立字节码文件(<code>外部类名$内部类名.class</code>)（也适用于局部内部类）</td>
</tr>
</tbody>
</table>
<h4><span id="静态内部类和实例内部类">静态内部类和实例内部类</span></h4>
<table>
<thead>
<tr>
<th></th>
<th>静态内部类(有static修饰)</th>
<th>实例内部类(没有static修饰)</th>
</tr>
</thead>
<tbody>
<tr>
<td>构建内部类对象</td>
<td><code>new 外部类名.内部类名()</code></td>
<td><code>new 外部类名().new 内部类名()) </code></td>
</tr>
<tr>
<td>外部类访问内部类成员</td>
<td>静态成员:<code>静态内部类完整类名.静态成员</code>实例成员：先创建静态内部类对象<code>静态内部类对象.实例成员</code></td>
<td>先创建实例内部类对象<code>实例内部类对象.成员</code></td>
</tr>
<tr>
<td>内部类访问外部来成员</td>
<td>只能访问外部类的静态成员(类似静态方法只能访问静态成员)</td>
<td>可直接访问外部类的所有成员(包括private成员)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>实例内部类中不能声明静态成员，只有在外部类或静态内部类中 才可声明static成员</td>
</tr>
</tbody>
</table>
<h4><span id="为什么实例内部类不能声明静态成员">为什么实例内部类不能声明静态成员？</span></h4>
<p>在类加载的时候，static变量就会被初始化，内部类对象在没有外部类这个对象时便生成了，这样这个成员内部类就脱离了外部类的掌控，不需要外部类的对象就可以生成内部类的对象，这与成员内部类的定义就相驳了，因为我们知道成员内部类的对象必须是现有外部类的对象才能创建</p>
<h2><span id="局部内部类">局部内部类</span></h2>
<p>局部内部类声明在外部类的方法内，类似于局部变量，有效范围在方法内</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123; <span class="comment">// 定义一个方法</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Ne</span>&#123; <span class="comment">// 定义一个方法内部类</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fle</span><span class="params">()</span>&#123; <span class="comment">// 定义方法内部类的方法</span></span><br><span class="line">            	System.out.println(<span class="string">&quot;我正在飞翔！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">     	&#125; ;</span><br><span class="line">     	<span class="keyword">new</span> <span class="title class_">Ne</span>().fle() ; <span class="comment">//调用内部类的方法</span></span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">PerTest</span>().test() ; <span class="comment">//测试</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>权限修饰符修饰：不能使用static abstract</p>
</li>
<li>
<p>字节码名称:外部类名$标号内部类名.class</p>
</li>
<li>
<p>局部内部类使用的外部局部变量会自动将该变量识别为final的</p>
</li>
</ul>
<ol>
<li>方法内部类只能在定义该内部类的方法内实例化，不可以在此方法外对其实例化</li>
</ol>
<h4><span id="方法内部类对象不能使用该内部类所在方法的非final局部变量">方法内部类对象不能使用该内部类所在方法的非final局部变量。</span></h4>
<p>因为方法的局部变量位于栈上，只存在于该方法的生命期内。当一个方法结束，其栈结构被删除，局部变量成为历史。但是该方法结束之后，在方法内创建的内部类对象可能仍然存在于堆中！例如，如果对它的引用被传递到其他某些代码，并存储在一个成员变量内。正因为不能保证局部变量的存活期和方法内部类对象的一样长，所以内部类对象不能使用它们。</p>
<h3><span id="匿名内部类匿名抽象类-匿名实现类">匿名内部类(匿名抽象类 匿名实现类)</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>)、抽象匿名内部类</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123; <span class="comment">//方法为test</span></span><br><span class="line">        <span class="type">TestA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestA</span>()&#123; <span class="comment">//实现抽象类</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">//实现抽象类的方法</span></span><br><span class="line">                System.out.println(<span class="string">&quot;我正在使用抽象匿名内部类&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; ;</span><br><span class="line">        a.run() ; <span class="comment">//调用内部类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AbstractClass</span>().test() ; <span class="comment">//测试</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个抽象类 TestA 抽象方法为run()</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">TestA</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span>)、接口匿名内部类</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAnonymous</span> &#123;</span><br><span class="line">    <span class="type">MyInterface</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterface</span>()&#123; <span class="comment">//实现接口</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123; <span class="comment">//重写MyInterface 接口方法</span></span><br><span class="line">            System.out.println(<span class="string">&quot;我正在吃饭！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">  	&#125; ;</span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ss</span><span class="params">()</span>&#123; <span class="comment">//方法ss</span></span><br><span class="line">        m.eat() ; <span class="comment">//调用重写的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    	<span class="keyword">new</span> <span class="title class_">TestAnonymous</span>().ss() ; <span class="comment">//测试</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个接口 方法为 eat</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：匿名内部类可以定义在方法内也可以定义在类的成员中，不管是那种匿名内部类都不能被外部类直接调用</p>
<h3><span id="内部类的作用">内部类的作用</span></h3>
<p>每个内部类都能独立地继承自一个(接口的)实现，所以无论外围类是否已经继承了某个(接口的)实现，对于内部类都没有影响。如果没有内部类提供的可以继承多个具体的或抽象的类的能力，一些设计与编程问题就很难解决。从这个角度看，内部类使得多重继承的解决方案变得完整。接口解决了部分问题，而内部类有效地实现了“多重继承”。</p>
<h4><span id="内部类如何实现多继承">内部类如何实现多继承</span></h4>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>vue</title>
    <url>/post/vue/</url>
    <content><![CDATA[<h2><span id="vue安装">vue安装</span></h2>
<h3><span id="cdn引入">CDN引入</span></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="下载引入">下载引入</span></h3>
<table>
<thead>
<tr>
<th>环境</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>开发环境</td>
<td><a href="https://cn.vuejs.org/js/vue.js">https://cn.vuejs.org/js/vue.js</a></td>
</tr>
<tr>
<td>生产环境</td>
<td><a href="https://cn.vuejs.org/js/vue.min.js">https://cn.vuejs.org/js/vue.min.js</a></td>
</tr>
</tbody>
</table>
<h3><span id="npm安装">NPM安装</span></h3>
<p>通过webpack和CLI的使用</p>
<h1><span id="基础语法">基础语法</span></h1>
<h2><span id="插值操作">插值操作</span></h2>
<h3><span id="mustache胡须">Mustache（胡须）</span></h3>
<p>即双大括号，插（取）值表达式，且数据是响应式更新的（双向绑定）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1. 引入vue.js--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2. 准备页面的容器，加载vue的页面内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--双大括号，是Vue提供的一种模板语法、插值表达式，将vue对象中的data数据集加载到页面中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3. 创建vue对象，关联页面中的容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建vue全局对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 加载页面容器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// data数据集封装页面展示数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="string">&quot;Vue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击“+”或“-”按钮更新页面内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1. 引入vue.js--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2. 创建vue容器，展示页面内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    计数器：&#123;&#123;count&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3. 创建vue对象，关联页面容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span>++;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span>--;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="v-once"><code>v-once</code></span></h3>
<p>该指令后面不需要跟任何表达式(比如之前的v-for后面是由跟表达式的)</p>
<p>该指令表示元素和组件(组件后面才会学习)只渲染一次，不会随着数据的改变而改变</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-once代表被当前属性渲染的内容只加载一次--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-once</span>&gt;</span>v-once : Hello &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-model代表双向绑定，将当前输入框的内容绑定为data对象中的msg属性当页面发生变化时，通过v-model双向绑定，可以将数据更新到msg属性中，从而也会影响页面中的内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="v-html"><code>v-html</code></span></h3>
<p>若从服务器请求到的数据为HTML代码，使用v-html进行输出，会对HTML代码进行解析渲染并且展示对应的内容</p>
<p>指令后通常跟data数据集中定义的HTML代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;&lt;a href=&#x27;http://www.bjpowernode.com&#x27;&gt;跳转到动力节点&lt;/a&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="v-text"><code>v-text</code></span></h3>
<p>作用和Mustache一致，但不能拼接标签中的内容</p>
<p>指令后通常跟data数据集中定义的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以文本的形式将data中的属性加载到标签体中，类似插值表达式的作用是一样的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="v-pre"><code>v-pre</code></span></h3>
<p>用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法</p>
<p>以下第一个h1元素中的内容会直接显示，第二个h1元素中会被编译解析出来对应的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将未编译的内容输出到页面中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载编译后的内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="v-cloak斗篷"><code>v-cloak（斗篷）</code></span></h3>
<p>在使用Mustache展示页面数据且网速较慢时，用户会先看到未编译的插值表达式，再看到data中对应的值（闪烁）</p>
<p>此时通过使用v-cloak指令并设置css样式可以解决</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ... </span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*!important将其优先级设置为最高，防止display属性被优先级别高的样式覆盖*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-cloak</span>&gt;</span>Hello &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="绑定属性">绑定属性</span></h2>
<h3><span id="v-bind">v-bind</span></h3>
<p>属性的动态绑定，可简写为 ：</p>
<p>用于绑定一个或多个属性值，或者向另一个组件传递props值（如图片的链接src、网站的链接href、动态绑定一些类、样式等）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.basic</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.happy</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">3px</span> solid red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.644</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">30deg</span>, yellow, pink, orange, yellow);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.sad</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">4px</span> dashed <span class="built_in">rgb</span>(<span class="number">2</span>, <span class="number">197</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.normal</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bjpowernode1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bjpowernode2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">10px</span> red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bjpowernode3</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--样式效果--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span>&gt;</span>basic样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;happy&quot;</span>&gt;</span>happy样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sad&quot;</span>&gt;</span>sad样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;normal&quot;</span>&gt;</span>normal样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bjpowernode1&quot;</span>&gt;</span>bjpowernode1样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bjpowernode2&quot;</span>&gt;</span>bjpowernode2样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bjpowernode3&quot;</span>&gt;</span>bjpowernode3样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定样式：单向绑定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;mod&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;changeMod&quot;</span>&gt;</span>v-bind动态绑定class<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;node&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;changeNode&quot;</span>&gt;</span>v-bind简写方式动态绑定class<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;blackStyle&quot;</span>&gt;</span>v-bind方式动态绑定style<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;blackStyleArr&quot;</span>&gt;</span>v-bind方式集合动态绑定style<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//创建Vue对象，全局对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//加载页面的容器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//data数据集，封装页面展示的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">mod</span>: <span class="string">&quot;normal&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">node</span>: <span class="string">&quot;bjpowernode1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">arrMod</span>: [<span class="string">&quot;happy&quot;</span>, <span class="string">&quot;sad&quot;</span>, <span class="string">&quot;normal&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">nodeMod</span>: [<span class="string">&quot;bjpowernode1&quot;</span>, <span class="string">&quot;bjpowernode2&quot;</span>, <span class="string">&quot;bjpowernode3&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">blackStyle</span>: <span class="string">&quot;color: #FF0000&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">blackStyleArr</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">backgroundColor</span>: <span class="string">&#x27;gray&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changeMod</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//获取一个0~2之间的随机数的索引值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//改变mod的属性值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">mod</span> = <span class="variable language_">this</span>.<span class="property">arrMod</span>[index];</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changeNode</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">node</span> = <span class="variable language_">this</span>.<span class="property">nodeMod</span>[index];</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="绑定class">绑定class</span></h3>
<p>如动态切换字体颜色</p>
<p><strong>对象语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--直接通过&#123;&#125;绑定一个类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;: isActive&#125;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--通过判断，传入多个值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;: isActive, &#x27;line&#x27;: isLine&#125;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--和普通的类同时存在，并不冲突--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注：如果isActive和isLine都为true，那么会有title/active/line三个类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;: isActive, &#x27;line&#x27;: isLine&#125;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--如果过于复杂，可以放在一个methods或者computed中--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注：classes是一个计算属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classes&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>数组语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用法一：直接通过&#123;&#125;绑定一个类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;active&#x27;]&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--用法二：也可以传入多个值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">“[‘active’,</span> &#x27;<span class="attr">line</span>&#x27;]&quot;&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--用法三：和普通的类同时存在，并不冲突--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注：会有title/active/line三个类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">“[‘active’,</span> &#x27;<span class="attr">line</span>&#x27;]&quot;&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--用法四：如果过于复杂，可以放在一个methods或者computed中--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注：classes是一个计算属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classes&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="绑定style">绑定style</span></h3>
<p>v-bind:style来绑定一些CSS内联样式</p>
<p>CSS属性名使用驼峰式 (camelCase) 或短横线分隔 (kebab-case) 且用单引号括起来</p>
<p><strong>对象语法</strong></p>
<p>style后面跟的是一个对象类型，对象的key是CSS属性名称，对象的value是具体赋的值，值可以来自于data中的属性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">:style=<span class="string">&quot;&#123;color: currentColor, fontSize: fontSize + &#x27;px&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>数组语法</strong></p>
<p>style后面跟的是一个数组类型多个值以，分割即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="计算属性">计算属性</span></h2>
<h3><span id="计算属性使用场景">计算属性使用场景</span></h3>
<p>假设有如下包含嵌套数组的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">author</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">            <span class="attr">books</span>: [</span><br><span class="line">                <span class="string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Vue 4 - The Mystery&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>当需要根据 <code>author</code> 是否已有一些书籍来展示不同的信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Has published books:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; author.books.length &gt; 0 ? &#x27;Yes&#x27; : &#x27;No&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>无法从该模板中直接看出结果依赖于 <code>author.books</code></li>
<li>若该模板需要执行多次计算，代码重复，且耗费较大性能</li>
</ol>
<p>因此对于<strong>描述依赖响应式状态的复杂逻辑</strong>，可以定义一个计算属性（如下中的<code>publishedBooksMessage</code>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">publishedBooksMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// `this` 指向当前组件实例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">author</span>.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27;Yes&#x27;</span> : <span class="string">&#x27;No&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Has published books:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>当计算属性所依赖的属性发生改变时，任何依赖于该计算属性的绑定将同时更新</li>
<li>反之，计算属性响应式依赖未发生改变时，计算属性都返回之前计算的结果（被缓存）</li>
</ol>
<h3><span id="计算属性的缓存">计算属性的缓存</span></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getDate()&quot;</span>&gt;</span>打印当前时间戳<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="title function_">msg</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">getDate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>无论重复点击多少次“打印当前时间戳”按钮，控制台显示的时间戳不变</p>
<p><img src="https://pic.imgdb.cn/item/64b8d84c1ddac507cc2c3388.jpg" alt></p>
<p>这是由于<code>Date.now()</code> 不是响应依赖，它跟 Vue 的数据观察系统无关。因此在访问<code>msg</code>时将发现时间戳不变</p>
<p>若需要每次访问 <code>msg</code> 时都调用 getter，可以为指定的计算属性关闭缓存：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="attr">msg</span>:&#123;</span><br><span class="line">        <span class="attr">cache</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/64b8d9fd1ddac507cc333aee.jpg" alt></p>
<ol>
<li>现在每次访问 <code>msg</code> 时，时间戳都是新的（ JavaScript 中访问）</li>
<li>**但是数据绑定仍是依赖驱动的。**若在模块中通过Mustache语法绑定计算属性 <code>&#123;&#123;example&#125;&#125;</code>，仍仅响应依赖发生变化时才更新 DOM‘</li>
</ol>
<h3><span id="计算属性setter">计算属性setter</span></h3>
<p>计算属性默认是 getter，不过在需要时也提供一个 setter</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;fullname = &#x27;李 四&#x27;&quot;</span>&gt;</span>更新fullname<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;张&quot;</span>,</span><br><span class="line">        <span class="attr">lastName</span>: <span class="string">&quot;三&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">fullName</span>: &#123;</span><br><span class="line">        <span class="comment">// getter</span></span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// setter</span></span><br><span class="line">        <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> names = newValue.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">firstName</span> = names[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">lastName</span> = names[names.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<p>现在在调用 <code>fullname = '李 四'</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会有相应更新</p>
<h2><span id="事件监听">事件监听</span></h2>
<h3><span id="事件监听使用场景">事件监听使用场景</span></h3>
<p>当需要监听用户的某个操作（点击、拖拽、键盘事件等）并触发相应的程序时，需要使用事件监听</p>
<h3><span id="v-on"><code>v-on</code></span></h3>
<p>可使用 <code>v-on</code> 指令来监听 DOM 事件，并在事件触发时执行对应的 JavaScript</p>
<p>用法：<code>v-on:click=&quot;handler&quot;</code> 或 <code>@click=&quot;handler&quot;</code>（语法糖）</p>
<p>事件处理器 (handler) 的值可以是：</p>
<p>模板编译器会通过检查 <code>v-on</code> 的值是否是合法的 <strong>JavaScript 标识符</strong>或<strong>属性访问路径</strong>来断定是何种形式的事件处理器</p>
<ol>
<li><strong>内联事件处理器</strong>：事件被触发时执行的内联 JavaScript 语句 (与 <code>onclick</code> 类似)（如 <code>foo()</code> 和 <code>count++</code>）</li>
<li><strong>方法事件处理器</strong>：一个指向组件上定义的方法的属性名或是路径（如<code>foo</code>、<code>foo.bar</code> 和 <code>foo['bar']</code>）</li>
</ol>
<h3><span id="内联事件处理器">内联事件处理器</span></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以调用方法，且可传入自定义参数或原生DOM时间（<code>$event</code> 变量或内联箭头函数）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;hello&#x27;)&quot;</span>&gt;</span>Say hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;bye&#x27;,$event)&quot;</span>&gt;</span>Say bye<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用内联箭头函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;(event) =&gt; say(&#x27;yes&#x27;, event)&quot;</span>&gt;</span>Say yes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params">message, event</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里可以访问 DOM 原生事件</span></span><br><span class="line">        <span class="keyword">if</span> (event) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">tagName</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">alert</span>(message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="方法事件处理器">方法事件处理器</span></h3>
<p>随着事件处理器的逻辑变得愈发复杂，内联代码方式变得不够灵活。因此 <code>v-on</code> 也可以接受一个方法名或对某个方法的调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- `greet` 是下面定义过的方法名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;greet&quot;</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Vue.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 方法中的 `this` 指向当前活跃的组件实例</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Hello <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>!`</span>)</span><br><span class="line">    <span class="comment">// `event` 是 DOM 原生事件</span></span><br><span class="line">    <span class="keyword">if</span> (event) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">tagName</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="事件修饰符">事件修饰符</span></h3>
<p>在处理事件时调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是很常见的。尽管我们可以直接在方法内调用，但如果方法能更专注于数据逻辑而不用去处理 DOM 事件的细节会更好。</p>
<p>为解决这一问题，Vue 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。修饰符是用 <code>.</code> 表示的指令后缀，包含以下这些：</p>
<table>
<thead>
<tr>
<th>事件修饰符</th>
<th>例子</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.stop</code></td>
<td><code>&lt;a @click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</code></td>
<td>单击事件将停止传递</td>
</tr>
<tr>
<td><code>.prevent</code></td>
<td><code>&lt;form @submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</code></td>
<td>提交事件将不再重新加载页面</td>
</tr>
<tr>
<td><code>.self</code></td>
<td><code>&lt;div @click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</code></td>
<td>仅当 event.target 是元素本身时才会触发事件处理器（子元素不处理）</td>
</tr>
<tr>
<td><code>.capture</code></td>
<td><code>&lt;div @click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</code></td>
<td>添加事件监听器时，使用 <code>capture</code> 捕获模式，指向内部元素的事件，在被内部元素处理前，先被外部处理</td>
</tr>
<tr>
<td><code>.once</code></td>
<td><code>&lt;a @click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</code></td>
<td>点击事件最多被触发一次</td>
</tr>
<tr>
<td><code>.passive</code></td>
<td><code>&lt;div @scroll.passive=&quot;onScroll&quot;&gt;...&lt;/div&gt;</code></td>
<td>滚动事件的默认行为 (scrolling) 将立即发生而非等待 <code>onScroll</code> 完成，一般用于触摸事件的监听器，可以用来[改善移动端设备的滚屏性能]</td>
</tr>
</tbody>
</table>
<ol>
<li>修饰语可以使用链式书写,<code>&lt;a @click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</code></li>
<li>也可以只有修饰符，<code>&lt;form @submit.prevent&gt;&lt;/form&gt;</code></li>
<li>使用修饰符时需要注意调用顺序，因为相关代码是以相同的顺序生成的。<code>@click.prevent.self</code> 会阻止元素及其子元素的所有点击事件的默认行为，而 <code>@click.self.prevent</code> 则只会阻止对元素本身的点击事件的默认行为。</li>
</ol>
<p>请勿同时使用 <code>.passive</code> 和 <code>.prevent</code>，因为 <code>.passive</code> 已经向浏览器表明了你<em>不想</em>阻止事件的默认行为。如果你这么做了，则 <code>.prevent</code> 会被忽略，并且浏览器会抛出警告</p>
<h3><span id="按键修饰符">按键修饰符</span></h3>
<p>监听指定的键盘按键</p>
<table>
<thead>
<tr>
<th>按键修饰符</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.enter</code></td>
</tr>
<tr>
<td><code>.tab</code></td>
</tr>
<tr>
<td><code>.delete</code> (捕获“Delete”和“Backspace”两个按键)</td>
</tr>
<tr>
<td><code>.esc</code></td>
</tr>
<tr>
<td><code>.space</code></td>
</tr>
<tr>
<td><code>.up</code></td>
</tr>
<tr>
<td><code>.down</code></td>
</tr>
<tr>
<td><code>.left</code></td>
</tr>
<tr>
<td><code>.right</code></td>
</tr>
</tbody>
</table>
<p>你可以使用以下系统按键修饰符来触发鼠标或键盘事件监听器，只有当按键被按下时才会触发。</p>
<table>
<thead>
<tr>
<th>系统按键修饰符</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.ctrl</code></td>
</tr>
<tr>
<td><code>.alt</code></td>
</tr>
<tr>
<td><code>.shift</code></td>
</tr>
<tr>
<td><code>.alt</code></td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Alt + Enter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.enter</span>=<span class="string">&quot;clear&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + 点击 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>系统按键修饰符和常规按键不同</p>
<p>与 <code>keyup</code> 事件一起使用时，该按键必须在事件发出时处于按下状态</p>
<p>换句话说，<code>keyup.ctrl</code> 只会在你仍然按住 <code>ctrl</code> 但松开了另一个键时被触发。若你单独松开 <code>ctrl</code> 键将不会触发。</p>
<h3><span id="exact修饰符">exact修饰符</span></h3>
<p><code>.exact</code> 修饰符允许控制触发一个事件所需的确定组合的系统按键修饰符。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当按下 Ctrl 时，即使同时按下 Alt 或 Shift 也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 仅当按下 Ctrl 且未按任何其他键时才会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 仅当没有按下任何系统按键时触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.exact</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="鼠标按键修饰符">鼠标按键修饰符</span></h3>
<ul>
<li><code>.left</code></li>
<li><code>.right</code></li>
<li><code>.middle</code></li>
</ul>
<h2><span id="条件判断">条件判断</span></h2>
<h3><span id="v-if"><code>v-if</code></span></h3>
<p>用于条件性地渲染一块内容。这块内容只会在<code>v-if</code>后的表达式为真值时才被渲染</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="v-else"><code>v-else</code></span></h3>
<p>为 <code>v-if</code> 添加一个“else 区块”</p>
<p>一个 <code>v-else</code> 元素必须跟在一个 <code>v-if</code> 或者 <code>v-else-if</code> 元素后面，否则它将不会被识别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;awesome = !awesome&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="v-else-if"><code>v-else-if</code></span></h3>
<p>提供的是相应于 <code>v-if</code> 的“else if 区块”。它可以连续多次重复使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;score &gt;= 90&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 80&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 70&quot;</span>&gt;</span>中等<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 60&quot;</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>和 <code>v-else</code> 类似，一个使用 <code>v-else-if</code> 的元素必须紧跟在一个 <code>v-if</code> 或一个 <code>v-else-if</code> 元素后面。</p>
<h3><span id="v-show"><code>v-show</code></span></h3>
<p>与<code>v-if</code>基本一致</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>不同之处：</p>
<ol>
<li>在 DOM 渲染中保留该元素，<code>v-show</code> 仅切换了该元素上名为 <code>display</code> 的 CSS 属性（<code>style=&quot;display: none;&quot;</code>）</li>
<li><code>v-show</code> 不支持在 <code>&lt;template&gt;</code> 元素上使用，也不能和 <code>v-else</code> 搭配使用</li>
</ol>
<h3><span id="v-if-vsv-show"><code>v-if</code> vs<code>v-show</code></span></h3>
<table>
<thead>
<tr>
<th></th>
<th><code>v-if</code></th>
<th><code>v-show</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>渲染</td>
<td>仅条件首次为“true”时才被渲染，否则不做任何操作（惰性）</td>
<td>无论初始条件如何始终会被渲染</td>
</tr>
<tr>
<td>切换</td>
<td>条件区块内的事件监听器和子组件都会被销毁与重建</td>
<td>只有 CSS <code>display</code> 属性会被切换</td>
</tr>
<tr>
<td>开销</td>
<td>更高的切换开销</td>
<td>更高的初始渲染开销</td>
</tr>
<tr>
<td>应用</td>
<td>运行时绑定条件很少改变</td>
<td>频繁切换</td>
</tr>
</tbody>
</table>
<h3><span id="v-if-和-v-for"><code>v-if</code> 和 <code>v-for</code></span></h3>
<p>不推荐的同时使用 <code>v-if</code> 和 <code>v-for</code></p>
<p>因为<code>v-if</code> 和 <code>v-for</code> 同时存在于一个元素上时，<code>v-if</code> 会首先被执行</p>
<p><img src="https://pic.imgdb.cn/item/64b901271ddac507ccc50eae.jpg" alt></p>
<h2><span id="循环遍历">循环遍历</span></h2>
<h3><span id="v-for"><code>v-for</code></span></h3>
<p>基于一个数组来渲染一个列表</p>
<p><code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据的数组，而 <code>item</code> 是迭代项的别名（也可以<code>item of items</code> ）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; item.message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    items: [&#123; message: &#x27;Foo&#x27; &#125;, &#123; message: &#x27;Bar&#x27; &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以完整地访问父作用域内的属性和变量。也支持使用可选的第二个参数表示当前项的位置索引</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">parentMessage</span>: <span class="string">&#x27;Parent&#x27;</span>,</span><br><span class="line">    <span class="attr">items</span>: [&#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;, &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="多层嵌套">多层嵌套</span></h3>
<p>作用域和函数的作用域很类似,每个 <code>v-for</code> 作用域都可以访问到父级作用域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;childItem in item.children&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.message &#125;&#125; &#123;&#123; childItem &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="遍历对象">遍历对象</span></h3>
<p>遍历一个对象的所有属性。遍历的顺序会基于对该对象调用 <code>Object.keys()</code> 的返回值来决定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in myObject&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; value &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">myObject</span>: &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;How to do lists in Vue&#x27;</span>,</span><br><span class="line">            <span class="attr">author</span>: <span class="string">&#x27;Jane Doe&#x27;</span>,</span><br><span class="line">            <span class="attr">publishedAt</span>: <span class="string">&#x27;2016-04-10&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提供第二个参数表示属性名 (例如 key)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in myObject&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第三个参数表示位置索引</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key, index) in myObject&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="遍历整数值">遍历整数值</span></h3>
<p>基于 <code>1...n</code> 的取值范围重复多次</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;n in 10&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此处 <code>n</code> 的初值是从 <code>1</code> 开始而非 <code>0</code></p>
<h3><span id="lttemplategt-上的-v-for"><code>&lt;template&gt;</code> 上的 <code>v-for</code></span></h3>
<p>可以在 <code>&lt;template&gt;</code> 标签上使用 <code>v-for</code> 来渲染一个包含多个元素的块</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="通过-key-管理状态">通过 key 管理状态</span></h3>
<p>将key值相同的虚拟dom进行对比</p>
<p>若新生成的虚拟dom与旧的虚拟dom一致，则直接沿用之前生成的真实dom</p>
<p>若不一致，则生成新的虚拟dom</p>
<p><img src="https://pic.imgdb.cn/item/64b935bb1ddac507cc7c6aaf.jpg" alt></p>
<p>Vue 默认按照“就地更新”的策略来更新通过 <code>v-for</code> 渲染的元素列表。当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新每个元素，确保它们在原本指定的索引位置上渲染</p>
<p>默认模式是高效的，但<strong>只适用于列表渲染输出的结果不依赖子组件状态或者临时 DOM 状态 (例如表单输入值) 的情况</strong>。</p>
<p>为了给 Vue 一个提示，以便它可以跟踪每个节点的标识，从而重用和重新排序现有的元素，你需要为每个元素对应的块提供一个唯一的 <code>key</code> attribute：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">  &lt;!-- 内容 --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>当你使用 <code>&lt;template v-for&gt;</code> 时，<code>key</code> 应该被放置在这个 <code>&lt;template&gt;</code> 容器上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template v-for=&quot;todo in todos&quot; :key=&quot;todo.name&quot;&gt;</span><br><span class="line">  &lt;li&gt;&#123;&#123; todo.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>注意</p>
<p><code>key</code> 在这里是一个通过 <code>v-bind</code> 绑定的特殊 attribute。请不要和<a href="https://cn.vuejs.org/guide/essentials/list.html#v-for-with-an-object">在 <code>v-for</code> 中使用对象</a>里所提到的对象属性名相混淆。</p>
<p><a href="https://cn.vuejs.org/style-guide/rules-essential.html#use-keyed-v-for">推荐</a>在任何可行的时候为 <code>v-for</code> 提供一个 <code>key</code> attribute，除非所迭代的 DOM 内容非常简单 (例如：不包含组件或有状态的 DOM 元素)，或者你想有意采用默认行为来提高性能。</p>
<p><code>key</code> 绑定的值期望是一个基础类型的值，例如字符串或 number 类型。不要用对象作为 <code>v-for</code> 的 key。关于 <code>key</code> attribute 的更多用途细节，请参阅 <a href="https://cn.vuejs.org/api/built-in-special-attributes.html#key"><code>key</code> API 文档</a>。</p>
<h3><span id="组件上使用-v-for">组件上使用 <code>v-for</code></span></h3>
<p>组件上使用 <code>v-for</code>和在一般的元素上使用没有区别 (别忘记提供一个 <code>key</code>)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是，这不会自动将任何数据传递给组件，因为组件有自己独立的作用域。为了将迭代后的数据传递到组件中，我们还需要传递 props</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<p>不自动将 <code>item</code> 注入组件的原因是，这会使组件与 <code>v-for</code> 的工作方式紧密耦合。明确其数据的来源可以使组件在其他情况下重用。</p>
<h3><span id="数组变化侦测">数组变化侦测</span></h3>
<h4><span id="变更方法">变更方法</span></h4>
<p>Vue 能够侦听响应式数组的变更方法，并在它们被调用时触发相关的更新</p>
<ul>
<li><code>push()</code></li>
<li><code>pop()</code></li>
<li><code>shift()</code></li>
<li><code>unshift()</code></li>
<li><code>splice()</code></li>
<li><code>sort()</code></li>
<li><code>reverse()</code></li>
</ul>
<h4><span id="替换一个数组">替换一个数组</span></h4>
<p>变更方法，顾名思义，就是会对调用它们的原数组进行变更。相对地，也有一些不可变 (immutable) 方法，例如 <code>filter()</code>，<code>concat()</code> 和 <code>slice()</code>，这些都不会更改原数组，而总是<strong>返回一个新数组</strong>。当遇到的是非变更方法时，我们需要将旧的数组替换为新的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.items = this.items.filter((item) =&gt; item.message.match(/Foo/))</span><br></pre></td></tr></table></figure>
<p>你可能认为这将导致 Vue 丢弃现有的 DOM 并重新渲染整个列表——幸运的是，情况并非如此。Vue 实现了一些巧妙的方法来最大化对 DOM 元素的重用，因此用另一个包含部分重叠对象的数组来做替换，仍会是一种非常高效的操作</p>
<h3><span id="展示过滤或排序后的结果">展示过滤或排序后的结果</span></h3>
<p>有时，我们希望显示数组经过过滤或排序后的内容，而不实际变更或重置原始数据。在这种情况下，你可以创建返回已过滤或已排序数组的计算属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">numbers</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">evenNumbers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">numbers</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">n</span> =&gt;</span> n % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;n in evenNumbers&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在计算属性不可行的情况下 (例如在多层嵌套的 <code>v-for</code> 循环中)，你可以使用以下方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">sets</span>: [[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">even</span>(<span class="params">numbers</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> numbers.<span class="title function_">filter</span>(<span class="function"><span class="params">number</span> =&gt;</span> number % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;numbers in sets&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;n in even(numbers)&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在计算属性中使用 <code>reverse()</code> 和 <code>sort()</code> 的时候务必小心！这两个方法将变更原始数组，计算函数中不应该这么做。请在调用这些方法之前创建一个原数组的副本：</p>
<p>diff</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- return numbers.reverse()</span><br><span class="line">+ return [...numbers].reverse()</span><br></pre></td></tr></table></figure>
<h2><span id="阶段案例">阶段案例</span></h2>
<h2><span id="v-model">v-model</span></h2>
<h2><span id="vue生命周期">Vue生命周期</span></h2>
<p><img src="https://pic.imgdb.cn/item/64b790b91ddac507cc4d7756.jpg" alt></p>
]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1><span id="单例模式">单例模式</span></h1>
<p>保证整个系统中一个类只有一个对象的实例，实现这种功能的方式就叫单例模式</p>
<ol>
<li>构造私有: 如果要保证一个类不能多次被实例化，那么我肯定要阻止对象被new 出来，所以需要把 类的所有构造方法私有化。</li>
<li>以静态方法返回实例。 因为外界就不能通过new来获得对象，所以我们要通过提供类的方法来让外界获取对象实例。</li>
<li>确保对象实例只有一个。 只对类进行一次实例化，以后都直接获取第一次实例化的对象。</li>
</ol>
<h2><span id="懒汉模式">懒汉模式</span></h2>
<p>先不创建类的对象实例，等你需要的时候我再创建，线程不安全 节省资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstence</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="literal">null</span>)&#123;</span><br><span class="line">            s = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="饿汉模式">饿汉模式</span></h2>
<p>我先把对象（面包）创建好，等我要用（吃）的直接直接来拿就行了，浪费资源  线程安全</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>要求</strong></p>
<ul>
<li>掌握五种单例模式的实现方式</li>
<li>理解为何 DCL 实现时要使用 volatile 修饰静态变量</li>
<li>了解 jdk 中用到单例的场景</li>
</ul>
<p><strong>饿汉式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton1</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;单例对象不能重复创建&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton1</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton1</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>构造方法抛出异常是防止反射破坏单例</li>
<li><code>readResolve()</code> 是防止反序列化破坏单例</li>
</ul>
<p><strong>枚举饿汉式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>枚举饿汉式能天然防止反射、反序列化破坏单例</li>
</ul>
<p><strong>懒汉式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton3</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton3()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton3</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Singleton3.class</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton3 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton3</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>其实只有首次创建单例对象时才需要同步，但该代码实际上每次调用都会同步</li>
<li>因此有了下面的双检锁改进</li>
</ul>
<p><strong>双检锁懒汉式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton4</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton4()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton4</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 可见性，有序性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton4.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton4</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为何必须加 volatile：</p>
<ul>
<li><code>INSTANCE = new Singleton4()</code> 不是原子的，分成 3 步：创建对象、调用构造、给静态变量赋值，其中后两步可能被指令重排序优化，变成先赋值、再调用构造</li>
<li>如果线程1 先执行了赋值，线程2 执行到第一个 <code>INSTANCE == null</code> 时发现 INSTANCE 已经不为 null，此时就会返回一个未完全构造的对象</li>
</ul>
<p><strong>内部类懒汉式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton5</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton5()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Holder</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">Singleton5</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton5</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Holder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>避免了双检锁的缺点</li>
</ul>
<p><strong>JDK 中单例的体现</strong></p>
<ul>
<li>Runtime 体现了饿汉式单例</li>
<li>Console 体现了双检锁懒汉式单例</li>
<li>Collections 中的 EmptyNavigableSet 内部类懒汉式单例</li>
<li>ReverseComparator.REVERSE_ORDER 内部类懒汉式单例</li>
<li>Comparators.NaturalOrderComparator.INSTANCE 枚举饿汉式单例</li>
</ul>
]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
  </entry>
  <entry>
    <title>反射</title>
    <url>/post/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<p>可以通过动态的方式完成一个类的操作，称之为是反射的方式。</p>
<p>正常方式：<br>
new关键字实例化一个对象，通过对象调用类中的方法，属性<br>
反射方式：<br>
还是针对一个类操作，实例化，调用类中的方法，属性。</p>
<p>如果需要学习反射的使用，需要从java.lang.Class类开始，Class类是反射的源头,程序中任何一个类的执行，JVM都会自动创建一个Class对象，对象中记录运行的类中的所有的内容，</p>
<p>正常方式操作的是运行类的本身；<br>
反射方式操作的是Class对象中的内容。</p>
<p>认识并使用Class，获取一个Class对象</p>
<h1><span id="反射方式获取class对象">反射方式获取class对象</span></h1>
<h2><span id="通过类名">通过类名</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Student&gt; studentClass1 = Student.class;</span><br><span class="line"><span class="comment">//8种基本数据类型都会存在一个对应的Class对象</span></span><br><span class="line">Class&lt;Integer&gt; integerClass = <span class="type">int</span>.class;</span><br><span class="line">Class&lt;Double&gt; doubleClass = <span class="type">double</span>.class;</span><br><span class="line">Class&lt;String&gt; stringClass = String.class;</span><br><span class="line"><span class="comment">//void关键字存在对应的Class对象</span></span><br><span class="line">Class&lt;Void&gt; voidClass = <span class="keyword">void</span>.class;</span><br></pre></td></tr></table></figure>
<h2><span id="通过classfornamequot类的全限定名quot">通过<code>Class.forName(&quot;类的全限定名&quot;)</code></span></h2>
<p>类的全限定名即包名+类名，该方式只能针对类进行操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Student&gt; studentClass2 =(Class&lt;Student&gt;)Class.forName(<span class="string">&quot;com.bjpowernode.beans.Student&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2><span id="通过对象">通过对象</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Student</span>&gt; studentClass3 = student.getClass();<span class="comment">//泛型的上限</span></span><br><span class="line">Class&lt;? <span class="built_in">super</span> Student&gt; studentClass3 = student.getClass();<span class="comment">//泛型的下限 所有Student的父类</span></span><br></pre></td></tr></table></figure>
<h2><span id="通过类的加载器">通过类的加载器</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">Class&lt;Student&gt; studentClass4 = (Class&lt;Student&gt;)systemClassLoader.loadClass(<span class="string">&quot;com.bjpowernode.beans.Student&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1><span id="反射的应用">反射的应用</span></h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Student&gt; studentClass = Student.class;</span><br></pre></td></tr></table></figure>
<h2><span id="实例化目标对象">实例化目标对象</span></h2>
<p>默认调用目标类中的公共的无参数的构造方法进行实例化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用默认的规则实例化目标对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> studentClass.newInstance(); </span><br></pre></td></tr></table></figure>
<p>可以打印实例化的对象或打印实例化对象的哈希码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(student1);	<span class="comment">//Student&#123;id=0, name=&#x27;null&#x27;, age=0&#125;</span></span><br><span class="line">System.out.println(student1.hashCode());	<span class="comment">//1163157884</span></span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> studentClass.newInstance();</span><br><span class="line">System.out.println(student2);	<span class="comment">//Student&#123;id=0, name=&#x27;null&#x27;, age=0&#125;</span></span><br><span class="line">System.out.println(student2.hashCode());	<span class="comment">//460141958</span></span><br><span class="line"></span><br><span class="line">System.out.println(student1 == student2);	<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>从上述例子可以看出，两次获取的实例化对象哈希码不同，说明两次创建了不同的对象</p>
<p>通过反射实例化的对象，调用该对象的属性和方法不再是通过反射的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> student2.getName();</span><br><span class="line">System.out.println(name);</span><br></pre></td></tr></table></figure>
<p>可使用目标类中的任意一个构造方法实例化对象</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Constructor<t> getConstructor(Class&lt;?&gt;… parameterTypes)</t></td>
<td>返回一个 Constructor 对象，它反映此 Class 对象所表示的类的<strong>指定公共构造方法</strong>（可以使含参构造）。</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getConstructors()</td>
<td>返回一个包含某些 Constructor 对象的数组，这些对象反映此 Class 对象所表示的类的<strong>所有公共构造方法</strong>。</td>
</tr>
<tr>
<td>Constructor<t> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</t></td>
<td>返回一个 Constructor 对象，该对象反映此 Class 对象所表示的类<strong>或接口的指定构造方法</strong>（可以使含参构造）。</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td>
<td>返回 Constructor 对象的一个数组，这些对象反映此 Class 对象表示的类<strong>声明的所有构造方法</strong>。</td>
</tr>
</tbody>
</table>
<h2><span id="获取公共构造方法">获取公共构造方法</span></h2>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取Student类中的无参数构造构造方法对象</span></span><br><span class="line">Constructor&lt;Student&gt; constructor1 = studentClass.getConstructor();</span><br><span class="line"><span class="comment">//获取Student类中的有参数构造构造方法对象</span></span><br><span class="line">Constructor&lt;Student&gt; constructor2 = studentClass.getConstructor(<span class="type">int</span>.class,String.class,<span class="type">int</span>.class);</span><br><span class="line"><span class="comment">//通过构造器对象创建Student对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> constructor1.newInstance();</span><br><span class="line"><span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> constructor2.newInstance(<span class="number">123</span>, <span class="string">&quot;小明11&quot;</span>, <span class="number">13</span>);</span><br><span class="line">System.out.println(student2);</span><br></pre></td></tr></table></figure>
<h2><span id="获取私有构造方法了解">获取私有构造方法（了解）</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取指定单个构造方法可以是无参的也可以是有参的</span></span><br><span class="line">Constructor&lt;Student&gt; declaredConstructor1 = studentClass.getDeclaredConstructor();</span><br><span class="line">Constructor&lt;Student&gt; declaredConstructor2 = studentClass.getDeclaredConstructor(<span class="type">int</span>.class,String.class,<span class="type">int</span>.class);</span><br><span class="line"><span class="comment">//设置私有化内容可用</span></span><br><span class="line"><span class="comment">//若不设置，则发生异常：Class com.bjpowernode.Demo03 can not access a member of class com.bjpowernode.beans.Student with modifiers &quot;private&quot;</span></span><br><span class="line">declaredConstructor1.setAccessible(<span class="literal">true</span>); <span class="comment">//此种写法改变java中面向对象中的一些规则，此种情况称之为反射攻击</span></span><br><span class="line">declaredConstructor2.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> declaredConstructor1.newInstance();</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> declaredConstructor2.newInstance(<span class="number">123</span>, <span class="string">&quot;小明11&quot;</span>, <span class="number">13</span>);</span><br><span class="line">System.out.println(student);	<span class="comment">//Student&#123;id=0, name=&#x27;null&#x27;, age=0&#125;</span></span><br><span class="line">System.out.println(student);	<span class="comment">//Student&#123;id=123, name=&#x27;小明11&#x27;, age=13&#125;</span></span><br></pre></td></tr></table></figure>
<h2><span id="获取类的属性">获取类的属性</span></h2>
]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>变量</title>
    <url>/post/%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h1><span id="引言">引言</span></h1>
<p>由于变量能够把程序中准备使用的每一段数据都赋给一个简短、易于记忆的名字，因此它们十分有用。变量可以保存程序运行时用户输入的数据、特定运算的结果以及要在窗体上显示的一段数据等。简而言之，变量是用于跟踪几乎所有类型信息的简单工具。</p>
<span id="more"></span>
<h1><span id="数据">数据</span></h1>
<p>字面量即数据</p>
<h2><span id="数据类型">数据类型</span></h2>
<h1><span id="变量">变量</span></h1>
<h2><span id="变量使用">变量使用</span></h2>
<h3><span id="声明变量">声明变量</span></h3>
<p>int var;</p>
<h3><span id="变量的赋值">变量的赋值</span></h3>
<p>var = 10;</p>
<h3><span id="声明和赋值变量">声明和赋值变量</span></h3>
<p>int var = 10; （数据类型，存储范围）</p>
<ul>
<li>Java可以在一行声明多个变量,例如: int a,b,c; long a,b,c=100</li>
<li>局部变量声明后必须赋值才能使用</li>
</ul>
<h3><span id="变量的作用域局部变量">变量的作用域（局部变量）</span></h3>
<p>变量的作用域在前后花括号{}之间，作用域外相当于没有声明过该变量</p>
<p>作用域内只能有一个同名变量</p>
<h2><span id="变量分类">变量分类</span></h2>
<p>变量可按照声明位置、数据类型分类</p>
<h3><span id="按声明位置">按声明位置</span></h3>
<ul>
<li>在方法体外，类体内声明的变量称为成员变量。</li>
<li>在方法体内部声明的变量称为局部变量。</li>
<li>二者都有生命周期，但局部变量除形参外，需初始化。</li>
</ul>
<h3><span id="按数据类型">按数据类型</span></h3>
<p>变量的类型必须与数据的类型一致</p>
<img src="https://pic.imgdb.cn/item/639332ffb1fccdcd36247b54.png" alt="数据类型" style="zoom: 67%;">
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>基本数据类型与包装类</title>
    <url>/post/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8C%85%E8%A3%85%E7%B1%BB/</url>
    <content><![CDATA[<p>赋值变量的过程中，不仅需要注意变量类型与数据类型是否一致，还需观察数据大小是否在数据类型的范围中。所以灵活使用数据类型能使我们更好的运用数据，根据数值大小将变量分配在合理的类型范围中，能有效减少存储空间。</p>
<p>针对八种基本数据类型定义相应的引用类型—包装类</p>
<p>首先,Java语言是一个面向对象的语言,但是Java中的基本数据类型却是不面向对象的，为了实现一 切皆对象,将每个基本数据类型设计一个对应的类进行代表，这种方式增强了Java面向对象的性质。</p>
<p>其次，如果仅仅有基本数据类型，那么在实际使用时将存在很多的不便，很多地方都需要使用对象。比如，在集合类中，我们是无法将int 、double等类型放进去的，因为集合的容器要求元素是Object类型。而包装类型的存在使得向集合中传入数值成为可能，包装类的存在弥补了基本数据类型的不足。</p>
<p>此外，包装类还为基本类型添加了属性和方法，丰富了基本类型的操作。如当我们想知道int取值 范围的最小值，我们需要通过运算，如下面所示，但是有了包装类，我们可以直接使Integer.MAX_VALUE即可。</p>
<p>注意:为什么要保留基本数据类型？Java种创建的对象都是存储在堆里的，使用的时候需要通过栈中的引用， 所以常用的基本数据类型，不需要使用new在堆上创建，而是直接在栈内存中存储不创建对象，就会比较高效。</p>
<span id="more"></span>
<h1><span id="基本数据类型">基本数据类型</span></h1>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">占用字节</th>
<th style="text-align:center">表数范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">byte</td>
<td style="text-align:center">1</td>
<td style="text-align:center">-128~127(-2<sup>7</sup> ~2<sup>7</sup> -1 )</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">2</td>
<td style="text-align:center">-32768~32767(-2<sup>15</sup> ~ 2<sup>15</sup>-1 )</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center"><strong>4</strong></td>
<td style="text-align:center">约21亿(-2<sup>31</sup> ~ 2<sup>31</sup> -1)</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">8</td>
<td style="text-align:center">-2<sup>63</sup> ~ 2<sup>63</sup> -1</td>
</tr>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">4</td>
<td style="text-align:center">范围大于long(-3.403E38 ~ 3.403E38)</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">8</td>
<td style="text-align:center">-1.798E308 ~ 1.798E308</td>
</tr>
<tr>
<td style="text-align:center">boolean</td>
<td style="text-align:center">1</td>
<td style="text-align:center">true,false</td>
</tr>
<tr>
<td style="text-align:center">char</td>
<td style="text-align:center">2</td>
<td style="text-align:center">0~65535</td>
</tr>
</tbody>
</table>
<p><strong>byte</strong></p>
<ul>
<li>byte类型占用1个字节（B）即8位（bit），一共可以表示2的八次方个数即256个，其中首位为符号位，因此可以表示最大最小的数分别为：0111 1111(127)、1111 1111(-127)，从-127到127只有255个数，其中还有1000 0000（-0）表示成-128</li>
</ul>
<p><strong>float、double</strong></p>
<ul>
<li>浮点类型不能精确表示数据</li>
<li>浮点类型表数范围大于long类型，3.404*10<sup>38</sup>&gt;8<sup>38</sup>&gt;2<sup>114</sup>&gt;2<sup>63</sup>-1</li>
</ul>
<p><strong>boolean</strong></p>
<p>boolean类型数据不能参与运算，不过Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都 使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。</p>
<p><strong>char</strong></p>
<p>三种表示：</p>
<ol>
<li>
<p>单引号括起的单个字符 ‘a’</p>
</li>
<li>
<p>转义字符： \</p>
<blockquote>
<p>Java中存在一些无法直接表示的特殊字符，如：换行(\n),	Unicode编码(\u4e2d)</p>
</blockquote>
</li>
<li>
<p>直接使用Unicode编码’\u000a’</p>
</li>
</ol>
<p><strong>使用转义字符来表示这些特殊的字符,那么如何输出“\”本身呢？</strong></p>
<ul>
<li>
<p>“\”本身由“\\”表示,同理“\\”由“\\\\”表示，“\u”由“\\u”表示，将“\\”看作一个整体</p>
</li>
<li>
<p>如果出现“\\\”多出一个转义字符无法形成新的整体，则会报错</p>
</li>
</ul>
<h2><span id="基本数据类型的转换">基本数据类型的转换</span></h2>
<ul>
<li>自动转换：表数范围小的数据类型变量转换成表述范围大的数据类型变量（小水杯的水倒入大水桶，水不会溢出）</li>
<li>强制转换：表数范围大的数据类型变量转换成表述范围小的数据类型变量（小水杯中的水可能无法装下大水桶中的水，即发生数据溢出）</li>
</ul>
<h2><span id="字面量的类型">字面量的类型</span></h2>
<ul>
<li>整数
<ol>
<li>默认为int类型</li>
<li>L结尾为long类型，建议大写，小写不好区分</li>
</ol>
</li>
<li>小数
<ol>
<li>默认为double类型</li>
<li>F或f结尾为float类型</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1000</span>; <span class="comment">//int类型</span></span><br><span class="line"><span class="number">3300L</span>; <span class="comment">//long类型</span></span><br><span class="line"><span class="number">123.56f</span>;<span class="comment">//float类型</span></span><br><span class="line"><span class="number">3.14</span>;<span class="comment">//double类型</span></span><br></pre></td></tr></table></figure>
<h2><span id="字面量赋值">字面量赋值</span></h2>
<ol>
<li>
<p>字面量类型必须与变量类型匹配或能自动转换成变量类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1.0</span>;	<span class="comment">//报错</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="number">1.0</span>;	<span class="comment">//报错</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">1.0</span>;	<span class="comment">//报错</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">1L</span>;	<span class="comment">//报错</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>字面量大小必须在自身类型表数范围内</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">ii</span> <span class="operator">=</span> Integer.MAX_VALUE;<span class="comment">//2147483647</span></span><br><span class="line"><span class="type">int</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="number">2147483648</span>;	<span class="comment">//报错</span></span><br><span class="line"><span class="type">long</span> <span class="variable">ll</span> <span class="operator">=</span> <span class="number">2147483648</span>;	<span class="comment">//报错</span></span><br><span class="line"><span class="type">long</span> <span class="variable">ll</span> <span class="operator">=</span> Long.MAX_VALUE;<span class="comment">//9223372036854775807</span></span><br><span class="line"><span class="type">long</span> <span class="variable">ll</span> <span class="operator">=</span> <span class="number">9223372036854775808L</span>;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>特殊地，对于<strong>byte、short、char</strong>，虽然字面量类型不能自动转换成变量类型，但只需要字面量大小在变量类型的表述范围内则合法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">56</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">1</span> + <span class="number">2</span>; 	<span class="comment">//字面量使用+运算符会在编译期间直接对值相加</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>为什么在变量赋值中将整数类型的变量赋值给byte、short、char会报错</strong>（变量在它们的表数范围内）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> i;   <span class="comment">//报错</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在编译过程中，如果赋值的是常数，JVM能直接判断是否在表数范围内，确定不会溢出数据后进行强行数据类型转换；</li>
<li>而变量在程序执行过程中可能发生变化，无法直接判断变量中的值是否在表数范围内，从而报错</li>
</ol>
<h2><span id="多种基本数据类型运算">多种基本数据类型运算</span></h2>
<ol>
<li>
<p>JVM会将所有数据类型转换成运算过程中表数范围最大的类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">x1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">x2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">x3</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">x4</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">x5</span> <span class="operator">=</span> <span class="number">1.0f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> x1 + x2 + x3 + x4 + x5 + x6;	<span class="comment">//x1、x2、x3、x4、x5相加，因此至少需要用float类型接收</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>byte、short、charr之间不会相互转换，他们三者在计算时首先转换为int类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">x7</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> x1 + x2 + x7;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>乘除法同样符合上述</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1.0</span>*x3;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>难点</strong>(byte、short、char)</p>
<ol>
<li>
<p><code>short s1 = 1;	</code></p>
<p>编译正确：int字面量若在short范围内,则可以再编译时强行转换成short</p>
</li>
<li>
<p><code>short s2 = s1 + 1;	</code></p>
<p>编译错误：即使等式右边结果在short范围内，由于有变量的存在（不确定），也无法在编译时强行转换成short</p>
</li>
<li>
<p><code>s1 = s1 + 1;</code></p>
<p>编译错误：可以将上述代码拆分成两步：</p>
<ol>
<li><code>short result = s + 1;</code></li>
<li><code>short s = result;</code></li>
</ol>
<p>由于赋值中存在变量，即使等式右边结果在short范围内，也无法在编译时强行转换成short，同2</p>
</li>
<li>
<p><code>s1 += 1;</code></p>
<p>编译正确：此时不不等于s1=s1+1，而等于s1=(short)(s1+1)，JVM会自动采用i2s指令，强行转换成short</p>
</li>
</ol>
<h2><span id="总结">总结</span></h2>
<h3><span id="字面量赋值">字面量赋值</span></h3>
<ol>
<li>先观察字面量<strong>类型</strong>，观察是否超过<strong>字面量类型表数范围</strong></li>
<li>字面量为常数且int类型时，被赋值变量类型为<strong>byte、short、char</strong>，字面量大小在byte、short、char的表数范围内，则可以直接赋值</li>
<li>表数范围小的类型可以赋值给表数范围大的类型（自动转换），反之报错</li>
</ol>
<h3><span id="多种类型变量运算">多种类型变量运算</span></h3>
<ol>
<li>byte、short、char三者在计算时首先转换为int类型</li>
<li>观察等号右边的最大表数范围的数据类型是否小于左边变量类型的表数范围</li>
<li>乘除法同样符合上述规则</li>
</ol>
<h1><span id="包装类">包装类</span></h1>
<table>
<thead>
<tr>
<th>基本数据类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
</tbody>
</table>
<h2><span id="装箱">装箱</span></h2>
<p>基本数据类型转换为包装类</p>
<ol>
<li>
<p>通过构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Byte</span>(<span class="string">&quot;123&quot;</span>); </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>通过包装类的valueOf()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Interger</span> <span class="variable">t</span> <span class="operator">=</span> Integer.valueOf(<span class="number">123</span>);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>JDK5后出现自动装箱(推荐)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>; 	</span><br><span class="line"><span class="type">Integer</span> <span class="variable">t</span> <span class="operator">=</span> i; <span class="comment">//Integer = 10;	底层还是通过包装类的valueof（）方法</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2><span id="拆箱">拆箱</span></h2>
<p>包装类转换为基本数据类型</p>
<ol>
<li>
<p>调用包装类实例对象的.xxxValue()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Boolean</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> obj.booleanValue(); </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>JDK5后出现自动拆箱(推荐)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> integer;	<span class="comment">//底层还是通过包装类实例的xxxValue（）方法</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2><span id="字符串转换成基本数据类型">字符串转换成基本数据类型</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;12&quot;</span>);<span class="comment">//通过包装类的构造器实现：</span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> Long.valueOf(<span class="string">&quot;123&quot;</span>);<span class="comment">//通过包装类的valueOf()实现</span></span><br><span class="line"></span><br><span class="line"><span class="type">Float</span> <span class="variable">f</span> <span class="operator">=</span> Float.parseFloat(<span class="string">&quot;12.1&quot;</span>);<span class="comment">//通过包装类的parseXxx(String s)静态方法：</span></span><br></pre></td></tr></table></figure>
<h2><span id="基本数据类型转换成字符串">基本数据类型转换成字符串</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str= String.valueOf(<span class="number">2.34f</span>);<span class="comment">//调用字符串重载的valueOf()方法：</span></span><br><span class="line"></span><br><span class="line">String str= <span class="number">5</span> + “”<span class="comment">//使用+做字符串连接</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th></th>
<th>基本数据类型</th>
<th>包装类</th>
<th>字符串</th>
</tr>
</thead>
<tbody>
<tr>
<td>基本数据类型转换成</td>
<td>\</td>
<td>包装类构造器、包装类.valueOf(X)、自动</td>
<td>包装类.valueOf(X)、字符串拼接</td>
</tr>
<tr>
<td>包装类转换成</td>
<td>包装类实例对象.XXXValue()、自动</td>
<td>\</td>
<td>包装类.toString()</td>
</tr>
<tr>
<td>字符串转换成</td>
<td>包装类构造器、包装类.valueOf(X)、包装类.parseXxx(X)</td>
<td>包装类构造器、包装类.valueOf(X)</td>
<td>\</td>
</tr>
</tbody>
</table>
<p><img src="https://pic.imgdb.cn/item/63aaec6708b6830163fb2d26.png" alt></p>
<h2><span id="包装类中的缓存机制">包装类中的缓存机制</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.valueOf(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//Integer num1 = 10;</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println((num1 == num2) +<span class="string">&quot;\t&quot;</span>+ num1.equals(num2));<span class="comment">//true	true</span></span><br><span class="line">System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">20</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">num4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">20</span>);</span><br><span class="line">System.out.println((num3 == num4) +<span class="string">&quot;\t&quot;</span>+ num3.equals(num4));<span class="comment">//false	true</span></span><br><span class="line">System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">num5</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">num6</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println((num5 == num6) +<span class="string">&quot;\t&quot;</span>+ num5.equals(num6));<span class="comment">//false	true</span></span><br></pre></td></tr></table></figure>
<p>Integer类第一次被使用时，Integer的静态内部类就被加载，加载的时候会创建-128到127的 Integer对象，同时创建一个数组cache来缓存这些对象。</p>
<ul>
<li>当使用valueOf()方法创建对象时，就直接返回已经缓存的对象，不会再新建对象；</li>
<li>当使用new关键字或者使用valueOf()方法创建小于-128大于 127的值对象时，就会创建新对象。</li>
</ul>
<table>
<thead>
<tr>
<th>Character、Byte、Short、Integer、Long</th>
<th>Boolean</th>
<th>Float、Double</th>
</tr>
</thead>
<tbody>
<tr>
<td>有缓存区，且实现方式基本一样，都是-128到127的缓存范围（Character 0-127）</td>
<td>没有缓存区，但在成员变量中就创建了两个相应的对象true、false</td>
<td>没有缓存区，即使在0到1这么小的范围，浮点数也有无数个，使用缓存区缓存它们不具备可能性和实用性。</td>
</tr>
</tbody>
</table>
<p>缓存区的存在使得常用的包装类对象可以得到复用，这有利于提升性能。当我们需要创建新对象的时候再new一个，增加了灵活性。</p>
<h2><span id="基本数据类型与包装类区别">基本数据类型与包装类区别</span></h2>
<table>
<thead>
<tr>
<th></th>
<th>基本数据类型</th>
<th>包装类（引用数据类型）</th>
</tr>
</thead>
<tbody>
<tr>
<td>成员</td>
<td>\</td>
<td>可调用各种属性及方法</td>
</tr>
<tr>
<td>实例化</td>
<td>不需要实例化</td>
<td>必须实例化后才能使用</td>
</tr>
<tr>
<td>存储方式</td>
<td>直接存储数据值</td>
<td>实际是对象的引用</td>
</tr>
<tr>
<td>默认值</td>
<td>有默认值</td>
<td>默认值是null</td>
</tr>
<tr>
<td>空指针异常</td>
<td>不会发生空指针异常</td>
<td>可能发生空指针异常</td>
</tr>
<tr>
<td>强制转换</td>
<td>可以强制转换为其他类型</td>
<td>不能强制转换为其他类型</td>
</tr>
</tbody>
</table>
<h1><span id="运算规则">运算规则</span></h1>
<ul>
<li>包装类和值类型一起运算，则包装类会拆箱成值类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//比较的是值</span></span><br><span class="line"><span class="comment">//两个值类型比较的是数值</span></span><br><span class="line"><span class="comment">//f1==f2，包装类和值类型进行运算，则包装类会拆箱</span></span><br><span class="line"><span class="type">int</span> g1=<span class="number">1000</span>;</span><br><span class="line">Integer g2=<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1000</span>);</span><br><span class="line">System.out.println(g1==g2);</span><br></pre></td></tr></table></figure>
<h1><span id="大数字处理">大数字处理</span></h1>
<p>大数字实际上是采用字符串存储</p>
<ol>
<li>
<p>BigInteger处理整数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigInteger bigInteger=<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;10000000000000000000000000000000000000000000000000000000000000000000000000&quot;</span>);</span><br><span class="line">System.out.println(bigInteger.toString());</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>BigDecimal处理小数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal bigDecimal1=<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;10000000000000000000000000000000000000000000000000000000000000000000.123&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>add(BigDecimal b)</td>
<td>加法</td>
</tr>
<tr>
<td>subtract(BigDecimal b)</td>
<td>减法</td>
</tr>
<tr>
<td>multiply(BigDecimal b)</td>
<td>乘法</td>
</tr>
<tr>
<td>divide(BigDecimal b)</td>
<td>除法</td>
</tr>
<tr>
<td>toString(BigDecimal b)</td>
<td>转换成字符串</td>
</tr>
</tbody>
</table>
</li>
</ol>
<h1><span id="数字格式化">数字格式化</span></h1>
<p>DecimalFormat</p>
<ol>
<li>#:表示数字格式，如果有数字则显示，没有则不显示<br>
如果数字少了，则不处理，不会补“0”，也不会补“#”<br>
如果数字多了，就切掉，但只切小数的末尾，整数不能切<br>
同时被切掉的小数位会进行四舍五入处理</li>
<li>0:表示占位符，如果没有该数位则用0表示<br>
如果数字少了，就会补“0”，小数和整数都会补；<br>
如果数字多了，就切掉，但只切小数的末尾，整数不能切；<br>
同时被切掉的小数位会进行四舍五入处理。</li>
<li>.:表示小数点</li>
<li>,:表示钱个格式</li>
<li>其它字符：直接显示</li>
</ol>
<p><strong>格式化人民币</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DecimalFormat</span> <span class="variable">decimalFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;￥###,###.00&quot;</span>);</span><br><span class="line"><span class="type">float</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> decimalFormat.format(a);</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(format);</span><br></pre></td></tr></table></figure>
<p><strong>格式化操作</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="number">123.1512134567</span>;</span><br><span class="line"><span class="comment">// 取整数部分</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;0&quot;</span>).format(pi);</span><br><span class="line">System.out.println(<span class="string">&quot;取整数：&quot;</span> + s1);<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取小数点后1位,四舍五入</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;0.0&quot;</span>).format(pi);</span><br><span class="line">System.out.println(s2);<span class="comment">//123.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取小数点后3位，不足部分取0</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;0.000&quot;</span>).format(pi);</span><br><span class="line">System.out.println(s3);<span class="comment">//123.150</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 百分比</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;0.0%&quot;</span>).format(pi);</span><br><span class="line">System.out.println(s4);<span class="comment">// 12315.0%</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 科学计数法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;0.00E0&quot;</span>).format(pi);</span><br><span class="line"></span><br><span class="line">System.out.println(s5);</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1234567</span>;</span><br><span class="line"><span class="comment">// 每三位以逗号分开</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;,000&quot;</span>).format(d);</span><br><span class="line">System.out.println(s6);</span><br><span class="line"></span><br><span class="line"><span class="comment">//小数点后3位，如果是0则不显示</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.###&quot;</span>).format(<span class="number">123.300</span>);</span><br><span class="line">System.out.println(s7);<span class="comment">//123.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数字也可以格式化</span></span><br><span class="line">BigDecimal bigDecimal1=<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;10000000000000000000000000000000000000000000000000000000000000000000.123&quot;</span>);</span><br><span class="line">BigDecimal bigDecimal2=<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">//减法</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">subtract</span> <span class="operator">=</span> bigDecimal1.subtract(bigDecimal2);</span><br><span class="line">System.out.println(subtract.toString());</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;￥###,###.00&quot;</span>).format(subtract));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>多态</title>
    <url>/post/%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<p>当我们使用代码描述主人喂养宠物的场景，首先在这个场景当中应该有“宠物对象” ，宠物对象应该有吃的行为，另外还需要一个“主人对象” ，主人对象应该有一个喂的行为。然而对于不同的宠物，吃的行为也不相同，或许是吃的东西不同，也或许是吃的方式不同，此时每当出现新的宠物时，我们就需要修改对于宠物吃行为的描述，这不符合OCP原则。对于需要更改的“宠物对象”，应当将其“封装”起来，在新的模块中对宠物不同的吃行为进行描述，而无需修改原本“宠物对象”的描述。</p>
<span id="more"></span>
<h1><span id="多态polymorphism">多态(polymorphism)</span></h1>
<p>编译时类型和运行时类型不一致，就出现了对象的多态性(Polymorphism)多态情况</p>
<h2><span id="前提">前提</span></h2>
<p>继承或实现</p>
<p>重写</p>
<h2><span id="现象">现象</span></h2>
<ol>
<li>父类引用类型变量指向多种子类对象(父父new子)</li>
<li>该变量不能再访问子类中新添加的属性和方法（局限）</li>
<li>属性没有多态，即使子类有同名属性，编译期和运行期也访问的是父类的属性，但可以通过子类重写的方法调用子类的属性</li>
<li>子类重写父类的方法，编译期看到的是父类中的方法,运行期执行的是子类重写后的方法(编译期看左边 运行期看右边)</li>
</ol>
<h2><span id="原理">原理</span></h2>
<h3><span id="虚拟方法调用多态情况下">虚拟方法调用(多态情况下)</span></h3>
<p>子类中定义了与父类同名同参数的方法,此时父类的方法称为<strong>虚拟方法</strong>(Virtual Method Invocation)</p>
<ul>
<li>
<p>在编译期，对象还没有创建出出来，只能看到父类的虚拟方法</p>
</li>
<li>
<p>直到运行期,真正的子类对象被创建出来,父类引用变量得到具体的子类对象地址，并动态调用子类重写的该方法。（动态绑定）</p>
</li>
</ul>
<h3><span id="静态绑定与动态绑定">静态绑定与动态绑定</span></h3>
<p>重载，允许存在多个同名不同参数方法。编译器根据方法不同的参数列表，对同名方法的名称做修饰。同名方法就成了不同的方法。 它们的调用地址在编译期就绑定了。因此，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定” ；</p>
<p>而对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或 “动态绑定 ” 。</p>
<h2><span id="作用">作用</span></h2>
<p>提高了代码的通用性、提高软件的扩展性、实现软件设计的解耦</p>
<h2><span id="应用">应用</span></h2>
<p>当方法声明的形参类型为父类类型，可以使用子类的对象作为实参调用该方法</p>
<h2><span id="类型转换casting">类型转换(Casting)</span></h2>
<h3><span id="基本数据类型">基本数据类型</span></h3>
<ul>
<li>
<p>自动类型转换：小的数据类型可以自动转换成大的数据类型</p>
</li>
<li>
<p>强制类型转换：可以把大的数据类型强制转换成小的数据类型</p>
</li>
</ul>
<h3><span id="引用数据类型">引用数据类型</span></h3>
<p>对Java对象的强制类型转换称为<strong>造型</strong></p>
<ul>
<li>
<p>向上转型：从子类到父类的类型转换可以自动进行(多态)</p>
</li>
<li>
<p>向下转型：从父类到子类的类型转换必须通过造型(强制类型转换)实现</p>
</li>
<li>
<p>无继承关系的引用类型间的转换是非法的</p>
</li>
</ul>
<p>多态情况下，当我们需要访问子类中新添加的属性和方法时，需要向下转型（强转）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">    base.add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);		<span class="comment">//调用的是子类重写父类的方法	sub_1</span></span><br><span class="line">    <span class="type">Sub</span> <span class="variable">s</span> <span class="operator">=</span> (Sub)base;		<span class="comment">//造型</span></span><br><span class="line">    s.add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);			<span class="comment">//调用的是子类独有的方法	sub_2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span>... arr)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;base &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub_1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub_2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="instanceof-操作符">instanceof 操作符</span></h3>
<p>在造型前可以使用instanceof操作符测试一个对象的类型</p>
<p>x instanceof A：</p>
<ul>
<li>
<p>检验x是否为类A的对象，返回值为boolean型。 x是A类对象返回true，反之返回false</p>
</li>
<li>
<p>如果x属于类A的子类B，返回值也为true</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;…&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graduate</span> <span class="keyword">extends</span> <span class="title class_">Student</span>&#123;…&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(Person e)</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Person) <span class="comment">// 处理Person类及其子类对象 </span></span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Student) <span class="comment">//处理Student类及其子类对象 </span></span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Graduate) <span class="comment">//处理Graduate类及其子类对象 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>x所属的类与A类对象没有继承关系，则编译错误。</p>
<h2><span id="验证多态是运行时行为">验证：多态是运行时行为</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">switch</span> (r) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            animal = <span class="keyword">new</span> <span class="title class_">Cat</span> ();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            animal = <span class="keyword">new</span> <span class="title class_">Dog</span> ();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    animal.eat();<span class="comment">//运行时才能确定animal引用类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; animal eat food&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; cat eat fish&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog eat bone &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>常用文本编辑快捷键</title>
    <url>/post/%E5%B8%B8%E7%94%A8%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1><span id="引言">引言</span></h1>
<p>掌握一些最基本的快捷方式，对快速编辑有很好的效果。下面列举一些常用的快捷方式，如下所示：</p>
<span id="more"></span>
<table>
<thead>
<tr>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">使用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ctrl+c</td>
<td style="text-align:center">复制</td>
</tr>
<tr>
<td style="text-align:center">ctrl+v</td>
<td style="text-align:center">粘贴</td>
</tr>
<tr>
<td style="text-align:center">ctrl+x</td>
<td style="text-align:center">剪切</td>
</tr>
<tr>
<td style="text-align:center">ctrl+s</td>
<td style="text-align:center">保存</td>
</tr>
<tr>
<td style="text-align:center">ctrl+z</td>
<td style="text-align:center">撤销</td>
</tr>
<tr>
<td style="text-align:center">ctrl+y</td>
<td style="text-align:center">重做</td>
</tr>
<tr>
<td style="text-align:center">ctrl+a</td>
<td style="text-align:center">全选</td>
</tr>
<tr>
<td style="text-align:center">ctrl + f</td>
<td style="text-align:center">查找</td>
</tr>
<tr>
<td style="text-align:center">home 键</td>
<td style="text-align:center">光标回到行首</td>
</tr>
<tr>
<td style="text-align:center">end 键</td>
<td style="text-align:center">光标回到行尾</td>
</tr>
<tr>
<td style="text-align:center">ctrl + home 键</td>
<td style="text-align:center">光标回到文章开始</td>
</tr>
<tr>
<td style="text-align:center">ctrl + end 键</td>
<td style="text-align:center">光标回到文章末尾</td>
</tr>
<tr>
<td style="text-align:center">shift + home 或 end 键</td>
<td style="text-align:center">选中一行</td>
</tr>
<tr>
<td style="text-align:center">ctrl + shift +右箭头或左箭头</td>
<td style="text-align:center">选中一个单词</td>
</tr>
<tr>
<td style="text-align:center">鼠标双击</td>
<td style="text-align:center">选中一个单词</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>异常</title>
    <url>/post/%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h1><span id="异常">异常</span></h1>
<ul>
<li>java程序运行的时候或编译的时候可能引发异常
<ul>
<li>编译的时候引发的异常会导致无法编译</li>
<li>运行时引发的异常会到导致程序终止</li>
</ul>
</li>
<li>异常在java中也是面向对象的，Java通过API中Throwable类的众多子类描述各种不同的异常。描述了出现在一段编码中的错误条件。当条件生成时，错误将引发异常。</li>
</ul>
<h2><span id="结构">结构</span></h2>
<img src="https://pic.imgdb.cn/item/63bfed14be43e0d30e1d66cd.jpg">
<h3><span id="throwable">Throwable</span></h3>
<p>异常的父类</p>
<table>
<thead>
<tr>
<th>常用方法</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>getCause()</td>
<td>返回抛出异常的原因。如果 cause 不存在或未知，则返回 null。</td>
</tr>
<tr>
<td>getMessage()</td>
<td>返回异常的消息信息。</td>
</tr>
<tr>
<td>printStackTrace()</td>
<td>对象的堆栈跟踪输出至错误输出流</td>
</tr>
</tbody>
</table>
<h3><span id="exception">Exception</span></h3>
<p>是程序本身可以处理的异常。异常需要捕获和处理，否则无法编译。</p>
<h3><span id="error">Error</span></h3>
<p>错误，是程序无法处理的错误，表示运行应用程序中较严重问题。</p>
<p>大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题，JVM一般会选择线程终止。。例如，</p>
<ol>
<li>Java虚拟机运行错误（Virtual MachineError）</li>
<li>JVM不再有继续执行操作所需的内存资源（OutOfMemoryError）。</li>
<li>Java虚拟机运行错误（Virtual MachineError）</li>
<li>类定义错误（NoClassDefFoundError）</li>
</ol>
<p>这些错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况</p>
<h3><span id="runtimeexception">RuntimeException</span></h3>
<p>Exception的子类，运行时异常，无需要捕获和处理，也能编译，但是运行时发生错误，则程序会终断，因此运行时异常还是需要捕获和处理</p>
<p>通常表示“JVM 常用操作”引发的错误。例如，</p>
<ol>
<li>
<p>若试图使用空值对象引用（NullPointerException）</p>
</li>
<li>
<p>除数为零（ArithmeticException）</p>
</li>
<li>
<p>数组越界（ArrayIndexOutOfBoundException）</p>
<p>注意：异常和错误的区别：异常能被程序本身可以处理，错误是无法处理。</p>
</li>
</ol>
<h2><span id="分类">分类</span></h2>
<p>Java的异常(包括Exception和Error)分为可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）</p>
<h3><span id="可查异常">可查异常</span></h3>
<ul>
<li>除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常</li>
<li>可查异常在一定程度上可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。</li>
<li>Java编译器会检查它，当程序中可能出现这类异常，必须用try-catch语句捕获或throws子句声明抛出，否则编译不会通过</li>
</ul>
<h3><span id="不可查异常">不可查异常</span></h3>
<ol>
<li>包括运行时异常（RuntimeException与其子类）和错误（Error）</li>
<li>编译器不要求强制处置，可以不用try-catch语句捕获、不用throws子句声明抛出，编译可通过</li>
</ol>
<h2><span id="处理异常机制">处理异常机制</span></h2>
<p>在 Java 应用程序中，异常处理机制为：抛出异常，捕捉异常</p>
<h3><span id="抛出异常">抛出异常</span></h3>
<p>当一个方法出现错误引发异常时，方法创建异常对象并交付运行时系统，异常对象中包含了异常类型和异常出现时的程序状态等异常信息。运行时系统负责寻找处置异常的代码并执行</p>
<p>任何Java代码都可以抛出异常，如：自己编写的代码、来自Java开发环境包中代码，或者Java运行时系统。无论是谁，都可以通过Java的throw语句抛出异常</p>
<h3><span id="捕获异常">捕获异常</span></h3>
<p>在方法抛出异常之后，运行时系统将转为寻找处理的异常类型与方法抛出的异常类型相符的异常处理器。运行时系统从发生异常的方法开始，依次回查调用栈中的方法，直至找到含有合适异常处理器的方法并执行。当运行时系统遍历调用栈而未找到合适的异常处理器，则运行时系统终止。同时，意味着Java程序的终止。</p>
<p>捕捉异常通过try-catch语句或者try-catch-finally语句实现</p>
<p>总结：对于可查异常必须捕捉、或者声明抛出。允许忽略不可查的RuntimeException和Error。</p>
<h2><span id="try-catch语句">try、catch语句</span></h2>
<ol>
<li>
<p>try括号中为可能发生异常的语句</p>
</li>
<li>
<p>若发生异常，与之匹配的catch括号中的语句将被执行，没发生异常则跳过catch语句</p>
<blockquote>
<p>匹配的原则是：如果抛出的异常对象属于catch子句的异常类，或者属于该异常类的子类，则认为生成的异常对象与catch块捕获的异常类型相匹配。</p>
</blockquote>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    a = scanner.nextInt();    <span class="comment">//捕获异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InputMismatchException e)&#123;</span><br><span class="line">    <span class="comment">//InputMismatchException类型的参数e。InputMismatchException就是try代码块传递给catch代码块的变量类型，e就是变量名</span></span><br><span class="line">    System.out.println(<span class="string">&quot;请输入一个数字&quot;</span>);    <span class="comment">//处理异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="try-catch-catch-">try-catch-catch-…</span></h2>
<ul>
<li>多路catch</li>
</ul>
<p>一旦某个catch捕获到匹配的异常类型，将进入异常处理代码。一经处理结束，就意味着整个try-catch语句结束。其他的catch子句不再有匹配和捕获异常类型的机会。</p>
<p>使用多路catch语句时，应尽量把捕获底层类异常的catch子句放在前面，将相对高层的子句放在后面，否则底层子句很可能不执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    a = scanner.nextInt();            <span class="comment">//捕获异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InputMismatchException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入一个数字&quot;</span>);            <span class="comment">//处理异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;出现了未知名的错误&quot;</span>);            <span class="comment">//处理异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a =<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> random.nextInt(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    a[index] = scanner.nextInt();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InputMismatchException e) &#123;</span><br><span class="line">    <span class="comment">//打印错误堆栈</span></span><br><span class="line">    <span class="comment">//e.printStackTrace();</span></span><br><span class="line">    <span class="comment">//打印错误消息</span></span><br><span class="line">    <span class="comment">//e.getMessage();</span></span><br><span class="line">    System.out.println(<span class="string">&quot;请输入一个数字&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你输入的下标超标&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">//e.printStackTrace();</span></span><br><span class="line">    System.out.println(<span class="string">&quot;不知名错误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="try-catch-finally语句">try、catch、finally语句</span></h2>
<p>无论是否发生异常，都会执行finally语句</p>
<ul>
<li>若没发生异常，在try语句执行后执行finally语句</li>
<li>若发生了异常，在catch语句执行后执行finally语句</li>
</ul>
<blockquote>
<p>在以下4种特殊情况下，finally块不会被执行：<br>
1）在finally语句块中发生了异常。<br>
2）在前面的代码中用了System.exit()退出程序。<br>
3）程序所在的线程死亡。<br>
4）关闭CPU。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//捕获异常</span></span><br><span class="line">    a = scanner.nextInt();</span><br><span class="line">    System.out.println(<span class="string">&quot;try***********&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InputMismatchException e)&#123;</span><br><span class="line">    <span class="comment">//处理异常</span></span><br><span class="line">    System.out.println(<span class="string">&quot;请输入一个数字&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;catch***********&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;finally永远会运行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1)当try没有捕获到异常时：try语句块中的语句逐一被执行，程序将跳过catch语句块，执行finally语句块和其后的语句；</p>
<p>2)当try捕获到异常，catch语句块里没有处理此异常的情况：当try语句块里的某条语句出现异常时，而没有处理此异常的catch语句块时，此异常将会抛给JVM处理，finally语句块里的语句还是会被执行，但finally语句块后的语句不会被执行；</p>
<p>3)当try捕获到异常，catch语句块里有处理此异常的情况：在try语句块中是按照顺序来执行的，当执行到某一条语句出现异常时，程序将跳到catch语句块，并与catch语句块逐一匹配，找到与之对应的处理程序，其他的catch语句块将不会被执行，而try语句块中，出现异常之后的语句也不会被执行，catch语句块执行完后，执行finally语句块里的语句，最后执行finally语句块后的语句；</p>
<h2><span id="try-catch-finally-return">try、catch、finally、return</span></h2>
<p>当在try块或catch块中遇到return语句时，finally语句块将在方法返回之前被执行。</p>
<h3><span id="try-catch-finally中都有return">try、catch、finally中都有return</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="type">int</span>  <span class="title function_">fun1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">try</span>&#123;        <span class="comment">//捕获异常</span></span><br><span class="line">        a = scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;try***********&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InputMismatchException e)&#123;        <span class="comment">//处理异常</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个数字&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;catch***********&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally永远会运行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> MyApp3.fun1();</span><br><span class="line">    System.out.println(i);<span class="comment">//30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会将try或catch中的return语句”覆盖“掉，直接执行finally中的return语句，得到返回值</p>
<h3><span id="finally中没有return">finally中没有return</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="type">int</span>  <span class="title function_">fun1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">try</span>&#123;        <span class="comment">//捕获异常</span></span><br><span class="line">        a = scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;try***********&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InputMismatchException e)&#123;        <span class="comment">//处理异常</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个数字&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;catch***********&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally永远会运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> MyApp3.fun1();</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行finally中的语句后，从try或catch中返回</p>
<h3><span id="finally中没有return但修改了返回值">finally中没有return但修改了返回值</span></h3>
<p>无论是try还是catch里面的return返回规则为：</p>
<ul>
<li>值类型：return会第一次记录值，然后finally，然后再return（finally无法修改return结果）</li>
<li>引用类型：return会第一次记地址，然后finally，然后再return（finally可以修改return结果）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="type">int</span>  <span class="title function_">fun1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line">    Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">try</span>&#123;<span class="comment">//捕获异常</span></span><br><span class="line">        a = scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;try***********&quot;</span>);</span><br><span class="line">        b=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InputMismatchException e)&#123;<span class="comment">//处理异常</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个数字&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;catch***********&quot;</span>);</span><br><span class="line">        b=<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally永远会运行&quot;</span>);</span><br><span class="line">        b=<span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> MyApp3.fun1();</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> Stu <span class="title function_">fun1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    Stu stu=<span class="keyword">new</span> <span class="title class_">Stu</span>(<span class="number">1000</span>,<span class="string">&quot;hzj1&quot;</span>);</span><br><span class="line">    Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">try</span>&#123;<span class="comment">//捕获异常</span></span><br><span class="line">        a = scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;try***********&quot;</span>);</span><br><span class="line">        stu.setId(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//这里先执行return，然后在执行finally,然后再执行return</span></span><br><span class="line">        <span class="comment">//这里return会记录地址（引用类型）</span></span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InputMismatchException e)&#123;</span><br><span class="line">        <span class="comment">//处理异常</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个数字&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;catch***********&quot;</span>);</span><br><span class="line">        stu.setId(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally永远会运行&quot;</span>);</span><br><span class="line">        stu.setId(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Stu</span> <span class="variable">i</span> <span class="operator">=</span> MyApp4.fun1();</span><br><span class="line">    System.out.println(i);	<span class="comment">//5000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="throw">throw</span></h2>
<ol>
<li>throw用来抛出一个Throwable类型的异常。程序会在throw语句后立即终止</li>
<li>然后在包含它的所有try块中从里向外寻找含有与其匹配的catch子句的try块</li>
</ol>
<p>可创建异常类的实例对象通过throw语句抛出。该语句的语法格式为：</p>
<blockquote>
<p>throw new EXCEPTIONNAME;</p>
</blockquote>
<ul>
<li>
<p>如果抛出了检查异常，则还应该在方法头部声明方法可能抛出的异常类型。该方法的调用者也必须检查处理抛出的异常。</p>
</li>
<li>
<p>如果所有方法都层层上抛获取的异常，最终JVM会进行处理，打印异常消息和堆栈信息。如果抛出的是Error或RuntimeException，则该方法的调用者可选择处理该异常。</p>
</li>
</ul>
<p>Throws抛出异常的规则：</p>
<ol>
<li>不可查异常即使不使用throws关键字来声明要抛出的异常，编译仍能顺利通过，但在运行时会被系统抛出。</li>
<li>可查异常必须用try-catch语句捕获或用throws子句声明将它抛出，否则会导致编译错误</li>
<li>仅当抛出了异常，该方法的调用者才必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出</li>
<li>调用方法若覆盖一个方法，则不能声明与覆盖方法不同的异常。声明的任何异常必须是被覆盖方法所声明异常的同类或子类。</li>
</ol>
]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
  </entry>
  <entry>
    <title>排序与查找</title>
    <url>/post/%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h1><span id="排序">排序</span></h1>
<h2><span id="冒泡排序">冒泡排序</span></h2>
<p><strong>算法描述</strong></p>
<ol>
<li>依次比较相邻两个元素的大小，将大的元素放在后面</li>
<li>两两都比较过为一轮排序，每轮排序都会确定一个最大元素的位置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubble</span><span class="params">(<span class="type">int</span>[] a)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length-<span class="number">1</span>; i++) &#123;		<span class="comment">//n-1趟可决定n-1个元素的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[j];</span><br><span class="line">                a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">                a[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>优化</strong></p>
<ol>
<li>
<p>每轮排序都将确定一个最大元素的位置（最后），在下轮排序中无需再比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubble</span><span class="params">(<span class="type">int</span>[] a)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length-<span class="number">1</span>-i; j++) &#123;	<span class="comment">//每执行一轮排序，内层循环可以少执行一次</span></span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[j];</span><br><span class="line">                a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">                a[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在一轮排序中，若没有元素交换，则说明元素序列已经有序，可提前结束排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubble</span><span class="params">(<span class="type">int</span>[] a)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">swapped</span> <span class="operator">=</span> <span class="literal">false</span>;		<span class="comment">//检查每轮是否发生交换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length-<span class="number">1</span>-i; j++) &#123;	<span class="comment">//每执行一轮排序，内层循环可以少执行一次</span></span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                swapped = <span class="literal">true</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[j];</span><br><span class="line">                a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">                a[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!swapped)&#123;		<span class="comment">//没有元素交换，可提前结束排序</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>最后一次交换索引的右侧都是确定最终位置的元素，下轮排序中无需比较；当最后一次交换索引的位置为0，说明没有交换元素，综合上述进一步优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubble1</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                last = j;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[j];</span><br><span class="line">                a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">                a[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        n = last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2><span id="选择排序">选择排序</span></h2>
<p><strong>算法描述</strong></p>
<ol>
<li>
<p>将数组分为有序与无序的两个子集，每轮排序中从无序中选择最小的元素放入有序子集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selection</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;	<span class="comment">//最小元素插入的位置，最后的位置不用处理</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; a.length; j++) &#123;	<span class="comment">//从无序子序列中找到最小的元素</span></span><br><span class="line">            min = a[min] &lt; a[j] ? min : j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min != i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[min];</span><br><span class="line">            a[min] = a[i];</span><br><span class="line">            a[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>稳定性</strong></p>
</li>
</ol>
<img src="https://pic.imgdb.cn/item/63d72bf9face21e9ef3198f3.jpg" style="zoom:80%;">
<h2><span id="插入排序">插入排序</span></h2>
<p><strong>算法描述</strong></p>
<ol>
<li>将数组分为有序与无序两个子集，每轮排序从无序数组中取出第一个元素插入有序子集中</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Insert</span><span class="params">(<span class="type">int</span>[] a)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; a.length; i++) &#123;    <span class="comment">//无序子序列要插入的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>;  <span class="comment">//有序子序列最右边的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> a[i];  <span class="comment">//要插入元素的值</span></span><br><span class="line">        <span class="keyword">for</span> (;j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= a[j])&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                a[j+<span class="number">1</span>] = a[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j+<span class="number">1</span>] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>大部分情况下，插入都略优于选择</p>
</li>
<li>
<p>有序集合插入的时间复杂度为 $O(n)$</p>
</li>
</ol>
<h2><span id="希尔排序">希尔排序</span></h2>
<p>插入排序适合小数据量，可以先将数组分割，再使用插入排序</p>
<p><strong>算法描述</strong></p>
<ol>
<li>
<p>首先选取一个间隙序列，如 (n/2，n/4 … 1)，n 为数组长度</p>
</li>
<li>
<p>每一轮将间隙相等的元素视为一组，对组内元素进行插入排序，目的有二</p>
<p>① 少量元素插入排序速度很快</p>
<p>② 让组内值较大的元素更快地移动到后方</p>
</li>
<li>
<p>当间隙逐渐减少，直至为 1 时，即可完成排序</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Shell</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> a.length / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;	<span class="comment">//设置间隙</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; gap; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + gap; j &lt; a.length; j += gap) &#123;		<span class="comment">//要插入的元素</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> j - gap;  <span class="comment">//要插入元素下标</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> a[j];   <span class="comment">//要插入元素值</span></span><br><span class="line">                <span class="keyword">for</span> (; m &gt;= <span class="number">0</span>; m -= index) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (value &gt;= a[m]) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        a[m + index] = a[m];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                a[m + gap] = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>优化</strong></p>
<ol>
<li>上述代码先将数组按照等间隙分为多个子序列进行排序，因此在不同间隙下分为多个子序列分别进行插入排序</li>
<li>实际上我们可以只关心数组中要插入的单个结点，通过不断减去间隙来计算要插入的有序子序列，而不用先求得多个子序列，再找插入元素以及子序列中的有序部分</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Shell</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> a.length / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;	<span class="comment">//设置间隙</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; a.length; i++) &#123;<span class="comment">//要插入元素下标</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - gap;</span><br><span class="line">                <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> a[i];   <span class="comment">//要插入元素的值</span></span><br><span class="line">                <span class="keyword">for</span> (; j &gt;= <span class="number">0</span>; j -= gap) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (value &gt;= a[j]) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        a[j + gap] = a[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                a[j + gap] = value;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="快速排序">快速排序</span></h2>
<p><strong>算法描述</strong></p>
<ol>
<li>每一轮排序选择一个基准点（pivot）进行分区
<ol>
<li>让小于基准点的元素的进入一个分区，大于基准点的元素的进入另一个分区</li>
<li>当分区完成时，基准点元素的位置就是其最终位置</li>
</ol>
</li>
<li>在子分区内重复以上过程，直至子分区元素个数少于等于 1，这体现的是分而治之的思想 （<a href="https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm">divide-and-conquer</a>）</li>
<li>从以上描述可以看出，一个关键在于分区算法，常见的有洛穆托分区方案、双边循环分区方案、霍尔分区方案</li>
</ol>
<p><strong>单边循环快排（lomuto 洛穆托分区方案）</strong></p>
<ol>
<li>
<p>选择最右元素作为基准点元素</p>
<blockquote>
<p>为了不对数组进行删除修改操作，将交换元素调整数组，使基准点左侧均小于基准点，右侧均大于基准点</p>
</blockquote>
</li>
<li>
<p>从左往右遍历元素，逐步确定基准点的最终位置</p>
<blockquote>
<p>最终位置需要和大于基准点的第一个元素交换</p>
</blockquote>
</li>
<li>
<p>当前结点前不存在大于基准点的结点时：</p>
<ol>
<li>
<p>若小于基准点，则最终位置右移，继续向右查找</p>
</li>
<li>
<p>若大于基准点，则暂定最终位置为此处，余下结点前出现了大于基准点的结点</p>
</li>
</ol>
</li>
<li>
<p>当前结点前为大于基准点的结点时：</p>
<ol>
<li>
<p>若大于基准点，则不改变最终位置（大于基准点的第一个元素）</p>
</li>
<li>
<p>若小于基准点，将当前结点与最终位置的结点交换，交换后最终位置右移，重新调整为最终位置左侧均小，右侧均大</p>
</li>
</ol>
</li>
<li>
<p>当遍历到最后的基准点时，与最终位置的结点交换</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Quick</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> partion(a, low, high);  <span class="comment">//获取索引，并调整索引位置</span></span><br><span class="line">    Quick(a, <span class="number">0</span>, index - <span class="number">1</span>);</span><br><span class="line">    Quick(a, index + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partion</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="comment">//最右元素作为基准点元素</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> low;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> low; j &lt;= high; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[j] &lt;= a[high]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[j];</span><br><span class="line">            a[j] = a[index];</span><br><span class="line">            a[index] = temp;</span><br><span class="line">            <span class="keyword">if</span> (j != high) &#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>双边循环快排（不完全等价于 hoare 霍尔分区方案）</strong></p>
<ol>
<li>
<p>选择最左元素作为基准点元素</p>
<blockquote>
<p>最终位置为小于基准点的最后一个元素，先j后i</p>
</blockquote>
</li>
<li>
<p>j 指针负责从右向左找比基准点小的元素，i 指针负责从左向右找比基准点大的元素，一旦找到二者交换，直至 i，j 相交</p>
</li>
<li>
<p>最后基准点与 i（此时 i 与 j 相等）交换，i 即为分区位置</p>
<blockquote>
<p>对于递增有序序列的快排，基准点最终位置在最左不变，i从最左开始</p>
</blockquote>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partion</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> a[low];</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> low + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> high;</span><br><span class="line">    <span class="keyword">while</span> (index != j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (; index != j &amp;&amp; j &gt; low + <span class="number">1</span>; j--) &#123;    <span class="comment">//最终位置为小于基准点的最后一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; pivot) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; index != j &amp;&amp; index &lt; high; index++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[index] &gt;= pivot) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index != j) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[index];</span><br><span class="line">            a[index] = a[j];</span><br><span class="line">            a[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[index] &lt; pivot) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[low];</span><br><span class="line">        a[low] = a[index];</span><br><span class="line">        a[index] = temp;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;     <span class="comment">//当右侧均大时，最终位置即最左</span></span><br><span class="line">        <span class="keyword">return</span> --index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>优化后</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partion2</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> a[low];</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> low;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> high;</span><br><span class="line">    <span class="keyword">while</span> (j &gt; index) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; index &amp;&amp; a[j] &gt; pivot) &#123;       <span class="comment">//最终位置为小于基准点的最后一个元素</span></span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; index &amp;&amp; a[index] &lt;= pivot) &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[index];</span><br><span class="line">        a[index] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[low];</span><br><span class="line">    a[low] = a[index];</span><br><span class="line">    a[index] = temp;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>快排效率</strong></p>
<ol>
<li>
<p>平均时间复杂度是 $O(nlog_2⁡n )$，最坏时间复杂度 $O(n^2)$，平均空间复杂度为$O(log_2⁡n )$，最坏空间复杂度为$O(n)$</p>
<blockquote>
<p>时间复杂度= $O(n*递归层数)$ ：	快排中递归调用Quick方法，每次Quick方法的时间复杂度为$O(n)$</p>
<p>若将每次划分确定最终位置的结点作为根节点，再递归划分他的左右子序列，数组最终会被组织成一颗二叉树</p>
<ol>
<li>二叉树的层数即递归调用的层数</li>
<li>n个结点的二叉树的最小高度为$logn（向下取整） + 1$，最大高度为$n$</li>
</ol>
</blockquote>
</li>
<li>
<p>最好情况与最坏情况</p>
<blockquote>
<p>最坏情况：数组序列为有序递增序列，二叉树所有结点集中在其中一侧，此时二叉树的层数即结点个数</p>
<img src="https://pic.imgdb.cn/item/63d9075be90d1c00980a5c6a.jpg" style="zoom:67%;">
<p>最好情况：数组序列基准点将待排序列均匀划分为左右两个序列，二叉树平衡性最高，递归深度最小</p>
<img src="https://pic.imgdb.cn/item/63d90ae1e90d1c00981351ff.jpg" style="zoom:67%;">
<p>优化思路：选择值大小适中的元素作为基准点</p>
<ol>
<li>随机选取</li>
<li>从头中尾三个位置中选择适中大小的结点</li>
</ol>
</blockquote>
</li>
<li>
<p>不稳定</p>
<p><img src="https://pic.imgdb.cn/item/63d8fff3e90d1c0098f92473.jpg" alt></p>
</li>
</ol>
<p><strong>洛穆托分区方案 vs 霍尔分区方案</strong></p>
<ul>
<li>霍尔的移动次数平均来讲比洛穆托少3倍</li>
<li><a href="https://qastack.cn/cs/11458/quicksort-partitioning-hoare-vs-lomuto">https://qastack.cn/cs/11458/quicksort-partitioning-hoare-vs-lomuto</a></li>
</ul>
<blockquote>
<p><em><strong>补充代码说明</strong></em></p>
<ul>
<li>day01.sort.QuickSort3 演示了空穴法改进的双边快排，比较次数更少</li>
<li>day01.sort.QuickSortHoare 演示了霍尔分区的实现</li>
<li>day01.sort.LomutoVsHoare 对四种分区实现的移动次数比较</li>
</ul>
</blockquote>
<h2><span id="归并排序">归并排序</span></h2>
<h2><span id="基数排序">基数排序</span></h2>
<h2><span id="堆排序">堆排序</span></h2>
<p><strong>稳定排序与不稳定排序</strong></p>
<p>稳定排序：排序后不改变同值元素的顺序</p>
<table>
<thead>
<tr>
<th></th>
<th>冒泡排序</th>
<th>选择排序</th>
<th>插入排序</th>
<th>希尔排序</th>
<th>快速排序</th>
</tr>
</thead>
<tbody>
<tr>
<td>时间复杂度</td>
<td>$O(n^2)$</td>
<td>$O(n^2)$</td>
<td>$O(n^2)$</td>
<td>取决于间隙</td>
<td>$O(nlog_2⁡n )$</td>
</tr>
<tr>
<td>适用</td>
<td>有序时交换次数少</td>
<td>无序时交换次数少</td>
<td>小数据量</td>
<td>数组</td>
<td>数据量较大</td>
</tr>
<tr>
<td>稳定性</td>
<td>稳定</td>
<td>不稳定</td>
<td>稳定</td>
<td>不稳定</td>
<td>不稳定</td>
</tr>
<tr>
<td>空间复杂度</td>
<td>$O(1)$</td>
<td>$O(1)$</td>
<td>$O(1)$</td>
<td>$O(1)$</td>
<td>$O(log_2n)$</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
  </entry>
  <entry>
    <title>抽象类和接口</title>
    <url>/post/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象时，这样的类往往被称为抽象类。</p>
<p>抽象类是为了把<strong>相同的但不确定</strong>的东西的提取出来，为了以后的重用。定义成抽象类的目的，就是为了在子类中实现抽象方法。</p>
<p>当然，随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。父类足够抽象时，以至于它没有具体的实例。</p>
<p>然而，有时必须从几个类中抽象出共同的行为特征，继承它们所有的属性和方法。但是，Java不支持多重继承。这时，使用接口可以达到多重继承的效果。 例如：鼠标、键盘、打印机、扫描 仪、摄像头、充电器、MP3机、手机、数码相机、移动硬盘等都支持USB连接。</p>
<p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要…则必须 能…”的思想。继承是一个&quot;是不是&quot;的关系，而接口实现则是 &quot;能不能&quot;的关系。</p>
<span id="more"></span>
<h1><span id="abstract">abstract</span></h1>
<h2><span id="抽象类">抽象类</span></h2>
<p>abstract修饰的类称为抽象类，命名规范:xxxxAbstract  Abstractxxxx  xxxxBase</p>
<ul>
<li>抽象类不能被实例化，抽象类就是用来继承并实现的，但是有构造器</li>
<li>抽象类中可以有抽象方法，供继承类重写，若继承类还是抽象类，可以不重写抽象方法</li>
<li>最多只能继承一个抽象类（单继承）</li>
</ul>
<h2><span id="抽象方法">抽象方法</span></h2>
<p>abstract修饰的方法称为抽象方法</p>
<ul>
<li>抽象方法没有方法体，抽象方法就是供子类重写的（抽象子类不需要重写）</li>
<li>含有抽象方法的类一定是抽象类或接口</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>类</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>final</td>
<td>不能被继承</td>
<td>不能被重写</td>
</tr>
<tr>
<td>abstract</td>
<td>供子类继承实现</td>
<td>供继承类重写</td>
</tr>
<tr>
<td>static</td>
<td></td>
<td>需要方法体随类加载而加载</td>
</tr>
<tr>
<td>private</td>
<td></td>
<td>对子类不可见</td>
</tr>
</tbody>
</table>
<p>因此，final不能修饰抽象类和抽象方法</p>
<p>static、private不能修饰抽象方法</p>
<h2><span id="匿名抽象类">匿名抽象类</span></h2>
<p>如果抽象类没有实现类，仍然要获取抽象类的实例对象时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">think</span><span class="params">()</span>;</span><br><span class="line">    abstrect <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">think</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;think&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>直接构造抽象类对象，需要在<strong>构造函数后面的花括号实现抽象方法</strong>。</p>
<h2><span id="模板方法设计模式templatemethod">模板方法设计模式(TemplateMethod)</span></h2>
<p>当功能内部一部分实现步骤是固定、通用的，一部分实现是不确定的。这时可以把不确定的、易变部分暴露出去， 让子类去实现。 由此定义出功能算法的骨架，子类不改变算法的结构，且无需重复固定的代码，只需要重定义算法的某些特定步骤。</p>
<p>银行的营业厅办理业务需要 以下步骤：</p>
<ol>
<li>取号 2.办业务 3.评价。</li>
</ol>
<p>三个步骤中取号和评价都是 <strong>固定的流程</strong>，每个人要做的 事儿都是一样的。但是办业 务这个步骤根据每个人要办 的事情不同所以需要有<strong>不同的实现</strong>。我们可以将整个办业务这件事儿封装成一个抽象类：取号和评价为模板方法，而办业务为供子类重写的抽象方法。</p>
<h1><span id="接口">接口</span></h1>
<p>interface，特殊的、轻量级的抽象类，接口名称和类名一样 符合标识符的规则和规范(首字母大写)</p>
<h2><span id="接口实现">接口实现</span></h2>
<p>接口不能被实例化，供实现类使用，没有构造器</p>
<p>如果一个类实现了接口，则需要实现接口中所有方法，抽象类则不用</p>
<h3><span id="jdk8前">JDK8前</span></h3>
<p>接口中包含	公共的静态常量、公共的抽象方法</p>
<h3><span id="jdk8后">JDK8后</span></h3>
<h2><span id="接口和类">接口和类</span></h2>
<p>一个类可以实现多个接口</p>
<p>一个接口可以继承多个接口</p>
<table>
<thead>
<tr>
<th></th>
<th>抽象类</th>
<th>接口</th>
</tr>
</thead>
<tbody>
<tr>
<td>抽象级别</td>
<td>抽象类不能被实例化，供继承并实现</td>
<td>接口不能被实例化，供实现类使用，接口抽象级别高于抽象类</td>
</tr>
<tr>
<td>构造器</td>
<td>有构造器</td>
<td>没有构造器</td>
</tr>
<tr>
<td>继承</td>
<td>实现类最多继承一个抽象类</td>
<td>类可实现多个接口，接口可继承多个接口</td>
</tr>
<tr>
<td>成员</td>
<td>除了含有抽象方法，其余和普通类相差不大</td>
<td>只能是公共的静态常量、公共的抽象方法、（静态方法、默认方法为JDK8后）</td>
</tr>
<tr>
<td></td>
<td>继承类必须实现抽象方法，或本身为抽象类</td>
<td>实现类必须实现抽象方法，或本身为抽象类</td>
</tr>
<tr>
<td>没有实现类时</td>
<td>匿名抽象类</td>
<td>匿名实现类对象</td>
</tr>
<tr>
<td>设计模式</td>
<td>模板方法</td>
<td>简单工厂、工厂方法、代理模式</td>
</tr>
<tr>
<td></td>
<td>作为模板</td>
<td>作为标准或某种特性</td>
</tr>
</tbody>
</table>
<p>抽象类、接口都通过对象的多态性产生实例化对象，但由于抽象类单继承的局限，接口使用更为广泛</p>
<h2><span id="匿名实现类对象">匿名实现类对象</span></h2>
<p>如果接口没有实现类，仍要得到接口的实现时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">think</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">think</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;think&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/post/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2><span id="安装mysql">安装MySql</span></h2>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/e74255282ff5da9b.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/ef5b33c7ad593eff.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/64e39bddd1a902aa.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/472607774d81bf74.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/1a137450e9c0ec6e.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/821c5a4b337ed56f.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/c846391409d30e41.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/909df66f9bf3c443.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/268f40b1c611ce87.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/2045461d92bf6f9c.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/5fc1dbf469fd495b.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/0e42147cc13e9916.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/d090c84b4339c86e.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/8fc3f1b80630ac98.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/eec7ce722143c841.png" alt></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/06/a2dc187199daff4b.png" alt></p>
<p><img src="https://pic.imgdb.cn/item/63e0f2cf4757feff3388143a.jpg" alt></p>
<p><img src="https://pic.imgdb.cn/item/63e0f2da4757feff33882809.jpg" alt></p>
<p><img src="https://pic.imgdb.cn/item/63e0f2e64757feff33883a24.jpg" alt></p>
<h2><span id="概述">概述</span></h2>
<p>数据查询语言<strong>DQL</strong>，数据操纵语言<strong>DML</strong>，数据定义语言<strong>DDL</strong>，数据控制语言<strong>DCL</strong>。</p>
<blockquote>
<p>DQL：数据库查询语言。关键字：SELECT … FROM … WHERE。</p>
<p><a href="https://baike.baidu.com/item/DDL/21997?fromModule=lemma_inlink">DDL</a> ：数据库模式定义语言。关键字：CREATE，DROP，ALTER。</p>
<p><a href="https://baike.baidu.com/item/DML/10035808?fromModule=lemma_inlink">DML</a>：数据操纵语言。关键字：INSERT、UPDATE、DELETE。</p>
<p><a href="https://baike.baidu.com/item/DCL/6524388?fromModule=lemma_inlink">DCL</a>：数据控制语言 。关键字：GRANT、REVOKE。</p>
<p>TCL：事务控制语言。关键字：COMMIT、ROLLBACK、SAVEPOINT。</p>
<p>DDL,DML,DCL,DQL,TCL共同组成数据库的完整语言。</p>
</blockquote>
<h2><span id="关系数据库">关系数据库</span></h2>
<p>在关系数据库中，一张表中的每一行数据被称为一条记录。一条记录就是由多个字段组成的。例如，<code>students</code>表的两行记录：</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">class_id</th>
<th style="text-align:left">name</th>
<th style="text-align:left">gender</th>
<th style="text-align:left">score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">小明</td>
<td style="text-align:left">M</td>
<td style="text-align:left">90</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">1</td>
<td style="text-align:left">小红</td>
<td style="text-align:left">F</td>
<td style="text-align:left">95</td>
</tr>
</tbody>
</table>
<p>每一条记录都包含若干定义好的字段。同一个表的所有记录都有相同的字段定义。</p>
<h3><span id="主键">主键</span></h3>
<p>对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复不是指两条记录不完全相同，而是指能够通过某个字段唯一区分出不同的记录，这个字段被称为<em>主键</em>。</p>
<blockquote>
<p>例如，假设我们把<code>name</code>字段作为主键，那么通过名字<code>小明</code>或<code>小红</code>就能唯一确定一条记录。但是，这么设定，就没法存储同名的同学了，因为插入相同主键的两条记录是不被允许的。</p>
</blockquote>
<ol>
<li>记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响。</li>
<li>不使用任何业务相关的字段作为主键。</li>
</ol>
<blockquote>
<p>如果我们以学生的身份证号作为主键，似乎能唯一定位记录。然而，身份证号也是一种业务场景，如果身份证号升位了，或者需要变更，作为主键，不得不修改的时候，就会对业务产生严重影响。</p>
<p>因此，身份证号、手机号、邮箱地址这些看上去可以唯一的字段，均<em>不可</em>用作主键。</p>
</blockquote>
<p>作为主键最好是完全业务无关的字段，我们一般把这个字段命名为<code>id</code>。常见的可作为<code>id</code>字段的类型有：</p>
<ol>
<li>自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；</li>
<li>全局唯一GUID类型：使用一种全局唯一的字符串作为主键，类似<code>8f55d96b-8acc-4636-8cb8-76bf8abc2f57</code>。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。</li>
</ol>
<p>对于大部分应用来说，通常自增类型的主键就能满足需求。我们在<code>students</code>表中定义的主键也是<code>BIGINT NOT NULL AUTO_INCREMENT</code>类型。</p>
<blockquote>
<p>如果使用INT自增类型，那么当一张表的记录数超过2147483647（约21亿）时，会达到上限而出错。使用BIGINT自增类型则可以最多约922亿亿条记录。</p>
</blockquote>
<h3><span id="联合主键">联合主键</span></h3>
<p>关系数据库实际上还允许通过多个字段唯一标识记录，即两个或更多的字段都设置为主键，这种主键被称为联合主键。</p>
<p>对于联合主键，允许一列有重复，只要不是所有主键列都重复即可：</p>
<table>
<thead>
<tr>
<th style="text-align:left">id_num</th>
<th style="text-align:left">id_type</th>
<th style="text-align:left">other columns…</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">A</td>
<td style="text-align:left">…</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">A</td>
<td style="text-align:left">…</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">B</td>
<td style="text-align:left">…</td>
</tr>
</tbody>
</table>
<p>如果我们把上述表的<code>id_num</code>和<code>id_type</code>这两列作为联合主键，那么上面的3条记录都是允许的，因为没有两列主键组合起来是相同的。</p>
<p>没有必要的情况下，我们尽量不使用联合主键，因为它给关系表带来了复杂度的上升。</p>
<h3><span id="小结">小结</span></h3>
<p>主键是关系表中记录的唯一标识。主键的选取非常重要：主键不要带有业务含义，而应该使用BIGINT自增或者GUID类型。主键也不应该允许<code>NULL</code>。</p>
<p>可以使用多个列作为联合主键，但联合主键并不常用</p>
<h3><span id="外键">外键</span></h3>
<p>当我们用主键唯一标识记录时，我们就可以在<code>students</code>表中确定任意一个学生的记录：</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">name</th>
<th style="text-align:left">other columns…</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">小明</td>
<td style="text-align:left">…</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">小红</td>
<td style="text-align:left">…</td>
</tr>
</tbody>
</table>
<p>我们还可以在<code>classes</code>表中确定任意一个班级记录：</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">name</th>
<th style="text-align:left">other columns…</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">一班</td>
<td style="text-align:left">…</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">二班</td>
<td style="text-align:left">…</td>
</tr>
</tbody>
</table>
<p>但是我们如何确定<code>students</code>表的一条记录，例如，<code>id=1</code>的小明，属于哪个班级呢？</p>
<p>由于一个班级可以有多个学生，在关系模型中，这两个表的关系可以称为“一对多”，即一个<code>classes</code>的记录可以对应多个<code>students</code>表的记录。</p>
<p>为了表达这种一对多的关系，我们需要在<code>students</code>表中加入一列<code>class_id</code>，让它的值与<code>classes</code>表的某条记录相对应：</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">class_id</th>
<th style="text-align:left">name</th>
<th style="text-align:left">other columns…</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">小明</td>
<td style="text-align:left">…</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">1</td>
<td style="text-align:left">小红</td>
<td style="text-align:left">…</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">2</td>
<td style="text-align:left">小白</td>
<td style="text-align:left">…</td>
</tr>
</tbody>
</table>
<p>这样，我们就可以根据<code>class_id</code>这个列直接定位出一个<code>students</code>表的记录应该对应到<code>classes</code>的哪条记录。</p>
<p>例如：</p>
<ul>
<li>小明的<code>class_id</code>是<code>1</code>，因此，对应的<code>classes</code>表的记录是<code>id=1</code>的一班；</li>
<li>小红的<code>class_id</code>是<code>1</code>，因此，对应的<code>classes</code>表的记录是<code>id=1</code>的一班；</li>
<li>小白的<code>class_id</code>是<code>2</code>，因此，对应的<code>classes</code>表的记录是<code>id=2</code>的二班。</li>
</ul>
<p>在<code>students</code>表中，通过<code>class_id</code>的字段，可以把数据与另一张表关联起来，这种列称为<code>外键</code>。</p>
<p>外键并不是通过列名实现的，而是通过定义外键约束实现的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_class_id</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (class_id)</span><br><span class="line"><span class="keyword">REFERENCES</span> classes (id);</span><br></pre></td></tr></table></figure>
<p>其中，外键约束的名称<code>fk_class_id</code>可以任意，<code>FOREIGN KEY (class_id)</code>指定了<code>class_id</code>作为外键，<code>REFERENCES classes (id)</code>指定了这个外键将关联到<code>classes</code>表的<code>id</code>列（即<code>classes</code>表的主键）。</p>
<p>通过定义外键约束，关系数据库可以保证无法插入无效的数据。即如果<code>classes</code>表不存在<code>id=99</code>的记录，<code>students</code>表就无法插入<code>class_id=99</code>的记录。</p>
<p>由于外键约束会降低数据库的性能，大部分互联网应用程序为了追求速度，并不设置外键约束，而是仅靠应用程序自身来保证逻辑的正确性。这种情况下，<code>class_id</code>仅仅是一个普通的列，只是它起到了外键的作用而已。</p>
<p>要删除一个外键约束，也是通过<code>ALTER TABLE</code>实现的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_class_id;</span><br></pre></td></tr></table></figure>
<p>注意：删除外键约束并没有删除外键这一列。删除列是通过<code>DROP COLUMN ...</code>实现的。</p>
<h3><span id="多对多">多对多</span></h3>
<p>通过一个表的外键关联到另一个表，我们可以定义出一对多关系。有些时候，还需要定义“多对多”关系。例如，一个老师可以对应多个班级，一个班级也可以对应多个老师，因此，班级表和老师表存在多对多关系。</p>
<p>多对多关系实际上是通过两个一对多关系实现的，即通过一个中间表，关联两个一对多关系，就形成了多对多关系：</p>
<p><code>teachers</code>表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">张老师</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">王老师</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">李老师</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">赵老师</td>
</tr>
</tbody>
</table>
<p><code>classes</code>表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">一班</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">二班</td>
</tr>
</tbody>
</table>
<p>中间表<code>teacher_class</code>关联两个一对多关系：</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">teacher_id</th>
<th style="text-align:left">class_id</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">1</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">2</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">2</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">3</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">4</td>
<td style="text-align:left">2</td>
</tr>
</tbody>
</table>
<p>通过中间表<code>teacher_class</code>可知<code>teachers</code>到<code>classes</code>的关系：</p>
<ul>
<li><code>id=1</code>的张老师对应<code>id=1,2</code>的一班和二班；</li>
<li><code>id=2</code>的王老师对应<code>id=1,2</code>的一班和二班；</li>
<li><code>id=3</code>的李老师对应<code>id=1</code>的一班；</li>
<li><code>id=4</code>的赵老师对应<code>id=2</code>的二班。</li>
</ul>
<p>同理可知<code>classes</code>到<code>teachers</code>的关系：</p>
<ul>
<li><code>id=1</code>的一班对应<code>id=1,2,3</code>的张老师、王老师和李老师；</li>
<li><code>id=2</code>的二班对应<code>id=1,2,4</code>的张老师、王老师和赵老师；</li>
</ul>
<p>因此，通过中间表，我们就定义了一个“多对多”关系。</p>
<h3><span id="一对一">一对一</span></h3>
<p>一对一关系是指，一个表的记录对应到另一个表的唯一一个记录。</p>
<p>例如，<code>students</code>表的每个学生可以有自己的联系方式，如果把联系方式存入另一个表<code>contacts</code>，我们就可以得到一个“一对一”关系：</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">student_id</th>
<th style="text-align:left">mobile</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">135xxxx6300</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">2</td>
<td style="text-align:left">138xxxx2209</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">5</td>
<td style="text-align:left">139xxxx8086</td>
</tr>
</tbody>
</table>
<p>有细心的童鞋会问，既然是一对一关系，那为啥不给<code>students</code>表增加一个<code>mobile</code>列，这样就能合二为一了？</p>
<p>如果业务允许，完全可以把两个表合为一个表。但是，有些时候，如果某个学生没有手机号，那么，<code>contacts</code>表就不存在对应的记录。实际上，一对一关系准确地说，是<code>contacts</code>表一对一对应<code>students</code>表。</p>
<p>还有一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。例如，把一个大的用户表分拆为用户基本信息表<code>user_info</code>和用户详细信息表<code>user_profiles</code>，大部分时候，只需要查询<code>user_info</code>表，并不需要查询<code>user_profiles</code>表，这样就提高了查询速度。</p>
<h3><span id="小结">小结</span></h3>
<p>关系数据库通过外键可以实现一对多、多对多和一对一的关系。外键既可以通过数据库来约束，也可以不设置约束，仅依靠应用程序的逻辑来保证。</p>
<h3><span id="索引">索引</span></h3>
<ol>
<li>
<p>查询成千上万条记录时，使用索引可以提高查询速度</p>
<blockquote>
<p>索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度</p>
</blockquote>
</li>
<li>
<p>索引的效率与索引列的值是否散列有关</p>
<blockquote>
<p>该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如<code>gender</code>列，大约一半的记录值是<code>M</code>，另一半是<code>F</code>，因此，对该列创建索引就没有意义。</p>
<p>对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。</p>
</blockquote>
</li>
<li>
<p>索引对于用户和应用程序来说都是透明的</p>
<blockquote>
<p>无论是否创建索引，对于用户和应用程序来说，使用关系数据库不会有任何区别。这里的意思是说，当我们在数据库中查询时，如果有相应的索引可用，数据库系统就会自动使用索引来提高查询效率，如果没有索引，查询也能正常执行，只是速度会变慢。因此，索引可以在使用数据库的过程中逐步优化。</p>
</blockquote>
</li>
<li>
<p>可以对一张表创建多个索引</p>
</li>
<li>
<p>在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢</p>
</li>
</ol>
<p><strong>唯一索引</strong></p>
<ol>
<li>
<p>可以保证某一列的值具有唯一性</p>
</li>
<li>
<p>具有业务含义的列适合唯一索引</p>
<blockquote>
<p>在设计关系数据表的时候，看上去唯一的列，例如身份证号、邮箱地址等，因为他们具有业务含义，因此不宜作为主键。</p>
<p>但是，这些列根据业务要求，又具有唯一性约束：即不能出现两条记录存储了同一个身份证号。这个时候，就可以给该列添加一个唯一索引。</p>
</blockquote>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> INDEX uni_name (name);		<span class="comment">-- 唯一索引</span></span><br></pre></td></tr></table></figure>
<p>也可以只对某一列添加一个唯一约束而不创建唯一索引：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uni_name <span class="keyword">UNIQUE</span> (name);		<span class="comment">-- 唯一约束，此时name列没有索引，但仍具有唯一性保证</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>需要在examination_info表创建以下索引，在duration列创建普通索引idx_duration、在exam_id列创建唯一性索引uniq_idx_exam_id、在tag列创建全文索引full_idx_tag。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_duration <span class="keyword">ON</span> examination_info (duration);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX uniq_idx_exam_id <span class="keyword">ON</span> examination_info (exam_id); </span><br><span class="line"><span class="keyword">CREATE</span> FULLTEXT INDEX full_idx_tag <span class="keyword">ON</span> examination_info (tag);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>创建索引</strong></p>
<ol>
<li>
<p>CREATE</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span></span><br><span class="line">[<span class="keyword">UNIQUE</span> <span class="comment">-- 唯一索引</span></span><br><span class="line"><span class="operator">|</span> FULLTEXT <span class="comment">-- 全文索引</span></span><br><span class="line">] INDEX index_name <span class="keyword">ON</span> table_name <span class="comment">-- 不指定唯一或全文时默认普通索引</span></span><br><span class="line">(column1[(length) [<span class="keyword">DESC</span><span class="operator">|</span><span class="keyword">ASC</span>]] [,column2,...]) <span class="comment">-- 可以对多列建立组合索引 </span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>ALTER</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name </span><br><span class="line"><span class="keyword">ADD</span> [<span class="keyword">UNIQUE</span> <span class="operator">|</span> FULLTEXT] [INDEX] index_content (column1)	[,column2,...])<span class="comment">-- index_content索引名 content索引列</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>删除索引</strong></p>
<ol>
<li>
<p>DROP</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>ALTER</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">DROP</span> INDEX <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>
<p>删除examination_info表上的唯一索引uniq_idx_exam_id和全文索引full_idx_tag。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX uniq_idx_exam_id <span class="keyword">ON</span> examination_info;</span><br><span class="line"><span class="keyword">DROP</span> INDEX full_idx_tag <span class="keyword">ON</span> examination_info;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>使用</p>
<ol>
<li>索引使用时满足最左前缀匹配原则，即对于组合索引(col1, col2)，在不考虑引擎优化时，条件必须是col1在前col2在后，或者只使用col1，索引才会生效；</li>
<li>索引不包含有NULL值的列</li>
<li>一个查询只使用一次索引，where中如果使用了索引，order by就不会使用</li>
<li>like做字段比较时只有前缀确定时才会使用索引</li>
<li>在列上进行运算后不会使用索引，如year(start_time)&lt;2020不会使用start_time上的索引</li>
</ol>
<h2><span id="dql数据查询">DQL数据查询</span></h2>
<h3><span id="书写顺序">书写顺序</span></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	[<span class="keyword">distinct</span>]<span class="operator">|</span>[<span class="keyword">ALL</span>] 列<span class="number">1</span>[, 列<span class="number">2</span>, 列<span class="number">3</span>] 		</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">	<span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">JOIN</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">	<span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span>	</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">	<span class="operator">&lt;</span>包含聚合函数的条件表达式<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">	子句 <span class="keyword">asc</span>（默认）<span class="operator">|</span><span class="keyword">desc</span></span><br><span class="line">LIMIT <span class="operator">&lt;</span>N<span class="operator">&gt;</span> <span class="keyword">OFFSET</span> <span class="operator">&lt;</span>M<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="基本查询">基本查询</span></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>SELECT</code>是关键字，表示将要执行一个查询，<code>*</code>表示“所有列”，<code>FROM</code>表示将要从哪个表查询</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63dcb01c07d5ca72068acda0.jpg" alt></p>
<p>可以没有<code>FROM</code>子句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span><span class="operator">+</span><span class="number">200</span></span><br><span class="line"><span class="comment">-- 计算出表达式的结果，但不常用</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line"><span class="comment">-- 用来判断当前到数据库的连接是否有效</span></span><br></pre></td></tr></table></figure>
<h3><span id="投影查询">投影查询</span></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>[, 列<span class="number">2</span>, 列<span class="number">3</span>] <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> </span><br><span class="line"><span class="comment">-- 如果列名或者表名与关键字冲突，需要使用撇号包裹</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果我们只希望返回某些列的数据，而不是所有列的数据，我们可以用<code>SELECT 列1, 列2, 列3 FROM ...</code>，让结果集仅包含指定列。这种操作称为投影查询</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 从`students`表中返回`id`、`score`和`name`这三列：</span></span><br><span class="line"><span class="keyword">SELECT</span> id, score, name <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63dcb20a07d5ca72068f76d9.jpg" alt></p>
<p><strong>AS</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span> (<span class="keyword">AS</span>) 别名<span class="number">1</span>, 列<span class="number">2</span> (<span class="keyword">AS</span>) 别名<span class="number">2</span>, 列<span class="number">3</span> (<span class="keyword">AS</span>) 别名<span class="number">3</span> <span class="keyword">FROM</span> ...</span><br></pre></td></tr></table></figure>
<ul>
<li>使用<code>SELECT 列1, 列2, 列3 FROM ...</code>时，可以设置结果集显示的列名</li>
<li>AS可以省略</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用投影查询，并将列名重命名：</span></span><br><span class="line"><span class="keyword">SELECT</span> id, score points, name <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63dcb23a07d5ca72069010ea.jpg" alt></p>
<p><strong>DISTINCT</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>]<span class="operator">|</span>[<span class="keyword">ALL</span>] 列<span class="number">1</span>[，列<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>DISTINCT用来查询修饰字段不重复记录的条数,它将每个不同(唯一)值返回的行数限制为一个任意行。</p>
<p>如果未指定<code>DISTINCT</code>子句，则默认情况下显示满足选择条件的所有行。与指定ALL子句相同</p>
</blockquote>
<ol>
<li>为修饰字段的每个不重复组合返回一行。可以指定一个或多个修饰字段</li>
<li>在SELECT语句中使用DISTINCT，必须放在第一个要查询字段的开头</li>
<li>不能在DML语句（ INSERT, DELETE, UPDATE） 中使用</li>
<li>聚合函数也可以使用DISTINCT，COUNT(DISTINCT 列1，列2)可以实现查询不重复分组后每组的行数</li>
</ol>
<h3><span id="条件查询">条件查询</span></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="operator">|</span>列 <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>条件表达式</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">条件</th>
<th>符号</th>
<th style="text-align:left">表达式举例1</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">判断相等</td>
<td>=</td>
<td style="text-align:left">score = 80</td>
<td style="text-align:left">字符串需要用单引号括起来</td>
</tr>
<tr>
<td style="text-align:left">判断大于</td>
<td>&gt;</td>
<td style="text-align:left">score &gt; 80</td>
<td style="text-align:left">字符串比较根据ASCII码，中文字符比较根据数据库设置</td>
</tr>
<tr>
<td style="text-align:left">判断大于或相等</td>
<td>&gt;=</td>
<td style="text-align:left">score &gt;= 80</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">判断小于</td>
<td>&lt;</td>
<td style="text-align:left">score &lt; 80</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">判断小于或相等</td>
<td>&lt;=</td>
<td style="text-align:left">score &lt;= 80</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">判断不相等</td>
<td>&lt;&gt;</td>
<td style="text-align:left">score &lt;&gt; 80</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">判断包含于</td>
<td>IN</td>
<td style="text-align:left">score in(60,70,80,90)</td>
<td style="text-align:left">score = 60 OR score = 70 OR score = 80 OR score = 90</td>
</tr>
<tr>
<td style="text-align:left">判断在-之间</td>
<td>BETWEEN</td>
<td style="text-align:left">score between 60 and 100</td>
<td style="text-align:left">score &gt;= 60 AND score &lt;= 100</td>
</tr>
<tr>
<td style="text-align:left">判断空</td>
<td>IS NULL</td>
<td style="text-align:left">score IS NULL</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">判断非空</td>
<td>IS NOT NULL</td>
<td style="text-align:left">score IS NOT NULL</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">判断相似</td>
<td>LIKE</td>
<td style="text-align:left">name LIKE ‘ab%’</td>
<td style="text-align:left">%表示任意字符，例如’ab%‘将匹配’ab’，‘abc’，‘abcd’</td>
</tr>
<tr>
<td style="text-align:left">判断正则表达式</td>
<td>RLIKE</td>
<td style="text-align:left">name RLIKE ‘<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>+$’</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">判断存在</td>
<td>EXISTS</td>
<td style="text-align:left">EXISTS 查询子句</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p><strong>LIKE</strong></p>
<ol>
<li>% 通配多个任意字符或者没有任意字符</li>
<li>_ 通配必须有一个任意字符</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询姓刘的同学</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span>  <span class="keyword">from</span> stu</span><br><span class="line"><span class="keyword">where</span> `name` <span class="keyword">like</span> <span class="string">&#x27;刘%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学,且必须三个字</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span>  <span class="keyword">from</span> stu</span><br><span class="line"><span class="keyword">where</span> `name` <span class="keyword">like</span> <span class="string">&#x27;刘__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名含有H的同学</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span>  <span class="keyword">from</span> stu</span><br><span class="line"><span class="keyword">where</span> `name` <span class="keyword">like</span> <span class="string">&#x27;%H%&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>RLIKE</strong></p>
<blockquote>
<p>后接正则表达式 （<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>+$）</p>
</blockquote>
<table>
<thead>
<tr>
<th>字符</th>
<th>说明</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>^</td>
<td>表示匹配的字符必须在最前边</td>
<td>^A不匹配“an A”中的‘A’，但匹配“An A”中最前面的‘A’</td>
</tr>
<tr>
<td>$</td>
<td>与^类似，匹配最末的字符</td>
<td>t$不匹配“eater”中的‘t’，但匹配“eat”中的‘t’</td>
</tr>
<tr>
<td>[0-9]</td>
<td>字符列表，匹配列出中的任一个字符。你可以通过连字符-指出字符范围</td>
<td>[abc]跟[a-c]一样。它们匹配“brisket”中的‘b’和“ache”中的‘c’</td>
</tr>
<tr>
<td>+</td>
<td>匹配+号前面的字符1次及以上。等价于{1,}</td>
<td>a+匹配“candy”中的‘a’和“caaaaaaandy”中的所有‘a’</td>
</tr>
</tbody>
</table>
<p>来源:<a href="https://www.yulucn.com/question/4866556442">https://www.yulucn.com/question/4866556442</a></p>
<p><strong>EXISTS</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXISTS</span> (查询子句)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>判断查询子句是否有记录，如果有一条或多条记录存在返回 True，否则返回 False</p>
</blockquote>
<ul>
<li>UNION搭配EXISTS可以实现复杂的条件查询</li>
</ul>
<p><strong>AND</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>条件<span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">AND</span> <span class="operator">&lt;</span>条件<span class="number">2</span><span class="operator">&gt;</span>					<span class="comment">-- 表达满足条件1并且满足条件2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,gender,score <span class="keyword">FROM</span> students  <span class="comment">-- 查找及格的男同学</span></span><br><span class="line"><span class="keyword">WHERE</span> score <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">AND</span> gender <span class="operator">=</span> &quot;M&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63dcb7e707d5ca72069a274a.jpg" alt></p>
<p><strong>OR</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>条件<span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">OR</span> <span class="operator">&lt;</span>条件<span class="number">2</span><span class="operator">&gt;</span>					<span class="comment">-- 表达满足条件1、条件2其中一个</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,name,gender,score <span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">OR</span> id <span class="operator">=</span> <span class="number">2</span>				<span class="comment">-- 查询学号是1和2的同学</span></span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63dcb8af07d5ca72069bca88.jpg" alt></p>
<p><strong>NOT</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">NOT</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>						<span class="comment">-- 表示“不符合该条件”的记录</span></span><br></pre></td></tr></table></figure>
<h3><span id="排序">排序</span></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 子句 <span class="keyword">asc</span>（默认）<span class="operator">|</span><span class="keyword">desc</span> 		<span class="comment">-- 默认按照子句的从低到高排序</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 按照成绩排序（降序）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line"><span class="comment">-- 按照年龄降序排序，同岁的学生按照分数降序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">year</span>(age) <span class="keyword">desc</span> ,score <span class="keyword">desc</span> </span><br></pre></td></tr></table></figure>
<h3><span id="分页查询">分页查询</span></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LIMIT <span class="operator">&lt;</span>N<span class="operator">&gt;</span> <span class="keyword">OFFSET</span> <span class="operator">&lt;</span>M<span class="operator">&gt;</span>				<span class="comment">-- 从结果集中的第M号记录开始取出N条记录</span></span><br><span class="line"><span class="comment">-- N：每页的数量	M：当前页数</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br><span class="line">LIMIT <span class="number">3</span> <span class="keyword">OFFSET</span> <span class="number">0</span>					<span class="comment">-- 第1页从0号记录开始,OFFSET 0 可以省略</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br><span class="line">LIMIT <span class="number">3</span> <span class="keyword">OFFSET</span> <span class="number">3</span>					<span class="comment">-- 第2页从3号记录开始</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br><span class="line">LIMIT <span class="number">3</span> <span class="keyword">OFFSET</span> <span class="number">6</span>					<span class="comment">-- 第3页从6号记录开始</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br><span class="line">LIMIT <span class="number">3</span> <span class="keyword">OFFSET</span> <span class="number">9</span>					<span class="comment">-- 第4页从9号记录开始</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/03/a1ffbb51822fa121.png" alt></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br><span class="line">LIMIT <span class="number">3</span> <span class="keyword">OFFSET</span> <span class="number">20</span>					<span class="comment">-- 超过记录，得到一个空的结果集</span></span><br></pre></td></tr></table></figure>
<h3><span id="聚合查询">聚合查询</span></h3>
<ul>
<li>多行数据变成一个数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">聚合函数([<span class="keyword">DISTINCT</span>]列名<span class="operator">|</span>表达式)		 				<span class="comment">-- 列名可以为 * 表示所有列</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>聚合函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>COUNT</td>
<td>计算某一列的总数</td>
</tr>
<tr>
<td>AVG</td>
<td>计算某一列的平均值，该列必须为数值类型</td>
</tr>
<tr>
<td>SUM</td>
<td>计算某一列的合计值，该列必须为数值类型</td>
</tr>
<tr>
<td>MAX</td>
<td>计算某一列的最大值，对于字符型字符类型返回排序最后的字符</td>
</tr>
<tr>
<td>MIN</td>
<td>计算某一列的最小值，对于字符型字符类型返回排序最前的字符</td>
</tr>
</tbody>
</table>
<p>如果聚合查询的<code>WHERE</code>条件没有匹配到任何行，<code>COUNT()</code>会返回0，而<code>SUM()</code>、<code>AVG()</code>、<code>MAX()</code>和<code>MIN()</code>会返回<code>NULL</code></p>
<p><strong>分组聚合</strong></p>
<ul>
<li>按照指定列拆分，列数据相同的数据被合并，最终多行数据分为若干行</li>
<li>分组指定的列能与聚合函数一起显示，而显示非聚合的列也非分组的列没有实际意义</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span>					<span class="comment">-- 可以是单列，也可以是多列</span></span><br></pre></td></tr></table></figure>
<p><strong>如何对聚合函数的列进行条件查询</strong></p>
<ul>
<li>
<p>WHERE子句不能使用聚合函数，一般在分组后使用HAVING关键字</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">HAVING</span> <span class="operator">&lt;</span>包含聚合函数的条件表达式<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>可以根据聚合函数列排序（order by 子句能使用聚合函数）</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询男同学和女同学的平均年龄,且只显示平均年龄大于23岁的</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	gender,</span><br><span class="line">	<span class="built_in">avg</span>(age)</span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line">	user_profile</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">	gender </span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">	<span class="built_in">avg</span>(age)<span class="operator">&gt;</span><span class="number">23</span></span><br></pre></td></tr></table></figure>
<p>聚合查询应用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    tag,</span><br><span class="line">    difficulty,</span><br><span class="line">    ROUND((<span class="built_in">SUM</span>(score) <span class="operator">-</span> <span class="built_in">MAX</span>(score) <span class="operator">-</span> <span class="built_in">MIN</span>(score)) <span class="operator">/</span> (<span class="built_in">COUNT</span>(score) <span class="number">-2</span>),<span class="number">1</span>) clip_avg_score</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    exam_record er,</span><br><span class="line">    examination_info ei</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    ei.exam_id <span class="operator">=</span> er.exam_id</span><br><span class="line">    <span class="keyword">AND</span> submit_time <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">    <span class="keyword">AND</span> tag <span class="operator">=</span> <span class="string">&#x27;SQL&#x27;</span></span><br><span class="line">    <span class="keyword">AND</span> difficulty <span class="operator">=</span> <span class="string">&#x27;hard&#x27;</span></span><br></pre></td></tr></table></figure>
<h3><span id="多表查询">多表查询</span></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="number">1</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>别名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>表名<span class="number">2</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>别名<span class="number">2</span><span class="operator">&gt;</span>	</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>返回结果为表1和表2的“乘积”</p>
<blockquote>
<p>即表1的每一行与表2的每一行都两两拼在一起返回</p>
<p>结果集的列数是表1和表2的列数之和</p>
<p>行数是表1和表2的行数之积</p>
</blockquote>
</li>
<li>
<p>这种多表查询又称笛卡尔查询，使用笛卡尔查询时要非常小心，由于结果集是目标表的行数乘积，对两个各自有100行记录的表进行笛卡尔查询将返回1万条记录，对两个各自有1万行记录的表进行笛卡尔查询将返回1亿条记录。</p>
</li>
</ul>
<h3><span id="连接查询">连接查询</span></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INNER</span><span class="operator">|</span><span class="keyword">LEFT</span> <span class="keyword">OUTER</span><span class="operator">|</span><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span>  <span class="keyword">JOIN</span> <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>连接条件<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>内连接</strong></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/03/f893d48c7c951a76.png" alt></p>
<p>只返回同时存在于两张表的行数据</p>
<p><code>students</code>表的<code>class_id</code>包含1，2，3，<code>classes</code>表的<code>id</code>包含1，2，3，4</p>
<p>INNER JOIN根据条件<code>s.class_id = c.id</code>返回的结果集仅包含1，2，3。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/03/ffe3367a85280dab.png" alt></p>
<p><strong>左外连接</strong></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/03/fb563ac69a54d9d9.png" alt></p>
<p>LEFT OUTER JOIN则返回左表都存在的行</p>
<p>如果给students表增加一行，并添加class_id=5，classes表并不存在id=5的行</p>
<p>LEFT OUTER JOIN的结果会增加一行，对应的<code>class_name</code>是<code>NULL</code>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/03/481c20f1e19c820f.png" alt></p>
<p><strong>右外连接</strong></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/03/5ebf76c465113c6d.png" alt></p>
<p>RIGHT OUTER JOIN返回右表都存在的行</p>
<p>如果某一行仅在右表存在，那么结果集就会以<code>NULL</code>填充剩下的字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.bmp.ovh/imgs/2023/02/03/47439395f20cd95e.png" alt></p>
<p><strong>USING</strong></p>
<blockquote>
<p>sql/92标准可以使用using关键字来简化连接查询，但是只是在查询满足以下条件时<br>
1.查询必须是等值连接<br>
2.等值连接中的列必须具有相同的名称和数据类型</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">USING</span> (列<span class="number">1</span>，列<span class="number">2</span>，...)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> a (<span class="keyword">AS</span> 别名a) <span class="keyword">JOIN</span> (b 别名b) <span class="keyword">ON</span> 别名a.列<span class="number">1</span> <span class="operator">=</span> 别名b.列<span class="number">1</span></span><br><span class="line">	<span class="keyword">AND</span> 别名a.列<span class="number">2</span> <span class="operator">=</span> 别名b.列<span class="number">2</span> </span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<ul>
<li>可以一次指定多个相同名称、数据类型的列</li>
<li>不能指定表的别名</li>
<li>不能 AND 附加别的连接限制条件</li>
</ul>
<h3><span id="日期函数">日期函数</span></h3>
<p><strong>数据类型</strong></p>
<ul>
<li>DATE - 格式 YYYY-MM-DD</li>
<li>DATETIME - 格式: YYYY-MM-DD HH:MM:SS</li>
<li>TIMESTAMP - 格式: YYYY-MM-DD HH:MM:SS</li>
<li>YEAR - 格式 YYYY 或 YY</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询所有的学生，且需要查看其实际年龄（多少岁）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span>,(<span class="keyword">year</span>(curdate())<span class="operator">-</span><span class="keyword">year</span>(age)) <span class="keyword">as</span> 岁数 <span class="keyword">from</span> stu</span><br></pre></td></tr></table></figure>
<p><strong>日期格式化</strong></p>
<p>DATE_FORMAT(date,format)</p>
<blockquote>
<p>用format 格式化date，format 为格式化字符串</p>
<p>‘%Y-%m-%d %H:%i:%s’  2021-08-17 14:42:31</p>
<p>‘%Y%m’	202108</p>
</blockquote>
<table>
<thead>
<tr>
<th>格式化标识符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%Y</td>
<td>年，4位</td>
</tr>
<tr>
<td>%y</td>
<td>年，2位</td>
</tr>
<tr>
<td>%M</td>
<td>月，月名称，如January</td>
</tr>
<tr>
<td>%m</td>
<td>月，2位（01-12）</td>
</tr>
<tr>
<td>%D</td>
<td>日，如1st，2nd</td>
</tr>
<tr>
<td>%d</td>
<td>日，2位（01-31）</td>
</tr>
<tr>
<td>%H</td>
<td>时，2位，24小时制</td>
</tr>
<tr>
<td>%h</td>
<td>时，12小时制</td>
</tr>
<tr>
<td>%i</td>
<td>分，2位（00-59）</td>
</tr>
<tr>
<td>%S或%s</td>
<td>秒，2位（00-59）</td>
</tr>
<tr>
<td>%p</td>
<td>PM 或AM</td>
</tr>
<tr>
<td>%r</td>
<td>HH:mm:ss PM形式时间</td>
</tr>
<tr>
<td>%W</td>
<td>周，周名，如Tuesday</td>
</tr>
<tr>
<td>%w</td>
<td>周，0-6，0为周日</td>
</tr>
<tr>
<td>%j</td>
<td>当前日期所在一年中的天数，3位（001-366）</td>
</tr>
</tbody>
</table>
<p><strong>距离</strong></p>
<ol>
<li>
<p>TIMESTAMPDIFF(interval, time_start, time_end)</p>
<blockquote>
<p>可计算time_start、time_end的时间差，单位以指定的interval为准，常用可选：</p>
<ul>
<li>SECOND 秒</li>
<li>MINUTE 分钟（返回秒数差除以60的整数部分）</li>
<li>HOUR 小时（返回秒数差除以3600的整数部分）</li>
<li>DAY 天数（返回秒数差除以3600*24的整数部分）</li>
<li>MONTH 月数</li>
<li>YEAR 年数</li>
</ul>
</blockquote>
</li>
<li>
<p>DATEDIFF(time_end,time_start)</p>
<blockquote>
<p>计算time_start、time_end之间的天数</p>
</blockquote>
</li>
</ol>
<p><strong>运算</strong></p>
<p>DATE_ADD(date,	INTERVAL expr unit)</p>
<blockquote>
<p>日期加上指定单位的时间，第二参数interval 后支持负数，date_add既可以加也可以减</p>
</blockquote>
<table>
<thead>
<tr>
<th>interval</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>interval 1 day</td>
<td>1天</td>
</tr>
<tr>
<td>interval 1 hour</td>
<td>1小时</td>
</tr>
<tr>
<td>interval 1 minute</td>
<td>1分钟</td>
</tr>
<tr>
<td>interval 1 second</td>
<td>1秒</td>
</tr>
<tr>
<td>interval 1 microsecond</td>
<td>1毫秒</td>
</tr>
<tr>
<td>interval 1 week</td>
<td>1周</td>
</tr>
<tr>
<td>interval 1 month</td>
<td>1月</td>
</tr>
<tr>
<td>interval 1 quarter</td>
<td>1季</td>
</tr>
<tr>
<td>interval 1 year</td>
<td>1年</td>
</tr>
</tbody>
</table>
<p><strong>计算某个月的天数</strong></p>
<ol>
<li>
<pre><code class="language-sql">DATEDIFF(DATE_ADD(time,INTERVAL 1 MONTH),time)		-- 距离下个月同天的天数
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. ~~~sql</span><br><span class="line">   day(last_day(time))						   		-- 获取本月最后一天</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
</ol>
<p><strong>MySQL Date 函数</strong></p>
<p>涉及时分秒一般为DATETIME的函数</p>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/sql/func_now.asp">NOW()</a></td>
<td style="text-align:left">返回当前的日期和时间</td>
</tr>
<tr>
<td style="text-align:left">YEAR(列名)</td>
<td style="text-align:left">返回当前的时间的年</td>
</tr>
<tr>
<td style="text-align:left">MONTH(列名)</td>
<td style="text-align:left">以整数形式返回当前的时间的月</td>
</tr>
<tr>
<td style="text-align:left">DAY(列名)</td>
<td style="text-align:left">以整数形式返回当前的时间的天</td>
</tr>
<tr>
<td style="text-align:left">HOUR(列名)</td>
<td style="text-align:left">以整数形式返回当前的时间的小时</td>
</tr>
<tr>
<td style="text-align:left">MINUTE(列名)</td>
<td style="text-align:left">以整数形式返回当前的时间的分钟</td>
</tr>
<tr>
<td style="text-align:left">SECOND(列名)</td>
<td style="text-align:left">以整数形式返回当前的时间的秒</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/sql/func_curdate.asp">CURDATE()</a></td>
<td style="text-align:left">返回当前的日期</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/sql/func_curtime.asp">CURTIME()</a></td>
<td style="text-align:left">返回当前的时间</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/sql/func_date.asp">DATE()</a></td>
<td style="text-align:left">提取日期或日期/时间表达式的日期部分</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/sql/func_extract.asp">EXTRACT()</a></td>
<td style="text-align:left">返回日期/时间按的单独部分</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/sql/func_date_add.asp">DATE_ADD()</a></td>
<td style="text-align:left">给日期添加指定的时间间隔</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/sql/func_date_sub.asp">DATE_SUB()</a></td>
<td style="text-align:left">从日期减去指定的时间间隔</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/sql/func_datediff_mysql.asp">DATEDIFF()</a></td>
<td style="text-align:left">返回两个日期之间的天数</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/sql/func_date_format.asp">DATE_FORMAT()</a></td>
<td style="text-align:left">用不同的格式显示日期/时间</td>
</tr>
</tbody>
</table>
<p><strong>时间戳-日期格式转化</strong></p>
<ol>
<li>from_unixtime(列名,字符串格式)：将时间戳转换成日期</li>
<li>unix_timestamp():将日期转换回时间戳</li>
</ol>
<h3><span id="条件函数">条件函数</span></h3>
<p><strong>IF 条件函数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if(x<span class="operator">=</span>n,a,b)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>x=n代表判断条件，如果x=n时，那么结果返回a，否则返回b</p>
</blockquote>
<p><strong>Case when 条件函数</strong></p>
<p>按照多个条件更换列中的内容</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> 测试表达式							<span class="comment">-- 测试表达式可省略，此时为搜索CASE函数</span></span><br><span class="line"><span class="keyword">WHEN</span> 简单表达式<span class="number">1</span> <span class="keyword">THEN</span> 结果表达式<span class="number">1</span></span><br><span class="line"><span class="keyword">WHEN</span> 简单表达式<span class="number">2</span> <span class="keyword">THEN</span> 结果表达式<span class="number">2</span> …</span><br><span class="line"><span class="keyword">WHEN</span> 简单表达式n <span class="keyword">THEN</span> 结果表达式n</span><br><span class="line">[ <span class="keyword">ELSE</span> 结果表达式n<span class="operator">+</span><span class="number">1</span> ]</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
<p>若没有测试表达式</p>
<ol>
<li>从上到下判断WHEN子句的简单表达式的值</li>
<li>若简单表达式的值为TRUE，则返回WHEN子句所对应的结果表达式的值</li>
<li>如果所有简单表达式的值为FALSE
<ol>
<li>若指定了ELSE子句,则返回ELSE子句中指定的结果表达式的值</li>
<li>若没有指定ELSE子句，则返回NULL</li>
</ol>
</li>
</ol>
<p>若有测试表达式</p>
<blockquote>
<ol>
<li>从上到下判断测试表达式的值与每个WHEN子句的简单表达式是否相等</li>
<li>如果某个简单表达式的值与测试表达式的值相等，则返回第一个与之匹配的WHEN子句所对应的结果表达式的值</li>
<li>如果所有简单表达式的值与测试表达式的值都不相等</li>
<li>若指定了ELSE子句,则返回ELSE子句中指定的结果表达式的值</li>
<li>若没有指定ELSE子句，则返回NULL</li>
</ol>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    device_id,</span><br><span class="line">    gender,</span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">        <span class="keyword">when</span> age<span class="operator">&gt;=</span><span class="number">25</span> <span class="keyword">then</span> <span class="string">&#x27;25岁及以上&#x27;</span></span><br><span class="line">        <span class="keyword">when</span> age<span class="operator">&gt;=</span><span class="number">20</span> <span class="keyword">then</span> <span class="string">&#x27;20-24岁&#x27;</span></span><br><span class="line">        <span class="keyword">when</span> age<span class="operator">&lt;</span><span class="number">20</span> <span class="keyword">then</span> <span class="string">&#x27;20岁以下&#x27;</span></span><br><span class="line">        <span class="keyword">else</span> <span class="string">&#x27;其他&#x27;</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">as</span> age_cut</span><br><span class="line"><span class="keyword">from</span> user_profile</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3><span id="文本函数">文本函数</span></h3>
<p><strong>CONCAT函数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> CONCAT(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;bcd&#x27;</span>,<span class="string">&#x27;ff&#x27;</span>)	<span class="comment">-- 返回结果为 ‘abcbcdff&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>CONCAT函数用于将两个或多个字符串连接起来，形成一个单一的字符串</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">GROUP_CONCAT([<span class="keyword">DISTINCT</span>] 要连接的字段 [<span class="keyword">Order</span> <span class="keyword">BY</span> <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span> 排序字段] [Separator <span class="string">&#x27;分隔符&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p><strong>SUBSTRING_INDEX</strong></p>
<p>将字符串依据某个指定分隔符进行切分，并返回指定位置分隔符前的字符。(字段分割符,位置）</p>
<p>从 ‘180,78kg,male’ 分别取出身高体重</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SUBSTRING_INDEX(<span class="string">&#x27;180,78kg,male&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;1&#x27;</span>) <span class="keyword">as</span> height	<span class="comment">-- 返回身高: &#x27;180&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SUBSTRING_INDEX(<span class="string">&#x27;180,78kg,male&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;2&#x27;</span>) <span class="keyword">as</span> height	<span class="comment">-- 返回&#x27;180,78kg&#x27;	多取出身高的信息</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在上述的基础上嵌套一层查询，负数位置代表从后向前取，-1代表最后一位，相当于取出’180,78kg&#x27;的最后一个逗号后的字符</span></span><br><span class="line"><span class="keyword">select</span> SUBSTRING_INDEX(SUBSTRING_INDEX(<span class="string">&#x27;180,78kg,male&#x27;</span>,<span class="string">&#x27;,’,&#x27;</span><span class="number">2</span>’),’,’,<span class="number">-1</span>) <span class="keyword">as</span> height</span><br></pre></td></tr></table></figure>
<p><strong>INSTR函数</strong></p>
<ul>
<li>instr(substr,str)：返回substr字符串在str里第一次出现的位置，从1开始，没有返回0</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> instr(<span class="string">&#x27;bacd&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) 	<span class="comment">-- 从bacd字符串中寻找字符a首次出现的位置，输出值为2</span></span><br></pre></td></tr></table></figure>
<p><strong>substring函数</strong></p>
<ul>
<li>
<p>substr（string A，int start，int len）,返回字符串A从下标start位置开始，长度为len的字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(‘bacda’,<span class="number">2</span>,<span class="number">2</span>)	<span class="comment">-- 输出：’ac’，代码表示返回从第2个字符起后2个字符串</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>substring（string A，int start）,在不指定返回字符串长度的情况下，返回字符串A从下标start位置到结尾的字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(‘bacda’,<span class="number">2</span>)		<span class="comment">-- 输出：’acda’，代码表示返回从第2个字符起到末尾所有的字符串</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>大小写转换</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>UPPER(str)</td>
<td>将参数转换为大写</td>
</tr>
<tr>
<td>LOWER(str)</td>
<td>将参数转换为小写</td>
</tr>
<tr>
<td>LENGTH(str)</td>
<td>返回文本字段中值的长度</td>
</tr>
<tr>
<td>CHAR_LENGTH(str)</td>
<td>返回文本字段中字符的长度</td>
</tr>
<tr>
<td>CONCAT(str1,str2,…)</td>
<td>将多个字符串连接成一个字符串</td>
</tr>
<tr>
<td>SUBSTRING_INDEX(str,分隔符,index)</td>
<td>字符串依据某个分隔符进行切分，第index个分隔符前的字符</td>
</tr>
<tr>
<td>INSTR(substr,str)</td>
<td>返回substr字符串在str里第一次出现的位置，从1开始，没有返回0</td>
</tr>
<tr>
<td>SUBSTRING(str,int start,int len)</td>
<td>返回字符串从下标start位置开始，长度为len的字符串，从1开始，没有返回0</td>
</tr>
<tr>
<td>SUBSTRING(str,int start)</td>
<td>返回字符串从下标start位置到结尾的字符串</td>
</tr>
</tbody>
</table>
<h3><span id="窗口函数">窗口函数</span></h3>
<p><strong>使用场景</strong></p>
<ol>
<li>排名问题：每个部门按业绩来排名</li>
<li>topN问题：找出每个部门排名前N的员工进行奖励</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>窗口函数<span class="operator">&gt;</span> <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>用于分组的列名<span class="operator">&gt;</span>					       <span class="comment">-- 窗口函数可以是专用窗口函数或聚合函数</span></span><br><span class="line">                 <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>用于排序的列名<span class="operator">&gt;</span> <span class="keyword">RANGE</span><span class="operator">|</span><span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> 边界规则<span class="number">1</span> <span class="keyword">AND</span> 边界规则<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p><strong>窗口函数与GROUP BY</strong></p>
<table>
<thead>
<tr>
<th>窗口函数</th>
<th>GROUP BY</th>
</tr>
</thead>
<tbody>
<tr>
<td>同时分组和排序</td>
<td>分组</td>
</tr>
<tr>
<td>不减少原表的行数（特殊DENSE_RANK）</td>
<td>汇总后改变了表的行数，一行只有一个类别</td>
</tr>
<tr>
<td>在where或者group by子句处理后的结果上操作，原则上只能写在select子句中</td>
<td>指定的书写位置</td>
</tr>
<tr>
<td>Mysql从8.0版本才开始支持窗口函数</td>
<td></td>
</tr>
<tr>
<td>对于每行数据都有新的标记（与使用的窗口函数有关）</td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>窗口函数中的ORDER BY</strong></p>
<p><a href="https://www.cnblogs.com/lihaoyang/p/6756956.html">SQL开窗函数 - 我俩绝配 - 博客园 (cnblogs.com)</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>用于排序的列名<span class="operator">&gt;</span> [<span class="keyword">RANGE</span><span class="operator">|</span><span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> 边界规则<span class="number">1</span> <span class="keyword">AND</span> 边界规则<span class="number">2</span>] <span class="comment">-- 定位计算范围，这个子句又被称为定位框架</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>RANGE表示按照值的范围进行范围的定义</p>
<p>ROWS表示按照行的范围进行范围的定义</p>
</blockquote>
<table>
<thead>
<tr>
<th>边界规则</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CURRENT ROW</td>
<td>当前行</td>
</tr>
<tr>
<td>N PRECEDING</td>
<td>前N行</td>
</tr>
<tr>
<td>UNBOUNDED PRECEDING</td>
<td>一直到第一条记录</td>
</tr>
<tr>
<td>N FOLLOWING</td>
<td>后N行</td>
</tr>
<tr>
<td>UNBOUNDED FOLLOWING</td>
<td>一直到最后一条记录</td>
</tr>
</tbody>
</table>
<p>查询从第一行到当前行为一组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>(fsalary) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> fsalary [<span class="keyword">rows</span> <span class="keyword">between</span> unbounded preceding <span class="keyword">and</span> <span class="keyword">current</span> <span class="type">row</span>]）	<span class="comment">-- 可以省略定位框架声明部分</span></span><br></pre></td></tr></table></figure>
<p>row换成range，按照值范围进行定位</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>(fsalary) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> fsalary <span class="keyword">range</span> <span class="keyword">between</span> unbounded preceding <span class="keyword">and</span> <span class="keyword">current</span> <span class="type">row</span>) 到当前行工资求和</span><br></pre></td></tr></table></figure>
<p><img src="https://images2015.cnblogs.com/blog/702434/201704/702434-20170424155347381-935401731.png" alt="img"></p>
<p>处理并列排序的情况：Lily、Swing、Bill这三个人的工资都是2000元</p>
<ol>
<li>“ROWS”进行行的范围定位，则计算从第一条到当前行的累积和</li>
<li>“RANGE”进行值的范围定位，则计算从第一个值1000到当前值的累计和，由于等于2000元的工资有三个人，所以对 Lily、Swing、Bill这三个人进行开窗函数聚合计算的时候得到的都是7000（ “ 1000+2000+2000+2000 ”）</li>
</ol>
<p>查询前两行和后两行为一组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">SUM</span>(FSalary) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> FSalary <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="number">2</span> PRECEDING <span class="keyword">AND</span> <span class="number">2</span> FOLLOWING)  <span class="comment">-- 前二后二和</span></span><br></pre></td></tr></table></figure>
<p><img src="https://images2015.cnblogs.com/blog/702434/201704/702434-20170424155602225-1292657393.png" alt="img"></p>
<ol>
<li>按照FSalary进行排序，然后计算从当前行前两行（2 PRECEDING）到当前行后两行（2 FOLLOWING）的工资和</li>
<li>第一、第二条的“前两行”不存在，最后两行数据的“后两行”也不存在，因此计算时候按照前两行不存在进行计算，结果为空值NULL而非0</li>
</ol>
<p><strong>分类</strong></p>
<ol>
<li>专用窗口函数</li>
<li>聚合函数</li>
</ol>
<p><strong>专用窗口函数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> score,RANK<span class="operator">|</span>DENSE_RANK<span class="operator">|</span><span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span>([<span class="keyword">PARTITION</span> <span class="keyword">BY</span>] <span class="keyword">ORDER</span> <span class="keyword">BY</span> score)rank</span><br><span class="line"><span class="keyword">FROM</span> exam_record</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63e49a844757feff3306d93f.jpg" alt></p>
<ul>
<li>RANK、DENSE_RANK、ROW_NUMBER使用时遇到重复字段的标号规则不同</li>
</ul>
<p><strong>特殊窗口函数</strong></p>
<p><strong>PERCENT_RANK</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> score,<span class="built_in">PERCENT_RANK</span>() <span class="keyword">OVER</span>([<span class="keyword">PARTITION</span> <span class="keyword">BY</span>] <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>)percent_ranking</span><br><span class="line"><span class="keyword">FROM</span> practice_record</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63e49c5a4757feff330b7e27.jpg" alt></p>
<ul>
<li>PERCENT_RANK会将排序后的标号均匀分布在[0,1]上</li>
<li>常用于查询有序下的前百分之几的数据</li>
</ul>
<p><strong>LEAD</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">lead</span>(列名, 行数, 默认值) <span class="keyword">over</span> (		<span class="comment">-- 行数可省略，默认为1，默认值也可省略，默认为null</span></span><br><span class="line">    <span class="keyword">partition</span> <span class="keyword">by</span> 分组指定列</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> 排序指定列</span><br><span class="line">) 新列名 </span><br></pre></td></tr></table></figure>
<blockquote>
<p>首先按照指定列分组，在每组内取<strong>该列</strong>该行下的<strong>第几行</strong>数据 作为新列在本行的数据，<strong>无法获取行下数据时再补充默认值</strong></p>
<p>和表的连接一样新增列</p>
<p>使用与查找与每一列都相关的数据，如第二天的相关数据</p>
</blockquote>
<p><strong>聚合函数作为窗口函数</strong></p>
<p>聚合函数后面括号不能为空，需要指定聚合的列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    score,</span><br><span class="line">    <span class="built_in">sum</span>(score) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> score) <span class="keyword">as</span> current_sum,</span><br><span class="line">    <span class="built_in">avg</span>(score) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> score) <span class="keyword">as</span> current_avg,</span><br><span class="line">    <span class="built_in">count</span>(score) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> score) <span class="keyword">as</span> current_count,</span><br><span class="line">    <span class="built_in">max</span>(score) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> score) <span class="keyword">as</span> current_max,</span><br><span class="line">    <span class="built_in">min</span>(score) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> score) <span class="keyword">as</span> current_min</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	practice_record</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63e4ad154757feff332cefa9.jpg" alt></p>
<ul>
<li>每组中，都是在自身数据及上方的数据范围使用聚合函数</li>
<li>可以看到截止本行数据，对于本行及以上的数据范围内的变化过程</li>
<li>使用聚合函数的显著特点就是分组排序后不改变列的行数</li>
</ul>
<h3><span id="暂存表">暂存表</span></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> 暂存表名 <span class="keyword">as</span>(</span><br><span class="line">	</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li>无需重复书写 查找相同表的代码</li>
</ul>
<h3><span id="保留位数">保留位数</span></h3>
<p>小数点和保留位数</p>
<p><strong>ROUND</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ROUND(被操作数，保留小数点后几位数字)</span><br></pre></td></tr></table></figure>
<ol>
<li>四舍五入</li>
<li>保留位数</li>
</ol>
<p><strong>NUMERIC</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="type">numeric</span> (数据长度，小数点后位数)</span><br></pre></td></tr></table></figure>
<ol>
<li>与Decimal类似</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(<span class="string">&#x27;12.56&#x27;</span> <span class="keyword">AS</span> <span class="type">NUMERIC</span>(<span class="number">10</span>,<span class="number">8</span>))<span class="comment">--==&gt;12.56000000 -- 小数点后位数最大为8</span></span><br></pre></td></tr></table></figure>
<p><strong>CAST</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CAST</span>(被操作数 <span class="keyword">AS</span> <span class="type">Decimal</span><span class="operator">|</span><span class="type">NUMERIC</span>(数据长度，小数点后位数))</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="string">&#x27;12.362222&#x27;</span> <span class="keyword">as</span>  <span class="type">decimal</span>(<span class="number">32</span>,<span class="number">3</span>))	<span class="comment">-- 》12.362 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(<span class="string">&#x27;12&#x27;</span> <span class="keyword">AS</span> <span class="type">int</span>)<span class="comment">--&gt;12</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(<span class="string">&#x27;12.0&#x27;</span> <span class="keyword">AS</span> <span class="type">int</span>)<span class="comment">--&gt;报错,double类型的字符串不能转成int</span></span><br></pre></td></tr></table></figure>
<p><strong>FLOOR</strong></p>
<p>FLOOR（x）返回小于等于x的最大整数（向下取整）</p>
<p><strong>CEILING</strong></p>
<p>CEILING（x）返回大于等于x的最小整数（向上取整）</p>
<h3><span id="其他">其他</span></h3>
<p><strong>UNION与UNION ALL</strong></p>
<p><strong>数据汇总</strong></p>
<p>COALESCE(expression_1, expression_2, …,expression_n)</p>
<ul>
<li>增加列，可用于数据汇总</li>
</ul>
<blockquote>
<p>依次参考各参数表达式，遇到非null值即停止并返回该值。</p>
<p>表达式为NULL时继续往下查询，不为NULL返回当前表达式的值</p>
</blockquote>
<p>WITH ROLLUP</p>
<ul>
<li>增加列，可用于数据汇总</li>
</ul>
<blockquote>
<p>定义在group by之后</p>
<p>对于聚合列相当于在分组前聚合，对于非聚合列相当于取最后一行的值，对于分组列设为NULL</p>
</blockquote>
<p>注意：低版本下使用WITH ROLLUP与COALESCE</p>
<p>若GROUP BY子句中不为数据库表中的列，而是经过运算存储在内存中的列</p>
<p>WITH ROLLUP会覆盖COALESCE中运算暂存列本来为NULL的值，导致COALESCE判断该表达式永远为非NULL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="built_in">COALESCE</span>(<span class="keyword">month</span>(submit_time))</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	practice_record</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	<span class="keyword">month</span>(submit_time) <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span> </span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63e1c8b74757feff33b7067c.jpg" alt></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="built_in">COALESCE</span>(submit_month,<span class="string">&#x27;2021汇总&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span>(</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		<span class="keyword">month</span>(submit_time) submit_month</span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">			practice_record</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">			<span class="keyword">month</span>(submit_time) <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span> </span><br><span class="line">) a</span><br><span class="line"><span class="comment">-- 可以通过子查询解决WITHROLLUP覆盖COALESCE表达式NULL</span></span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/63e1c9924757feff33b847fe.jpg" alt></p>
<h4><span id="mysql高版本">MySQL高版本</span></h4>
<p><strong>解决最新的SQL版本中ONLY_FULL_GROUP_BY报错</strong></p>
<blockquote>
<p>ONLY_FULL_GROUP_BY的语义就是确定select 中的所有列的值要么是来自于聚合函数（sum、avg、max等）的结果，</p>
<p>要么是来自于group by 子句中的表达式。</p>
<p>MySQL提供了any_value()函数来抑制ONLY_FULL_GROUP_BY值被拒绝。</p>
</blockquote>
<p>所以只需要在非group by的列上加any_value()就可以了</p>
<h2><span id="dml数据操作">DML数据操作</span></h2>
<h3><span id="添加数据">添加数据</span></h3>
<ol>
<li>
<p>普通插入（全字段）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1, column2, ...) <span class="keyword">VALUES</span> (value1, value2, ...);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>普通插入（限定字段）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1, column2, ...) <span class="keyword">VALUES</span> (value1, value2, ...)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>多条一次性插入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1, column2, ...) <span class="keyword">VALUES</span> (value1_1, value1_2, ...), (value2_1, value2_2, ...), ...</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>从另一个表导入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name2 [<span class="keyword">WHERE</span> key<span class="operator">=</span><span class="keyword">value</span>]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>带更新的插入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">REPLACE <span class="keyword">INTO</span> table_name <span class="keyword">VALUES</span> (value1, value2, ...) </span><br><span class="line"><span class="comment">-- 注意这种原理是检测到主键或唯一性索引键重复就删除原记录后重新插入</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>新表exam_record_before_2021用来备份2021年之前的试题作答记录，结构和exam_record表一致，请将2021年之前的已完成了的试题作答纪录导入到该表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span></span><br><span class="line">    exam_record_before_2021</span><br><span class="line">    (uid,exam_id,start_time,submit_time,score)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    uid,exam_id,start_time,submit_time,score</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    exam_record</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    <span class="keyword">year</span>(submit_time) <span class="operator">&lt;</span> <span class="number">2021</span></span><br></pre></td></tr></table></figure>
<p>现在有一套ID为9003的高难度SQL试卷，时长为一个半小时，请你将 2021-01-01 00:00:00 作为发布时间插入到试题信息表examination_info（其表结构如下图），不管该ID试卷是否存在，都要插入成功，请尝试插入它。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">REPLACE <span class="keyword">INTO</span> </span><br><span class="line">    examination_info(exam_id,tag,difficulty,duration,release_time) <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">9003</span>, &quot;SQL&quot;, &quot;hard&quot;, <span class="number">90</span>, &quot;2021-01-01 00:00:00&quot;);</span><br></pre></td></tr></table></figure>
<h3><span id="修改数据">修改数据</span></h3>
<ol>
<li>
<p>设置为新值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> column_name<span class="operator">=</span>new_value [, column_name2<span class="operator">=</span>new_value2] [<span class="keyword">WHERE</span> column_name3<span class="operator">=</span>value3]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>根据已有值替换</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> key1<span class="operator">=</span>replace(key1, <span class="string">&#x27;查找内容&#x27;</span>, <span class="string">&#x27;替换成内容&#x27;</span>) [<span class="keyword">WHERE</span> column_name3<span class="operator">=</span>value3]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> examination_info</span><br><span class="line"><span class="keyword">set</span> tag <span class="operator">=</span> REPLACE(tag,<span class="string">&#x27;PYTHON&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> examination_info</span><br><span class="line"><span class="keyword">set</span> tag <span class="operator">=</span> REPLACE(tag,<span class="string">&#x27;PYTHON&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3><span id="删除数据">删除数据</span></h3>
<ol>
<li>
<p>根据条件删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> options] [ [ <span class="keyword">ORDER</span> <span class="keyword">BY</span> fields ] LIMIT n ]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>全部删除（表清空，包含自增计数器重置）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> table_name</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span></span><br><span class="line">    exam_record</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    submit_time <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span></span><br><span class="line">    TIMESTAMPDIFF(<span class="keyword">MINUTE</span>,start_time,submit_time) <span class="operator">&lt;</span> <span class="number">5</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> start_time</span><br><span class="line">LIMIT <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h2><span id="ddl数据定义">DDL数据定义</span></h2>
<h3><span id="创建数据库">创建数据库</span></h3>
<h3><span id="创建数据库表格">创建数据库表格</span></h3>
<ol>
<li>直接创建表</li>
</ol>
   <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line">[IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] tb_name <span class="comment">-- 不存在才创建，存在就跳过</span></span><br><span class="line">(column_name1 data_type1 <span class="comment">-- 列名和类型必选</span></span><br><span class="line">    [ <span class="keyword">PRIMARY</span> KEY <span class="comment">-- 可选的约束，主键</span></span><br><span class="line">     <span class="operator">|</span><span class="keyword">FOREIGN</span> KEY <span class="comment">-- 外键，引用其他表的键值</span></span><br><span class="line">     <span class="operator">|</span>AUTO_INCREMENT <span class="comment">-- 自增ID</span></span><br><span class="line">     COMMENT comment <span class="comment">-- 列注释（评论）</span></span><br><span class="line">     <span class="keyword">DEFAULT</span> default_value <span class="comment">-- 默认值</span></span><br><span class="line">     <span class="keyword">UNIQUE</span> <span class="comment">-- 唯一性约束，不允许两条记录该列值相同</span></span><br><span class="line">     <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="comment">-- 该列非空</span></span><br><span class="line">    ], ...</span><br><span class="line">) [<span class="type">CHARACTER</span> <span class="keyword">SET</span> charset] <span class="comment">-- 字符集编码</span></span><br><span class="line">[<span class="keyword">COLLATE</span> collate_value] <span class="comment">-- 列排序和比较时的规则（是否区分大小写等）</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>从另一张表复制表结构创建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">LIKE</span> tb_name_old</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>从另一张表的查询结果创建表</p>
</li>
</ol>
   <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_name_old <span class="keyword">WHERE</span> options</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> user_info_vip (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT <span class="string">&#x27;自增ID&#x27;</span>,</span><br><span class="line">    uid <span class="type">int</span> <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">    nick_name <span class="type">varchar</span>(<span class="number">64</span>) COMMENT <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    achievement <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;成就值&#x27;</span>,</span><br><span class="line">    `level` <span class="type">int</span> COMMENT <span class="string">&#x27;用户等级&#x27;</span>,</span><br><span class="line">    job <span class="type">varchar</span>(<span class="number">32</span>) COMMENT <span class="string">&#x27;职业方向&#x27;</span>,</span><br><span class="line">    register_time datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;注册时间&#x27;</span></span><br><span class="line">) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure>
<h3><span id="修改数据库表格">修改数据库表格</span></h3>
<p><code>ALTER TABLE 表名 修改选项</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&#123; <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>类型<span class="operator">&gt;</span> after <span class="operator">&lt;</span>位置<span class="operator">&gt;</span> <span class="comment">-- 增加列</span></span><br><span class="line"><span class="operator">|</span> CHANGE <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>旧列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>新列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>新列类型<span class="operator">&gt;</span> <span class="comment">-- 修改列名或类型，直接替换为新列，以下均为修改某个属性</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> &#123; <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="operator">&lt;</span>默认值<span class="operator">&gt;</span> <span class="operator">|</span> <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span> &#125; <span class="comment">-- 修改/删除 列的默认值</span></span><br><span class="line"><span class="operator">|</span> MODIFY <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>类型<span class="operator">&gt;</span> <span class="comment">-- 修改列类型</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="comment">-- 删除列</span></span><br><span class="line"><span class="operator">|</span> RENAME <span class="keyword">TO</span> <span class="operator">&lt;</span>新表名<span class="operator">&gt;</span> <span class="comment">-- 修改表名</span></span><br><span class="line"><span class="operator">|</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">&lt;</span>字符集名<span class="operator">&gt;</span> <span class="comment">-- 修改字符集</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">COLLATE</span> <span class="operator">&lt;</span>校对规则名<span class="operator">&gt;</span> &#125; <span class="comment">-- 修改校对规则（比较和排序时用到）</span></span><br></pre></td></tr></table></figure>
<h3><span id="删除数据库表格">删除数据库表格</span></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] 表名<span class="number">1</span> [ ,表名<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<h3><span id="创建查询命令">创建查询命令</span></h3>
<h3><span id="修改查询命令">修改查询命令</span></h3>
<h3><span id="删除查询命令">删除查询命令</span></h3>
<h3><span id="删除数据表内容">删除数据表内容</span></h3>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>0-9 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>0-9 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/post/%E6%96%B0%E5%BB%BA%E6%96%87%E6%9C%AC%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p>一、Collectors.toList()<br>
  现在有个集合：</p>
<p>List<user> users = getUserList();<br>
1<br>
  现在需要将这些user的id提取出来。这个很简单，for循环嘛，谁不会啊（不会吧不会吧，不会有人还不会用for循环的吧）。</user></p>
<p>List<long> idList = new ArrayList<long>();</long></long></p>
<p>for(int i = 0; i &lt; users.size(); i++){</p>
<p>idList.add(users.get(i).getId());</p>
<p>}</p>
<p>然而Java8有个更简便的方法，一行代码搞定：</p>
<p>List<long> idList = users.stream().map(User::getId).collect(Collectors.toList());<br>
1<br>
其中有个User::getId，这个其实就是调用User类的getId()方法。</long></p>
<p>再举个例子，将集合里的元素由小写变大写：</p>
<p>List<string> list = Arrays.asList(“a”, “b”, “c”, “d”);</string></p>
<p>List<string> results = list.stream().map(String::toUpperCase).collect(Collectors.toList());</string></p>
<p>System.out.println(results); //{A, B, C, D}</p>
<p>二、Collectors.toMap()<br>
  Collectors.toMap()，一般用于将一个List转换为Map。常见用法：</p>
<p>list.stream().collect(Collectors.toMap(Function keyMapper, Function valueMapper))</p>
<p>可以接收2个、3个、4个参数，但是我一般只用2个的或者3个的就已经足够了。这里我也就只讲一个前两个用法，也就是2个参数的和3个参数的用法。</p>
<p>第一个参数，用于指定key的Function。<br>
  第二个参数，用于指定value的Function。<br>
  第三个参数，若在转换中，出现多个相同的key，如何进行合并的Function。</p>
<ol>
<li>两个参数的用法<br>
  现在有个User对象：</li>
</ol>
<p>@Getter<br>
@Setter<br>
public class User{<br>
private Long id;<br>
private String name;<br>
private Integer age;</p>
<pre><code>public User(Long id, String name, Integer age) &#123;
    this.id = id;
    this.name = name;
    this.age = age;
&#125;
</code></pre>
<p>}</p>
<p>然后进行以下操作：</p>
<p>List<user> userList = new ArrayList&lt;&gt;();<br>
userList.add(new User(1, “张三”, 18));<br>
userList.add(new User(2, “李四”, 19));<br>
userList.add(new User(3, “王五”, 18));<br>
//将userList转化为key为id，value为User对象的map<br>
Map&lt;Long, User&gt; map = userList.stream().collect(Collectors.toMap(User::getId, p -&gt; p));</user></p>
<p>Map&lt;Long, User&gt; map = userList.stream().collect(Collectors.toMap(User::getId, p -&gt; p));这一步就是将userList 转换为key为id，value为User对象的map。</p>
<p>User::getId ===》 User对象的getId方法<br>
p -&gt; p ===》就是进来的是什么，最终就是什么，这里就是进来的是User对象，出去的也就是User对象</p>
<p>而这时map里的（模拟）值是：</p>
<p>{<br>
1: User(1, “张三”, 18)<br>
2: User(2, “李四”, 19)<br>
3: User(3, “王五”, 18)<br>
}</p>
<p>还可以换一下：</p>
<p>Map&lt;Long, String&gt; map = userList.stream().collect(Collectors.toMap(User::getId, User::getName));<br>
1<br>
  这个获取的就是key为id，value为name的map了。</p>
<ol start="2">
<li>三个参数的用法<br>
  还是沿用上面那个例子，如果这个时候你想获取key是age，value是name的map呢？如果你还是沿用上面的方法，就会出问题了，因为有两个age是 18 的数据，也就是存在重复的key，会直接报错，想不报错的话，就可以利用第三个参数了。</li>
</ol>
<p>Map&lt;Integer, String&gt; map = userList.stream().collect(Collectors.toMap(User::getAge, User::getName, (a, b) -&gt; b));<br>
1<br>
  (a, b) -&gt; b的意思就是，如果存在重复的，永远取后面一个</p>
<p>这时，map里的值就是：</p>
<p>{<br>
18: “王五”<br>
19: “李四”<br>
}</p>
<p>三、Collectors.groupingBy()<br>
  还是沿用上面那个例子。当你想获取key是age的map，又不想覆盖掉重复项数据，这个时候就可以用 Collectors.groupingBy 了。</p>
<p>Map&lt;Integer, List<user>&gt; map = userList.stream().collect(Collectors.groupingBy(User::getAge));<br>
1<br>
  可以看到，这次的返回值变成了 Map&lt;Integer, List&gt; 了，也就是说，变成了key是age，value是User对象的集合了。这时，map里的值就变成了：</user></p>
<p>{<br>
18: [User(1, “张三”, 18), User(3, “王五”, 18)]<br>
19: [User(2, “李四”, 19)]<br>
}</p>
]]></content>
  </entry>
  <entry>
    <title>日期类</title>
    <url>/post/%E6%97%A5%E6%9C%9F%E7%B1%BB/</url>
    <content><![CDATA[<h2><span id="jdk8日期架构">JDK8日期架构</span></h2>
<ul>
<li>
<p>JDK8日期架构重做，JDK8之前的日期已经废除</p>
<blockquote>
<p>JDK8之前使用的日期框架:java.util.Date日期时间类、java.util.Calendar日历类</p>
<p>DateFormat：本地时间指计算机的操作系统的区域（例如中文版window，则本地时间为北京时间）</p>
<ol>
<li>JDK8整个日期架构的目的让程序员能使用javaAPI直接操作时间，而不需要关心格林威治</li>
</ol>
</blockquote>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/63d8b3feface21e9ef1e33ec.jpg" alt></p>
<p>从Java 8开始，<code>java.time</code>包提供了新的日期和时间API，主要涉及的类型有：</p>
<ul>
<li>本地日期和时间：<code>LocalDateTime</code>（年月日时分秒），<code>LocalDate</code>（年月日），<code>LocalTime</code>（时分秒）</li>
<li>带时区的日期和时间：<code>ZonedDateTime</code></li>
<li>时刻：<code>Instant</code></li>
<li>时区：<code>ZoneId</code>，<code>ZoneOffset</code></li>
<li>时间间隔：<code>Duration</code></li>
<li>时间格式：取代<code>SimpleDateFormat</code>的格式化类型<code>DateTimeFormatter</code></li>
</ul>
<h2><span id="存储方式">存储方式</span></h2>
<p><strong>时间戳</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.currentTimeMillis();	<span class="comment">//格林威治1970至今经过的毫秒，以long类型存储</span></span><br></pre></td></tr></table></figure>
<p><strong>常用于计算某段程序的运行时间</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以简单的利用时间戳之差，计算程序大致运行时间</span></span><br><span class="line"><span class="type">long</span> <span class="variable">st</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">1000</span> ; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;<span class="number">1000</span> ; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt;<span class="number">1000</span> ; k++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">MyApp</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">et</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(et-st);</span><br></pre></td></tr></table></figure>
<h2><span id="本地时间">本地时间</span></h2>
<h3><span id="创建日期对象">创建日期对象</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();  <span class="comment">//2023-01-31T11:27:56.391</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();          	<span class="comment">//2023-01-31</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">localTime</span> <span class="operator">=</span> LocalTime.now();          	<span class="comment">//11:27:56.391</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>LocalDateTime</td>
<td>now()</td>
<td>从默认时区的系统时钟获取当前日期</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>now(Clock clock)</td>
<td>从指定时钟获取当前日期</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>now(ZoneId zone)</td>
<td>从指定时区的系统时钟获取当前日期</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>from(TemporalAccessor temporal)</td>
<td>从指定时间对象中获取日期</td>
</tr>
</tbody>
</table>
<p><strong>自定义日期创建：of</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime localDateTime=LocalDateTime.of(<span class="number">2023</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">22</span>,<span class="number">32</span>,<span class="number">30</span>);<span class="comment">//自定义日期2023-05-01T22:32:30</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法名</th>
</tr>
</thead>
<tbody>
<tr>
<td>LocalDateTime</td>
<td>of(int year, Month month, int dayOfMonth, int hour, int minute)</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>of(int year, Month month, int dayOfMonth, int hour, int minute, int second)</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>of(int year, Month month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>of(int year, int month, int dayOfMonth, int hour, int minute)</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>of(int year, int month, int dayOfMonth, int hour, int minute, int second)</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>of(LocalDate date, LocalTime time)</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>ofInstant(Instant instant, ZoneId zone)</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>ofEpochSecond(long epochSecond, int nanoOfSecond, ZoneOffset offset)</td>
</tr>
</tbody>
</table>
<p><strong>字符串创建日期</strong></p>
<p>严格按照ISO 8601的格式</p>
<blockquote>
<p>日期和时间分隔符是<code>T</code>。标准格式如下：</p>
<ul>
<li>日期：yyyy-MM-dd</li>
<li>时间：HH:mm:ss</li>
<li>带毫秒的时间：HH:mm:ss.SSS</li>
<li>日期和时间：yyyy-MM-dd’T’HH:mm:ss</li>
<li>带毫秒的日期和时间：yyyy-MM-dd’T’HH:mm:ss.SSS</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>LocalDateTime</td>
<td>parse(CharSequence text)</td>
<td>从给定的文本字符串获取日期</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>parse(CharSequence text, DateTimeFormatter formatter)</td>
<td>从给定的格式、文本字符串获取日期</td>
</tr>
</tbody>
</table>
<h3><span id="格式化">格式化</span></h3>
<p><strong>DateTimeFormatter</strong></p>
<blockquote>
<p>因为<code>SimpleDateFormat</code>不是线程安全的，使用的时候，只能在方法内部创建新的局部变量。而<code>DateTimeFormatter</code>可以只创建一个实例，到处引用。</p>
</blockquote>
<p>如果要自定义输出的格式，或者要把一个非ISO 8601格式的字符串解析成<code>LocalDateTime</code>，可以使用新的<code>DateTimeFormatter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DateTimeFormatter dtf1=DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss E&quot;</span>);</span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">dtf2</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 EE HH:mm&quot;</span>, Locale.US);<span class="comment">//根据字符串、指定的地区创建格式</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">format1</span> <span class="operator">=</span> dtf1.format(localDateTime);	<span class="comment">//2022年01月27日 10:10:47 星期四</span></span><br><span class="line"><span class="type">String</span> <span class="variable">format2</span> <span class="operator">=</span> dtf2.format(localDateTime);	<span class="comment">//2022年01月27日 Thu 10:12</span></span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2019年11月30日 15:16:17 星期六&quot;</span>, dtf1);<span class="comment">//自定义格式解析:</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>DateTimeFormatter</td>
<td>ofPattern(String pattern)</td>
<td>根据字符串创建格式</td>
</tr>
<tr>
<td>DateTimeFormatter</td>
<td>ofPattern(String pattern, Locale locale)</td>
<td>根据字符串、指定的地区创建格式</td>
</tr>
</tbody>
</table>
<h3><span id="获取部分">获取部分</span></h3>
<p><strong>创建实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>get(TemporalField field): 获取指定字段的int值（推荐）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">localDateTime.get(ChronoField.YEAR);</span><br><span class="line">localDateTime.get(ChronoField.MONTH_OF_YEAR);</span><br><span class="line">localDateTime.get(ChronoField.DAY_OF_MONTH);</span><br><span class="line">localDateTime.get(ChronoField.DAY_OF_WEEK);</span><br><span class="line">localDateTime.get(ChronoField.HOUR_OF_DAY);</span><br><span class="line">localDateTime.get(ChronoField.MINUTE_OF_HOUR);</span><br><span class="line">localDateTime.get(ChronoField.SECOND_OF_MINUTE);</span><br></pre></td></tr></table></figure>
</li>
<li>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>int</td>
<td>getYear()</td>
<td>获取年份</td>
</tr>
<tr>
<td>int</td>
<td>getDayOfYear()</td>
<td>获取一年中的第几天。它可以返回从 1 到 365 或 366 (闰年)。</td>
</tr>
<tr>
<td>Month</td>
<td>getMonth()</td>
<td>从这个日期获取一年中的月份</td>
</tr>
<tr>
<td>int</td>
<td>getMonthValue()</td>
<td>获取月份</td>
</tr>
<tr>
<td>int</td>
<td>getDayOfMonth()</td>
<td>获取一个月中的第几号</td>
</tr>
<tr>
<td>DayOfWeek</td>
<td>getDayOfWeek()</td>
<td>获取星期字段</td>
</tr>
<tr>
<td>Chronology</td>
<td>getChronology()</td>
<td>获取该日期格式，例如：ISO</td>
</tr>
<tr>
<td>Long</td>
<td>getLong(TemporalField field)</td>
<td>获取指定字段的值</td>
</tr>
<tr>
<td>Era</td>
<td>getEra()</td>
<td>获取在此日期适用的时代。&quot;CE &quot;从第一年开始，&quot;BCE &quot;从零年开始。</td>
</tr>
</tbody>
</table>
</li>
</ol>
<p><strong>枚举ChronoUnit与枚举ChronoField</strong></p>
<table>
<thead>
<tr>
<th>1</th>
<th>ChronoUnit</th>
<th>ChronoField</th>
</tr>
</thead>
<tbody>
<tr>
<td>实现接口</td>
<td>TemporalUnit</td>
<td>TemporalField</td>
</tr>
<tr>
<td>作用</td>
<td>用于计算的日期部分</td>
<td>用于获取日期部分</td>
</tr>
</tbody>
</table>
<p>NANOS（纳秒）、MICROS（微秒）、MILLIS（毫秒）、SECONDS（秒）、MINUTES（分）、HOURS（时）、HALF_DAYS（半天）、DAYS（天）、WEEKS（周）、MONTHS（月）、YEARS（年）、DECADES（十年）、CENTURIES（百年）、MILLENNIA（千年）、ERAS（十亿年，即纪元）、FOREVER（永远）</p>
<h3><span id="加减">加减</span></h3>
<ul>
<li>
<p>月份加减、修改会自动调整日期，即把<code>2019-10-31</code>的月份调整为<code>9</code>时，日期也自动变为<code>30</code>。</p>
</li>
<li>
<p><code>LocalDateTime</code>提供了对日期和时间进行加减的非常简单的链式调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">dt</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">59</span>);</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">dt2</span> <span class="operator">=</span> dt.plusDays(<span class="number">5</span>).minusHours(<span class="number">3</span>);	<span class="comment">// 加5天减3小时:2019-10-31T17:30:59</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">dt3</span> <span class="operator">=</span> dt2.minusMonths(<span class="number">1</span>);	<span class="comment">// 减1月:2019-09-30T17:30:59</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>创建实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">DateTimeFormatter dateTimeFormatter=DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss E&quot;</span>);</span><br><span class="line">System.out.println(dateTimeFormatter.format(localDateTime));	<span class="comment">//2023年01月31日 16:13:35 星期二</span></span><br></pre></td></tr></table></figure>
<ol>
<li><strong>plus(long amountToAdd, TemporalUnit unit):</strong> 通过增加给定的数量返回<code>LocalDate</code>实例。</li>
</ol>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">localDateTime2 = localDateTime2.plus(<span class="number">345</span>, ChronoUnit.SECONDS);<span class="comment">//加345秒之后</span></span><br><span class="line">System.out.println(dateTimeFormatter.format(localDateTime2));	<span class="comment">//2023年01月31日 16:19:20 星期二</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p><strong>minus(long amountToSubtract, TemporalUnit unit):</strong> 通过减去给定的数量返回<code>LocalDate</code>实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//localDateTime = localDateTime.minusYears(1);	</span></span><br><span class="line">localDateTime=localDateTime.minus(<span class="number">1</span>, ChronoUnit.YEARS);		<span class="comment">//去年的今天</span></span><br><span class="line">System.out.println(dateTimeFormatter.format(localDateTime));<span class="comment">//2022年01月31日 16:13:35 星期一</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>with(TemporalField field, long newValue):</strong> 将指定字段的<code>LocalDate</code>实例返回到一个新值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">localDateTime3 = localDateTime3.with(ChronoField.MONTH_OF_YEAR, <span class="number">3</span>);	<span class="comment">//修改成3月份</span></span><br><span class="line">System.out.println(dateTimeFormatter.format(localDateTime3));<span class="comment">//2022年03月31日 16:13:35 星期四</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>plus</strong></p>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>LocalDateTime</td>
<td>plus(long amountToAdd, TemporalUnit unit)</td>
<td>例：plus(15, ChronoUnit.DAYS);</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>plus(TemporalAmount amountToAdd)</td>
<td>例：localDateTime.plus(Period.ofDays(14));</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>plusYears(long years)</td>
<td>添加指定年</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>plusMonths(long months)</td>
<td>添加指定月</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>plusWeeks(long weeks)</td>
<td>添加指定周</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>plusDays(long days)</td>
<td>添加指定天</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>plusHours(long hours)</td>
<td>添加指定小时</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>plusMinutes(long minutes)</td>
<td>添加指定分钟</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>plusSeconds(long seconds)</td>
<td>添加指定秒</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>plusNanos(long nanos)</td>
<td>添加指定纳秒</td>
</tr>
</tbody>
</table>
<p><strong>minus</strong></p>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>LocalDateTime</td>
<td>minus(long amountToSubtract, TemporalUnit unit)</td>
<td>例：minus(15, ChronoUnit.DAYS);</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>minus(TemporalAmount amountToSubtract)</td>
<td>例：localDateTime.minus(Period.ofDays(14));</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>minusYears(long years)</td>
<td>删除指定年</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>minusMonths(long months)</td>
<td>删除指定月</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>minusWeeks(long weeks)</td>
<td>删除指定周</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>minusDays(long days)</td>
<td>删除指定天</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>minusHours(long hours)</td>
<td>删除指定小时</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>minusMinutes(long minutes)</td>
<td>删除指定分钟</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>minusSeconds(long seconds)</td>
<td>删除指定秒</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>minusNanos(long nanos)</td>
<td>删除指定纳秒</td>
</tr>
</tbody>
</table>
<p><strong>with</strong></p>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>LocalDateTime</td>
<td>with(LocalDate newDate, LocalTime newTime)</td>
<td>根据LocalDate 、LocalTime 修改</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>with(TemporalAdjuster adjuster)</td>
<td>例：localDateTime.with(DayOfWeek.SUNDAY);</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>with(TemporalField field, long newValue)</td>
<td>例：localDateTime.with(ChronoField.YEAR, 2017);</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>withYear(int year)</td>
<td>修改为指定年</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>withMonth(int month)</td>
<td>修改为指定月</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>withDayOfMonth(int dayOfMonth)</td>
<td>修改为一个月中的第几天</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>withDayOfYear(int dayOfYear)</td>
<td>修改为一年中的第几天</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>withHour(int hour)</td>
<td>修改为指定小时</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>withMinute(int minutes)</td>
<td>修改为指定分钟</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>withSecond(int seconds)</td>
<td>修改为指定秒</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>withNano(int nanos)</td>
<td>修改为指定纳秒</td>
</tr>
</tbody>
</table>
<p><strong>TemporalAdjusters工具类</strong></p>
<p><code>LocalDateTime</code>的<code>with(TemporalAdjuster adjuster)</code>方法允许我们做更复杂的运算</p>
<p>对于计算某个月第1个周日这样的问题，新的API可以轻松完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本月第一天0:00时刻:</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">firstDay</span> <span class="operator">=</span> LocalDate.now().withDayOfMonth(<span class="number">1</span>).atStartOfDay();</span><br><span class="line"><span class="comment">// 本月最后1天:</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">lastDay</span> <span class="operator">=</span> LocalDate.now().with(TemporalAdjusters.lastDayOfMonth());</span><br><span class="line"><span class="comment">// 下月第1天:</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">nextMonthFirstDay</span> <span class="operator">=</span> LocalDate.now().with(TemporalAdjusters.firstDayOfNextMonth());</span><br><span class="line"><span class="comment">// 本月第1个周一:</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">firstWeekday</span> <span class="operator">=</span> LocalDate.now().with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY));</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>TemporalAdjuster</td>
<td>firstDayOfMonth()</td>
<td>本月的第一天</td>
</tr>
<tr>
<td>TemporalAdjuster</td>
<td>lastDayOfMonth()</td>
<td>本月的最后一天</td>
</tr>
<tr>
<td>TemporalAdjuster</td>
<td>firstDayOfNextMonth()</td>
<td>下个月的第一天</td>
</tr>
<tr>
<td>TemporalAdjuster</td>
<td>firstDayOfYear()</td>
<td>本年中的第一天</td>
</tr>
<tr>
<td>TemporalAdjuster</td>
<td>lastDayOfYear()</td>
<td>本年中的最后一天</td>
</tr>
<tr>
<td>TemporalAdjuster</td>
<td>firstDayOfNextYear()</td>
<td>明年的第一天</td>
</tr>
<tr>
<td>TemporalAdjuster</td>
<td>firstInMonth(DayOfWeek dayOfWeek)</td>
<td>本月的第一个星期几</td>
</tr>
<tr>
<td>TemporalAdjuster</td>
<td>lastInMonth(DayOfWeek dayOfWeek)</td>
<td>本月的最后一个星期几</td>
</tr>
<tr>
<td>TemporalAdjuster</td>
<td>dayOfWeekInMonth(int ordinal, DayOfWeek dayOfWeek)</td>
<td>本月中的第几个星期几</td>
</tr>
<tr>
<td>TemporalAdjuster</td>
<td>next(DayOfWeek dayOfWeek)</td>
<td>下一个星期几</td>
</tr>
<tr>
<td>TemporalAdjuster</td>
<td>nextOrSame(DayOfWeek dayOfWeek)</td>
<td>本日符合参数返回本日</td>
</tr>
<tr>
<td>TemporalAdjuster</td>
<td>previous(DayOfWeek dayOfWeek)</td>
<td>上一个星期几</td>
</tr>
<tr>
<td>TemporalAdjuster</td>
<td>previousOrSame(DayOfWeek dayOfWeek)</td>
<td>本日符合参数返回本日</td>
</tr>
</tbody>
</table>
<h3><span id="转换">转换</span></h3>
<p><strong>LocalDate 转化为 LocalDateTime</strong></p>
<ol>
<li>
<p>LocalDate实例方法atTime()，结合给定时间返回 LocalDateTime 实例。</p>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法名</th>
</tr>
</thead>
<tbody>
<tr>
<td>LocalDateTime</td>
<td>atTime(int hour, int minute)</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>atTime(int hour, int minute, int second)</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>atTime(int hour, int minute, int second, int nanoOfSecond)</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>atTime(LocalTime time)</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>atStartOfDay()将LocalDate与00:00的时间结合起来，在这个日期的开始创建LocalDateTime实例。</p>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法名</th>
</tr>
</thead>
<tbody>
<tr>
<td>LocalDateTime</td>
<td>atStartOfDay()</td>
</tr>
<tr>
<td>ZonedDateTime</td>
<td>atStartOfDay(ZoneId zone)</td>
</tr>
</tbody>
</table>
</li>
</ol>
<h3><span id="比较">比较</span></h3>
<p>LocalDate、LocalTime、LocalDateTime</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">target</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2019</span>, <span class="number">11</span>, <span class="number">19</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(now.isBefore(target));</span><br><span class="line">System.out.println(LocalDate.now().isBefore(LocalDate.of(<span class="number">2019</span>, <span class="number">11</span>, <span class="number">19</span>)));</span><br><span class="line">System.out.println(LocalTime.now().isAfter(LocalTime.parse(<span class="string">&quot;08:15:00&quot;</span>)));</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td>isAfter(ChronoLocalDateTime other)</td>
<td>检查此日期是否在给定日期之后</td>
</tr>
<tr>
<td>boolean</td>
<td>isBefore(ChronoLocalDateTime  other)</td>
<td>检查此日期是否在给定日期之前</td>
</tr>
<tr>
<td>boolean</td>
<td>isEqual(ChronoLocalDateTime other)</td>
<td>检查此日期是否等于给定日期</td>
</tr>
<tr>
<td>boolean</td>
<td>equals(Object obj)</td>
<td>检查此日期是否等于指定日期</td>
</tr>
<tr>
<td>int</td>
<td>compareTo(ChronoLocalDate other)</td>
<td>将此日期与指定日期进行比较</td>
</tr>
</tbody>
</table>
<h3><span id="检查">检查</span></h3>
<p>LocalDate、LocalTime、LocalDateTime</p>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td>isSupported(TemporalField field)</td>
<td>检查是否支持给定字段。可在从日期获取任何字段之前使用</td>
</tr>
<tr>
<td>boolean</td>
<td>isSupported(TemporalUnit unit)</td>
<td>检查是否支持给定的单位。可在使用加减之前使用</td>
</tr>
<tr>
<td>ValueRange</td>
<td>range(TemporalField field)</td>
<td>返回字段有效值的范围</td>
</tr>
</tbody>
</table>
<p><strong>仅LocalDate有的方法</strong></p>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td>isLeapYear()</td>
<td>检查年份是否为闰年</td>
</tr>
<tr>
<td>int</td>
<td>lengthOfMonth()</td>
<td>返回当前月份的总天数</td>
</tr>
<tr>
<td>int</td>
<td>lengthOfYear()</td>
<td>返回点前年份的总天数</td>
</tr>
</tbody>
</table>
<h3><span id="距离">距离</span></h3>
<p>LocalDateTime、LocalTime</p>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>long</td>
<td>until(Temporal endExclusive, TemporalUnit unit)</td>
<td>返回指定单位相差的时间量</td>
</tr>
</tbody>
</table>
<p>LocalDate</p>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Period</td>
<td>until(ChronoLocalDate endDateExclusive)</td>
<td>返回相差的时间量</td>
</tr>
<tr>
<td>long</td>
<td>until(Temporal endExclusive, TemporalUnit unit)</td>
<td>返回指定单位相差的时间量</td>
</tr>
</tbody>
</table>
<p><strong>Period</strong></p>
<p>两个<code>LocalDate</code>之间的差值用<code>Period</code>表示(年月日)</p>
<blockquote>
<p><code>P1M21D</code>，表示1个月21天</p>
</blockquote>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Period</td>
<td>Period.between(LocalDate l1,LocalDate l2)</td>
<td>返回相差的时间量,等同于LocalDate的until</td>
</tr>
</tbody>
</table>
<p><strong>Duration</strong></p>
<p>两个<code>LocalDateTime</code>之间的差值使用<code>Duration</code>表示</p>
<blockquote>
<p><code>PT1235H10M30S</code>，表示1235小时10分钟30秒</p>
</blockquote>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Duration</td>
<td>between(LocalDateTime l1,LocalDateTime l2)</td>
<td>返回相差的时间量</td>
</tr>
</tbody>
</table>
<p><code>Duration</code>和<code>Period</code>的表示方法也符合ISO 8601的格式，它以<code>P...T...</code>的形式表示，<code>P...T</code>之间表示日期间隔，<code>T</code>后面表示时间间隔。如果是<code>PT...</code>的格式表示仅有时间间隔。</p>
<h2><span id="时区时间">时区时间</span></h2>
<p><strong>ZoneDateTime</strong></p>
<p>带时区的日期和时间</p>
<h3><span id="创建">创建</span></h3>
<ol>
<li>now()方法获取默认时区下的当前时间</li>
<li>new(ZoneId zone)放方法获取指定时区的当前时间</li>
<li>相当于当前时间添加时区数据</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">zsh</span> <span class="operator">=</span> ZonedDateTime.now(); <span class="comment">// 默认时区	2023-02-02T20:46:25.322+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">zny</span> <span class="operator">=</span> ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)); </span><br><span class="line">				<span class="comment">// 用指定时区获取当前时间               2023-02-02T07:46:25.323-05:00[America/New_York]</span></span><br></pre></td></tr></table></figure>
<h3><span id="localdatetime转换">LocalDateTime转换</span></h3>
<ol>
<li>LocalDateTime对象的<code>atZone(ZoneId zone)</code>方法</li>
<li>相当于当前时间添加时区数据</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();		<span class="comment">//2023-02-02T20:52:20.756</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">zonedDateTime</span> <span class="operator">=</span> localDateTime.atZone(ZoneId.systemDefault());</span><br><span class="line"><span class="comment">//2023-02-02T20:52:20.756+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">zny</span> <span class="operator">=</span> localDateTime.atZone(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>));</span><br><span class="line"><span class="comment">//2023-02-02T20:52:20.756-05:00[America/New_York]</span></span><br></pre></td></tr></table></figure>
<h3><span id="时区转换时区运算">时区转换（时区运算）</span></h3>
<ol>
<li><code>ZonedDateTime</code>对象的<code>withZoneSameInstant(ZoneId zone)</code>将关联时区转换到另一个时区，转换后日期和时间都会相应调整</li>
<li>涉及不同时区下的时间转换运算</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以中国时区获取当前时间:2023-02-02T20:59:30.408+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">zbj</span> <span class="operator">=</span> ZonedDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line"><span class="comment">// 转换为纽约时间:2023-02-02T07:59:30.408-05:00[America/New_York]</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">zny</span> <span class="operator">=</span> zbj.withZoneSameInstant(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>));</span><br></pre></td></tr></table></figure>
<h3><span id="转换为localdatetime">转换为LocalDateTime</span></h3>
<ol>
<li>ZonedDateTime对象的 <code>atLocalDateTime()</code>方法</li>
<li>直接丢弃时区数据</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2023-02-02T21:03:03.682+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">now</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line"><span class="comment">//2023-02-02T21:03:03.682</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> now.toLocalDateTime();</span><br></pre></td></tr></table></figure>
<p><strong>某航线从北京飞到纽约需要13小时20分钟，根据北京起飞日期和时间计算到达纽约的当地日期和时间</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ZonedDateTime <span class="title function_">arriveTime</span> <span class="params">(ZonedDateTime flyTime)</span>&#123;</span><br><span class="line">    <span class="type">ZonedDateTime</span> <span class="variable">plus</span> <span class="operator">=</span> flyTime.plus(<span class="number">13</span>, ChronoUnit.HOURS).plus(<span class="number">20</span>, ChronoUnit.SECONDS);</span><br><span class="line">    <span class="keyword">return</span> plus.withZoneSameInstant(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="机器时间">机器时间</span></h2>
<p><strong>JDK8以下</strong></p>
<ol>
<li>
<pre><code class="language-java">long l = System.currentTimeMillis();	        //获取当前日期的机器时间【毫秒】
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. ~~~java</span><br><span class="line">   Date date = new Date();			//自定义时间java.util.Date[jdk8之前的时间]</span><br><span class="line">   long time = date.getTime();		//获取当前日期的机器时间【毫秒】</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
</ol>
<p><strong>JDK8及以上</strong></p>
<p><strong>Instant</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Instant</span> <span class="variable">now</span> <span class="operator">=</span> Instant.now();		<span class="comment">//获取当前时间戳，相比System.currentTimeMillis()多了更高精度的纳秒</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>LocalDateTime转成时区时间ZonedDateTime再转换成Instant</p>
<blockquote>
<p><code>LocalDateTime</code>无法直接转换成时间戳，因为<code>LocalDateTime</code>没有时区，无法确定某一时刻</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="comment">//LocalDateTime转成时区时间ZonedDateTime【需要时区支持】</span></span><br><span class="line"><span class="comment">//ZoneId.systemDefault()获取当前操作系统时区</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">zonedDateTime</span> <span class="operator">=</span> ZonedDateTime.of(localDateTime, ZoneId.systemDefault());</span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> zonedDateTime.toInstant();		<span class="comment">//ZonedDateTime转成成机器时间Instant【需要时区支持】</span></span><br><span class="line">System.out.println(instant.toEpochMilli());		<span class="comment">//秒+毫秒的部分</span></span><br><span class="line">System.out.println(instant.getEpochSecond());		<span class="comment">//秒的部分</span></span><br><span class="line">System.out.println(instant.getNano());		<span class="comment">//纳秒部分</span></span><br></pre></td></tr></table></figure>
<p><strong>Date转换成LocalDateTime</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">dateOld</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();		<span class="comment">//Date创建</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instantNew</span> <span class="operator">=</span> dateOld.toInstant();		<span class="comment">//Date转机器时间Instant</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">zonedDateTimeNew</span> <span class="operator">=</span> instantNew.atZone(ZoneId.systemDefault());		<span class="comment">//机器时间Instant转ZonedDateTime</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTimeNew</span> <span class="operator">=</span> zonedDateTimeNew.toLocalDateTime();		<span class="comment">//ZonedDateTime转LocalDateTime</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
  </entry>
  <entry>
    <title>标识符</title>
    <url>/post/%E6%A0%87%E8%AF%86%E7%AC%A6/</url>
    <content><![CDATA[<h1><span id="引言">引言</span></h1>
<p>标识符是指用来标识某个实体的一个符号，在不同的应用环境下有不同的含义。.在计算机 编程语言 中，标识符是用户编程时使用的名字，用于给变量、 常量 、 函数 、语句块等命名，以建立起名称与使用之间的关系。标识符通常由字母和数字以及其它字符构成。</p>
<span id="more"></span>
<p>Java源程序中，凡是程序员能够自己命名的都是标识符</p>
<h1><span id="标识符规则">标识符规则</span></h1>
<ol>
<li>标识符由26个英文字母、0-9数字、_$字符组成；不能出现#@！￥%&amp;等其它字符</li>
<li>标识符不能以数字开头</li>
<li>标识符不能是关键字、保留字，但可以包含它们，不能是if，可以是wifi</li>
<li>标识符中不能包含空格，不能是HelloWord</li>
</ol>
<p>区分源文件命名：<a href="../Java%E5%8A%A0%E8%BD%BD%E5%8F%8A%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86">源文件名与类名</a></p>
<h1><span id="标识符命名规范">标识符命名规范</span></h1>
<table>
<thead>
<tr>
<th style="text-align:center">标识符</th>
<th style="text-align:center">命名规范</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">包名</td>
<td style="text-align:center">全部英文字母小写</td>
</tr>
<tr>
<td style="text-align:center">类名、接口名</td>
<td style="text-align:center">每个英文单词首字母大写</td>
</tr>
<tr>
<td style="text-align:center">变量名、方法名</td>
<td style="text-align:center">首个英文单词首字母小写，之后每个单词首字母大写</td>
</tr>
<tr>
<td style="text-align:center">常量名</td>
<td style="text-align:center">全部英文字母大写，单词之间由分隔符隔开</td>
</tr>
</tbody>
</table>
<h1><span id="关键字">关键字</span></h1>
<table>
<thead>
<tr>
<th style="text-align:left">作用</th>
<th style="text-align:left">关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">用于定义数据类型的关键字</td>
<td style="text-align:left">class interface enum byte short int long float double char boolean void</td>
</tr>
<tr>
<td style="text-align:left">用于定义流程控制的关键字</td>
<td style="text-align:left">if else switch case default while do for break continue return</td>
</tr>
<tr>
<td style="text-align:left">用于定义访问权限修饰符的关键字</td>
<td style="text-align:left">private protected public</td>
</tr>
<tr>
<td style="text-align:left">用于定义类，函数，变量修饰符的关键字</td>
<td style="text-align:left">abstract final static synchronized</td>
</tr>
<tr>
<td style="text-align:left">用于定义类与类之间关系的关键字</td>
<td style="text-align:left">extends implements</td>
</tr>
<tr>
<td style="text-align:left">用于定义建立实例及引用实例，判断实例的关键字</td>
<td style="text-align:left">new this super instanceof</td>
</tr>
<tr>
<td style="text-align:left">用于异常处理的关键字</td>
<td style="text-align:left">try catch finally throw throws</td>
</tr>
<tr>
<td style="text-align:left">用于包的关键字</td>
<td style="text-align:left">package import</td>
</tr>
<tr>
<td style="text-align:left">其他修饰符关键字</td>
<td style="text-align:left">native strictfp transient volatile assert</td>
</tr>
<tr>
<td style="text-align:left">用于定义数据类型值的字面值</td>
<td style="text-align:left">true false null</td>
</tr>
</tbody>
</table>
<h1><span id="保留字">保留字</span></h1>
<p>现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字</p>
<p>goto，const</p>
<h1><span id="总结">总结</span></h1>
<h2><span id="一个java源文件可以有名称相同大小写不同的两个类吗">一个java源文件可以有名称相同，大小写不同的两个类吗?</span></h2>
<p>Java源文件可以有名称相同，大小写不同的两个类；</p>
<p>因为Java标识符严格区分大小写</p>
<p>不过在编译过程中，由于window系统不区分大小写，windows将前后编译生成的字节码文件视为同一个（即使这两个文件的命名一个是大写，一个是小写），后编译的类产生的字节码文件将替换掉先编译的类产生的字节码文件。</p>
<h2><span id="java可不可以使用中文命名">java可不可以使用中文命名?</span></h2>
<p>可以 因为jdk使用的是unicode编码(全球统一编码),能够识别中文</p>
<h2><span id="java源文件可以不可以数字开头">java源文件可以不可以数字开头?</span></h2>
<p>可以 java源文件不用遵循命名规则（public的类不行）</p>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>树</title>
    <url>/post/%E6%A0%91/</url>
    <content><![CDATA[<h1><span id="二叉排序树">二叉排序树</span></h1>
<h2><span id="定义">定义</span></h2>
<p>也称二叉查找树，一棵空树，或者是具有下列特性的二叉树:</p>
<ol>
<li>若左子树非空，则左子树上所有结点的值均小于根结点的值</li>
<li>若右子树非空，则右子树上所有结点的值均大于根结点的值</li>
<li>左、右子树也分别是一棵二叉排序树</li>
</ol>
<p>左子树结点值 &lt; 根结点值 &lt; 右子树结点值</p>
<p>对二叉排序树进行中序遍历可以得到一个递增的有序序列</p>
<h2><span id="操作">操作</span></h2>
<h3><span id="二叉树的结构">二叉树的结构</span></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*二叉树的二叉链表结点结构定义*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> data;	<span class="comment">//结点数据</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span>	<span class="comment">//左右孩子指针</span></span><br><span class="line">&#125; BSTNode, *BSTree;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3><span id="查找操作">查找操作</span></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BSTNode *<span class="title function_">SearchBST</span><span class="params">(BSTree T,<span class="type">int</span> key)</span>&#123;</span><br><span class="line">    <span class="comment">//如果递归过程中T为空，则查找结果返回NULL；或者查找成功，返回指向该关键字的指针</span></span><br><span class="line">	<span class="keyword">while</span>(T != <span class="literal">NULL</span> &amp;&amp; T-&gt;data != key)&#123;</span><br><span class="line">        <span class="keyword">if</span>(key &lt; T-&gt;data) T = T-&gt;lchild;</span><br><span class="line">        <span class="keyword">else</span> T = T-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归实现</span></span><br><span class="line">BSTNode *<span class="title function_">SearchBSTNode</span><span class="params">(BSTreee T,<span class="type">int</span> key)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;data == key)&#123;</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;data &gt;key)&#123;</span><br><span class="line">        <span class="keyword">return</span> SearchBSTNode(T-&gt;lchild,key);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SearchBSTNode(T-&gt;rchild,key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="插入操作">插入操作</span></h3>
<p>有了二叉排序树的查找函数，那么所谓的二叉排序树的插入，其实也就是将关键字放到树中的合适位置而已。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InsertBST</span><span class="params">(BSTree T, <span class="type">int</span> key)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(T != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;data == key) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;data &gt; key) T = T-&gt;lchild;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;data &lt; key) T = T-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    BSTree b = (BSTree) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(BSTree));</span><br><span class="line">    b-&gt;data = key;</span><br><span class="line">    b-&gt;rchild = b-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">    T = b;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归实现</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InsertBST</span><span class="params">(BSTree T,KeyType key)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        BiTree b = (BiTree) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(Bitree));</span><br><span class="line">        b-&gt;data = key;</span><br><span class="line">        b-&gt;lchild = b-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        T = b;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key == T-&gt;data)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &lt; T-&gt;data)&#123;</span><br><span class="line">        <span class="keyword">return</span> InsertBST(T-&gt;lchild,key);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InsertBST(T-&gt;rchild,key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="构建操作">构建操作</span></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">62</span>, <span class="number">88</span>, <span class="number">58</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">73</span>, <span class="number">51</span>, <span class="number">99</span>, <span class="number">37</span>, <span class="number">93</span>&#125;;</span><br><span class="line">T = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">    InsertBST(T,a[i]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3><span id="删除操作">删除操作</span></h3>
<ol>
<li>叶子结点：删除该结点不需要做其他操作；</li>
<li>仅有左或右子树的结点：删除后让被删除结点的直接后继接替它的位置；</li>
<li>左右子树都有的结点：遍历得到被删除结点的直接前驱或者直接后继来接替它的位置，然后再删除</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/63be79c8be43e0d30ec4aff5.jpg" alt></p>
<p>删除Z结点：</p>
<ol>
<li>用左孩子结点代替被删除结点，若该左孩子结点有右子树，则无法满足二叉排序树定义，没有右子树则直接替换，删除该元素</li>
<li>用左孩子的右孩子代替被删除的结点，若该节点有右子树，则无法满足二叉排序树定义</li>
<li>用左孩子的右孩子的右孩子的…右孩子的结点代替删除的结点，该节点没有右子树，代替可满足二叉排序树定义</li>
<li>且该节点有左子树或是叶子结点，删除同上述，由此得到直接前驱的概念</li>
</ol>
<ul>
<li>直接前驱：Z结点左孩子的右孩子的右孩子的…右孩子的结点，直到该节点没有右子树，即左子树中最右下的结点</li>
<li>直接后继：同理，是Z结点右子树中最坐下的结点</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> *<span class="title function_">DeleteBST</span><span class="params">(BSTNode *p)</span>&#123;</span><br><span class="line">    BSTree q,s;</span><br><span class="line">    <span class="keyword">if</span>(*p == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((*p)-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; (*p)-&gt;rchild == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        *p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;lchild == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        q = *p;</span><br><span class="line">        *p = (*p)-&gt;rchild;   </span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((*p)-&gt;rchild == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        q = *p;</span><br><span class="line">        *p = (*p)-&gt;lchild;    </span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        q = *p;							<span class="comment">//递归更加直观</span></span><br><span class="line">        s = (*p)-&gt;lchild;</span><br><span class="line">        <span class="keyword">while</span>(s-&gt;rchild != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            q = s;</span><br><span class="line">            s = s-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        (*p)-&gt;data = s-&gt;data;</span><br><span class="line">        <span class="keyword">if</span>(q != *p)&#123;</span><br><span class="line">            q-&gt;rchild = s-&gt;lchild;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            q-&gt;lchild = s-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(s);</span><br><span class="line">        <span class="comment">/*s = (*p)-&gt;lchild;</span></span><br><span class="line"><span class="comment">        while(s-&gt;rchild != NULL)&#123;</span></span><br><span class="line"><span class="comment">            s = s-&gt;rchild;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        (*p)-&gt;data = s-&gt;data;</span></span><br><span class="line"><span class="comment">        DeleteBST(s);*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="查找效率">查找效率</span></h2>
<p>平均查找长度ASL（Average Search Length）：需要对比关键字的次数</p>
<ol>
<li>
<p>查找成功的ASL</p>
<img src="https://pic.imgdb.cn/item/63be996bbe43e0d30e01cf1e.jpg" style="zoom:50%;">
</li>
<li>
<p>查找失败的ASL</p>
<img src="https://pic.imgdb.cn/item/63be99b9be43e0d30e0272f7.jpg" style="zoom:50%;">
</li>
</ol>
<h2><span id="引申出平衡二叉树">引申出平衡二叉树</span></h2>
<p>二叉排序树的优点明显，插入删除的时间性能比较好。</p>
<p>而对于二叉排序树的查找，其比较次数等于给定值的结点在二叉排序树的层数，即树的高</p>
<p>最好情况：n个结点的二叉树最小高度为 log<sub>2</sub>n（向下取整）+1</p>
<p>最坏情况：每个结点1个分支，树高=节点数=n</p>
<p>也就是说，我们希望二叉排序树是比较平衡的，即其深度与完全二叉树相同，那么查找的时间复杂也就为O(logn)，近似于折半查找</p>
<h1><span id="平衡二叉树">平衡二叉树</span></h1>
<h2><span id="定义">定义</span></h2>
<p>平衡二叉树(AVL)是一种二叉排序树，其中每一个节点的左子树和右子树的高度差不超过1</p>
<p>结点的平衡因子：二叉树上结点的左子树深度减去右子树深度的值称为平衡因子</p>
<p>平衡二叉树上所有结点的平衡因子只能是-1、0和1</p>
<p>假设n<sub>h</sub>为深度为h的平衡树中含有的最少结点数，n<sub>0</sub>=0，n<sub>1</sub>=1，n<sub>2</sub>= 2 ，平衡二叉树中有n<sub>h</sub> = n<sub>h-1</sub> + n<sub>h-2</sub> +1可证明最大深度和平均查找长度O(long<sub>2</sub>n)</p>
<h2><span id="操作">操作</span></h2>
<h3><span id="平衡二叉树的结构">平衡二叉树的结构</span></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AVLNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> balance;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">AVLnode</span> *<span class="title">rchild</span>, *<span class="title">lchild</span>;</span></span><br><span class="line">&#125;AVLNode,*AVLTree;</span><br></pre></td></tr></table></figure>
<h3><span id="查找操作">查找操作</span></h3>
<h3><span id="插入操作">插入操作</span></h3>
<p>当我们在二叉排序树中插入(或删除)一个结点时，可能导致其插入路径上的结点不平衡（平衡因子绝对值大于1）</p>
<p>若导致了不平衡，须将最小不平衡子树调整平衡，则其他结点都会恢复平衡</p>
<p>最小不平衡子树：从插入结点王辉找到第一个不平衡结点，以该结点为根的子树</p>
<h4><span id="ll平衡旋转右单旋转">LL平衡旋转(右单旋转)</span></h4>
<p><img src="https://pic.imgdb.cn/item/63bea349be43e0d30e12a52e.jpg" alt></p>
<p>在结点A的左孩子(L)的左子树(L)上插入了新结点</p>
<p>将A的左孩子B向右上旋转代替A成为根结点，将A结点向右下旋转成为B的右子树的根结点，而B的原右子树则作为A结点的左子树</p>
<h4><span id="rr平衡旋转左单旋转">RR平衡旋转(左单旋转)</span></h4>
<p><img src="https://pic.imgdb.cn/item/63bf666ebe43e0d30e2ce419.jpg" alt="image-20230111195440307"></p>
<p>在结点A的右孩子®的右子树®上插入了新结点</p>
<p>将A的右孩子B向左上旋转代替A成为根结点，将A结点向左下旋转成为B的左子树的根结点，而B的原左子树则作为A结点的右子树</p>
<h4><span id="lr平衡旋转先左后右双旋转">LR平衡旋转(先左后右双旋转)</span></h4>
<p><img src="https://pic.imgdb.cn/item/63bea837be43e0d30e1d7d44.jpg" alt></p>
<p><img src="https://pic.imgdb.cn/item/63bea87abe43e0d30e1ddaf3.jpg" alt></p>
<p>在A的左孩子(L)的右子树®上插入新结点</p>
<p>先将A结点的左孩子B的右子树的根结点C向左上旋转提升到B结点的位置,即进行一次RR平衡旋转(左单旋转），然后再把该C结点向右上旋转提升到A结点的位置,即进行一次LL平衡旋转(右单旋转)</p>
<h4><span id="rl平衡旋转先右后左双旋转">RL平衡旋转(先右后左双旋转)</span></h4>
<p><img src="https://pic.imgdb.cn/item/63bea8b2be43e0d30e1e2b37.jpg" alt></p>
<p><img src="https://pic.imgdb.cn/item/63bea8ddbe43e0d30e1e681a.jpg" alt></p>
<p>在A的右孩子®的左子树(L)上插入新结点</p>
<p>先将A结点的右孩子B的左子树的根结点C向右上旋转提升到B结点的位置,即进行一次LL平衡旋转(右单旋转)，然后再把该C结点向左上旋转提升到A结点的位置,即进行一次RR平衡旋转(左单旋转)</p>
<p>新结点插入C的左子树还是插入C的右子树不影响旋转过程</p>
<p><img src="https://pic.imgdb.cn/item/63beaaafbe43e0d30e2182c7.jpg" alt></p>
<ul>
<li>插入操作导致的最小不平衡子树（此时插入前平衡）：高度加1，经过调整后最小不平衡子树的高度恢复，从而其祖先结点也恢复</li>
</ul>
<h2><span id="查找效率">查找效率</span></h2>
<ul>
<li>若树高为h，最坏情况下，查找一个关键字最多需要比较h次，即查找操作的时间复杂度不可能超过O(h)</li>
</ul>
<h1><span id="红黑树">红黑树</span></h1>
<h2><span id="定义">定义</span></h2>
<p>红黑树也是二叉排序树，与普通BST相比：左根右，根叶黑 ，不红红，黑路同，左子孙结点值小于根节点值小于右子孙结点值</p>
<ol>
<li>每个结点或是红色，或是黑色的</li>
<li>根节点是黑色的</li>
<li>叶结点（外部结点、NULL结点、失败结点）均是黑色的</li>
<li>不存在两个相邻的红结点（即红结点的父节点和孩子结点均是黑色）</li>
<li>对每个结点，从该节点到任一叶结点的简单路径上，所含黑结点的数目相同</li>
</ol>
<ul>
<li>平衡二叉树 AVL：插入/删除 很容易破坏“平衡”特性，需要频繁调整树的形态。如：插入操作导致不 平衡，则需要先计算平衡因子，找到最小不平衡子树（时间开销大），再进行 LL/RR/LR/RL 调整</li>
<li>红黑树 RBT：插入/删除 很多时候不会破坏“红黑”特性，无需频繁调整树的形态。即便需要调整，一 般都可以在常数级时间内完成 平衡二叉树：适用于以查为主、很少插入/删除的场景 红黑树：适用于频繁插入、删除的场景，实用性更强 性能逐渐优秀</li>
</ul>
<h2><span id="红黑树的结构">红黑树的结构</span></h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RBNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    RBNode* parent;</span><br><span class="line">    RBNode* lchild;</span><br><span class="line">    RBNode* rchild;</span><br><span class="line">    <span class="type">int</span> color;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2><span id="性质">性质</span></h2>
<ol>
<li>结点的黑高（bh）：从某结点出发（<strong>不含该节点</strong>）到达任一<strong>空叶结点</strong>的<strong>路径上黑结点总数</strong></li>
<li>从根节点到叶结点的最长路径不大于最短路径的2倍</li>
<li>有n个内部节点的红黑树高度 h ≤ 2log<sub>2</sub>(n+1)</li>
<li>查找效率与AVL 树同等数量级 红黑树查找操作时间复杂度 = O(log<sub>2</sub>n)</li>
</ol>
<h2><span id="操作">操作</span></h2>
<h3><span id="插入操作java">插入操作（java）</span></h3>
<ol>
<li>
<p>先查找，确定插入位置（原理同二叉排序树），插入新结点</p>
</li>
<li>
<p>新结点是根——染为黑色</p>
<img src="https://pic.imgdb.cn/item/63d4df2dface21e9efde7f4d.jpg" style="zoom:67%;">
</li>
<li>
<p>新结点非根——染为红色</p>
<img src="https://pic.imgdb.cn/item/63d4df0aface21e9efde2e14.jpg" style="zoom:67%;">
</li>
<li>
<p>若插入新结点后依然满足红黑树定义，则插入结束，若不满足红黑树定义，则通过叔叔结点的颜色调整</p>
<ol>
<li>
<p>黑叔：旋转+染色</p>
<ol>
<li>
<p>LL型：右单旋，父换爷+染色</p>
<p><img src="https://pic.imgdb.cn/item/63d4df9fface21e9efdf9503.jpg" alt></p>
</li>
<li>
<p>RR型：左单旋，父换爷+染色</p>
</li>
<li>
<p>LR型：左、右双旋，儿换爷+染色</p>
<p><img src="https://pic.imgdb.cn/item/63d4df60face21e9efdeef6c.jpg" alt></p>
</li>
<li>
<p>RL型：右、左双旋，儿换爷+染色</p>
</li>
</ol>
</li>
<li>
<p>红叔：染色+变新</p>
<ol>
<li>
<p>叔父爷染色，爷变为新结点</p>
<p><img src="https://pic.imgdb.cn/item/63d4deedface21e9efdde5f1.jpg" alt></p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">putTreeVal</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span><br><span class="line"><span class="params">                               <span class="type">int</span> h, K k, V v)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; kc = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">searched</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    TreeNode&lt;K,V&gt; root = (parent != <span class="literal">null</span>) ? root() : <span class="built_in">this</span>;	<span class="comment">//获取根结点</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;	<span class="comment">//遍历树结点</span></span><br><span class="line">        <span class="type">int</span> dir, ph; K pk;</span><br><span class="line">        <span class="keyword">if</span> ((ph = p.hash) &gt; h)	<span class="comment">//插入左子树</span></span><br><span class="line">            dir = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)	<span class="comment">//插入右子树</span></span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="literal">null</span> &amp;&amp; k.equals(pk)))	<span class="comment">//键key相等</span></span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                  (kc = comparableClassFor(k)) == <span class="literal">null</span>) ||</span><br><span class="line">                 (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!searched) &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; q, ch;</span><br><span class="line">                searched = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (((ch = p.left) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                     (q = ch.find(h, k, kc)) != <span class="literal">null</span>) ||</span><br><span class="line">                    ((ch = p.right) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                     (q = ch.find(h, k, kc)) != <span class="literal">null</span>))</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">            dir = tieBreakOrder(k, pk);</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="literal">null</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt; xpn = xp.next;</span><br><span class="line">            TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class="line">            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                xp.left = x;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                xp.right = x;</span><br><span class="line">            xp.next = x;</span><br><span class="line">            x.parent = x.prev = xp;</span><br><span class="line">            <span class="keyword">if</span> (xpn != <span class="literal">null</span>)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)xpn).prev = x;</span><br><span class="line">            moveRootToFront(tab, balanceInsertion(root, x));	<span class="comment">//插入平衡</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="构建操作java">构建操作（java）</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> &#123;		<span class="comment">//构建红黑树</span></span><br><span class="line">    TreeNode&lt;K,V&gt; root = <span class="literal">null</span>;	<span class="comment">//根节点</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="built_in">this</span>, next; x != <span class="literal">null</span>; x = next) &#123;	<span class="comment">//遍历结点数组</span></span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next;	<span class="comment">//将结点转换成树结点</span></span><br><span class="line">        x.left = x.right = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;	<span class="comment">//初始化根节点</span></span><br><span class="line">            x.parent = <span class="literal">null</span>;</span><br><span class="line">            x.red = <span class="literal">false</span>;</span><br><span class="line">            root = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> x.key;</span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> x.hash;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;	<span class="comment">//遍历红黑树，找到结点要插入的位置</span></span><br><span class="line">                <span class="type">int</span> dir, ph;</span><br><span class="line">                <span class="type">K</span> <span class="variable">pk</span> <span class="operator">=</span> p.key;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)		<span class="comment">//当前结点的哈希小于树节点的哈希，往左子树中查找</span></span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)		<span class="comment">//当前结点的哈希大于树节点的哈希，往右子树中查找</span></span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="literal">null</span> &amp;&amp;		<span class="comment">//当前结点与树结点的哈希相等</span></span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="literal">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="literal">null</span>) &#123;	<span class="comment">//插入当前结点</span></span><br><span class="line">                    x.parent = xp;</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    root = balanceInsertion(root, x);	<span class="comment">//插入后的平衡</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    moveRootToFront(tab, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; <span class="title function_">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span><br><span class="line"><span class="params">                                            TreeNode&lt;K,V&gt; x)</span> &#123;</span><br><span class="line">    x.red = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//xp：父节点	 xpp：爷结点	xppl：爷结点的左孩子	xppr：爷结点的右孩子</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((xp = x.parent) == <span class="literal">null</span>) &#123;	<span class="comment">//根节点</span></span><br><span class="line">            x.red = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="literal">null</span>)	<span class="comment">//父节点为黑或爷结点为空</span></span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;	<span class="comment">//父节点为左孩子</span></span><br><span class="line">            <span class="keyword">if</span> ((xppr = xpp.right) != <span class="literal">null</span> &amp;&amp; xppr.red) &#123;	<span class="comment">//爷结点的右孩子不为空且为红色（叔为红）</span></span><br><span class="line">                xppr.red = <span class="literal">false</span>;	<span class="comment">//叔父爷染色，爷结点作为新结点</span></span><br><span class="line">                xp.red = <span class="literal">false</span>;</span><br><span class="line">                xpp.red = <span class="literal">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;					<span class="comment">//爷结点的右孩子为空或黑色（叔为黑）</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.right) &#123;	<span class="comment">//lr类型</span></span><br><span class="line">                    root = rotateLeft(root, x = xp);	<span class="comment">//左旋</span></span><br><span class="line">                    xpp = (xp = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.parent;	</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;		<span class="comment">//ll</span></span><br><span class="line">                    xp.red = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="literal">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="literal">true</span>;</span><br><span class="line">                        root = rotateRight(root, xpp);	<span class="comment">//右旋</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;							<span class="comment">//父节点为右孩子</span></span><br><span class="line">            <span class="keyword">if</span> (xppl != <span class="literal">null</span> &amp;&amp; xppl.red) &#123;		<span class="comment">//爷结点的左孩子不为空且为红色（叔为红）</span></span><br><span class="line">                xppl.red = <span class="literal">false</span>;	<span class="comment">//叔父爷染色，爷结点作为新结点</span></span><br><span class="line">                xp.red = <span class="literal">false</span>;</span><br><span class="line">                xpp.red = <span class="literal">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;				<span class="comment">//爷结点的左孩子为空或黑色（叔为黑）</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                    root = rotateRight(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                    xp.red = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="literal">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="literal">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://pic.imgdb.cn/item/63d5054aface21e9ef34ef9e.jpg" style="zoom:67%;">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; <span class="title function_">rotateLeft</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span><br><span class="line"><span class="params">                                      TreeNode&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line">    <span class="comment">//r：p的右结点	rl：p的右结点的左结点</span></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">null</span> &amp;&amp; (r = p.right) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="literal">null</span>)	<span class="comment">//处理r的左孩子</span></span><br><span class="line">            rl.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="literal">null</span>)	<span class="comment">//将p左旋</span></span><br><span class="line">            (root = r).red = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">            pp.left = r;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = r;</span><br><span class="line">        r.left = p;</span><br><span class="line">        p.parent = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://pic.imgdb.cn/item/63d506efface21e9ef38ae81.jpg" style="zoom:67%;">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; <span class="title function_">rotateRight</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span><br><span class="line"><span class="params">                                       TreeNode&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">null</span> &amp;&amp; (l = p.left) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="literal">null</span>)</span><br><span class="line">            lr.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="literal">null</span>)</span><br><span class="line">            (root = l).red = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">            pp.right = l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.left = l;</span><br><span class="line">        l.right = p;</span><br><span class="line">        p.parent = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="删除操作java">删除操作（java）</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the given node, that must be present before this call.</span></span><br><span class="line"><span class="comment"> * This is messier than typical red-black deletion code because we</span></span><br><span class="line"><span class="comment"> * cannot swap the contents of an interior node with a leaf</span></span><br><span class="line"><span class="comment"> * successor that is pinned by &quot;next&quot; pointers that are accessible</span></span><br><span class="line"><span class="comment"> * independently during traversal. So instead we swap the tree</span></span><br><span class="line"><span class="comment"> * linkages. If the current tree appears to have too few nodes,</span></span><br><span class="line"><span class="comment"> * the bin is converted back to a plain bin. (The test triggers</span></span><br><span class="line"><span class="comment"> * somewhere between 2 and 6 nodes, depending on tree structure).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">removeTreeNode</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span><br><span class="line"><span class="params">                          <span class="type">boolean</span> movable)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (n - <span class="number">1</span>) &amp; hash;</span><br><span class="line">    TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index], root = first, rl;</span><br><span class="line">    TreeNode&lt;K,V&gt; succ = (TreeNode&lt;K,V&gt;)next, pred = prev;</span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">        tab[index] = first = succ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = succ;</span><br><span class="line">    <span class="keyword">if</span> (succ != <span class="literal">null</span>)</span><br><span class="line">        succ.prev = pred;</span><br><span class="line">    <span class="keyword">if</span> (first == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.parent != <span class="literal">null</span>)</span><br><span class="line">        root = root.root();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span> || root.right == <span class="literal">null</span> ||</span><br><span class="line">        (rl = root.left) == <span class="literal">null</span> || rl.left == <span class="literal">null</span>) &#123;</span><br><span class="line">        tab[index] = first.untreeify(map);  <span class="comment">// too small</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode&lt;K,V&gt; p = <span class="built_in">this</span>, pl = left, pr = right, replacement;</span><br><span class="line">    <span class="keyword">if</span> (pl != <span class="literal">null</span> &amp;&amp; pr != <span class="literal">null</span>) &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; s = pr, sl;</span><br><span class="line">        <span class="keyword">while</span> ((sl = s.left) != <span class="literal">null</span>) <span class="comment">// find successor</span></span><br><span class="line">            s = sl;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">c</span> <span class="operator">=</span> s.red; s.red = p.red; p.red = c; <span class="comment">// swap colors</span></span><br><span class="line">        TreeNode&lt;K,V&gt; sr = s.right;</span><br><span class="line">        TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class="line">        <span class="keyword">if</span> (s == pr) &#123; <span class="comment">// p was s&#x27;s direct parent</span></span><br><span class="line">            p.parent = s;</span><br><span class="line">            s.right = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; sp = s.parent;</span><br><span class="line">            <span class="keyword">if</span> ((p.parent = sp) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s == sp.left)</span><br><span class="line">                    sp.left = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    sp.right = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((s.right = pr) != <span class="literal">null</span>)</span><br><span class="line">                pr.parent = s;</span><br><span class="line">        &#125;</span><br><span class="line">        p.left = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((p.right = sr) != <span class="literal">null</span>)</span><br><span class="line">            sr.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((s.left = pl) != <span class="literal">null</span>)</span><br><span class="line">            pl.parent = s;</span><br><span class="line">        <span class="keyword">if</span> ((s.parent = pp) == <span class="literal">null</span>)</span><br><span class="line">            root = s;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">            pp.left = s;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = s;</span><br><span class="line">        <span class="keyword">if</span> (sr != <span class="literal">null</span>)</span><br><span class="line">            replacement = sr;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            replacement = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pl != <span class="literal">null</span>)</span><br><span class="line">        replacement = pl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pr != <span class="literal">null</span>)</span><br><span class="line">        replacement = pr;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        replacement = p;</span><br><span class="line">    <span class="keyword">if</span> (replacement != p) &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; pp = replacement.parent = p.parent;</span><br><span class="line">        <span class="keyword">if</span> (pp == <span class="literal">null</span>)</span><br><span class="line">            root = replacement;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">            pp.left = replacement;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = replacement;</span><br><span class="line">        p.left = p.right = p.parent = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode&lt;K,V&gt; r = p.red ? root : balanceDeletion(root, replacement);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (replacement == p) &#123;  <span class="comment">// detach</span></span><br><span class="line">        TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class="line">        p.parent = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (pp != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                pp.left = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.right)</span><br><span class="line">                pp.right = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (movable)</span><br><span class="line">        moveRootToFront(tab, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    首先红黑树是不符合AVL树的平衡条件的，即每个节点的左子树和右子树的高度最多差1的二叉查找树。但是提出了为节点增加颜色，红黑是用非严格的平衡来换取增删节点时候旋转次数的降低，而AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多</p>
<p><img src="https://pic.imgdb.cn/item/63bf6956be43e0d30e315a52.jpg" alt="不严格平衡的红黑树"></p>
<p>​    <strong>Answer 1：</strong></p>
<ol>
<li>
<p>如果插入一个node引起了树的不平衡，AVL和RB-Tree都是最多只需要2次旋转操作，即两者都是O(1)；但是在删除node引起树的不平衡时，最坏情况下，AVL需要维护从被删node到root这条路径上所有node的平衡性，因此需要旋转的量级O(logN)，而RB-Tree最多只需3次旋转，只需要O(1)的复杂度。</p>
</li>
<li>
<p>其次，AVL的结构相较RB-Tree来说更为平衡，在插入和删除node更容易引起Tree的unbalance，因此在大量数据需要插入或者删除时，AVL需要rebalance的频率会更高。因此，RB-Tree在需要大量插入和删除node的场景下，效率更高。自然，由于AVL高度平衡，因此AVL的search效率更高。</p>
</li>
<li>
<p>map的实现只是折衷了两者在search、insert以及delete下的效率。总体来说，RB-tree的统计性能是高于AVL的。</p>
</li>
<li>
<p>红黑树的查询性能略微逊色于AVL树，因为他比avl树会稍微不平衡最多一层，也就是说红黑树的查询性能只比相同内容的avl树最多多一次比较，但是，红黑树在插入和删除上完爆avl树，avl树每次插入删除会进行大量的平衡度计算，而红黑树为了维持红黑性质所做的红黑变换和旋转的开销，相较于avl树为了维持平衡的开销要小得多</p>
</li>
<li>
<p>功能、性能、空间开销的折中结果。<br>
AVL更平衡，结构上更加直观，时间效能针对读取而言更高；维护稍慢，空间开销较大。<br>
红黑树，读取略逊于AVL，维护强于AVL，空间开销与AVL类似，内容极多时略优于AVL，维护优于AVL。</p>
<p><strong>所以简单说，如果你的应用中，搜索的次数远远大于插入和删除，那么选择AVL，如果搜索，插入删除次数几乎差不多，应该选择RB。</strong></p>
</li>
</ol>
<p>​    <strong>1 好处 及 用途</strong></p>
<p>​    红黑树并不追求“完全平衡”——它只要求部分地达到平衡要求，降低了对旋转的要求，从而提高了性能。</p>
<p>​    红黑树能够以O(log2 n) 的时间复杂度进行搜索、插入、删除操作。当然，还有一些更好的，但实现起来更复杂的<a href="http://lib.csdn.net/base/datastructure">数据结构</a> 能够做到一步旋转之内达到平衡，但红黑树能够给我们一个比较“便宜”的解决方案。红黑树的<a href="http://lib.csdn.net/base/datastructure">算法</a>时间复杂度和AVL相同，但统计性能比AVL树更高。</p>
<p>​    当然，红黑树并不适应所有应用树的领域。如果数据基本上是静态的，那么让他们待在他们能够插入，并且不影响平衡的地方会具有更好的性能。如果数据完全是静态的，例如，做一个哈希表，性能可能会更好一些。</p>
<p>​     在实际的系统中，例如，需要使用动态规则的防火墙系统，使用红黑树而不是散列表被实践证明具有更好的伸缩性。</p>
<p>​     典型的用途是实现关联数组</p>
<p>​    <strong>2. AVL树是最先发明的自平衡二叉查找树。</strong></p>
<p>​    在AVL树中任何节点的两个儿子子树的高度最大差别为一，所以它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下都是O(log n)。增加和删除可能需要通过一次或多次树旋转来重新平衡这个树。AVL树得名于它的发明者 G.M. Adelson-Velsky 和 E.M. Landis，他们在 1962 年的论文 “An algorithm for the organization of information” 中发表了它。引入二叉树的目的是为了提高二叉树的搜索的效率, 减少树的平均搜索长度.为此,就必须每向二叉树插入一个结点时调整树的结构,使得二叉树搜索保持平衡,从而可能降低树的高度,减少的平均树的搜索长度.</p>
<p>​    AVL树的定义:<br>
​    一棵AVL树满足以下的条件:<br>
​    1&gt;它的左子树和右子树都是AVL树<br>
​    2&gt;左子树和右子树的高度差不能超过1<br>
​    从条件1可能看出是个递归定义,如GNU一样.</p>
<p>​    性质:<br>
​    1&gt;一棵n个结点的AVL树的其高度保持在0(log2(n)),不会超过3/2log2(n+1)<br>
​    2&gt;一棵n个结点的AVL树的平均搜索长度保持在0(log2(n)).<br>
​    3&gt;一棵n个结点的AVL树删除一个结点做平衡化旋转所需要的时间为0(log2(n)).</p>
]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
  </entry>
  <entry>
    <title>校验注解</title>
    <url>/post/%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2><span id="导入依赖">导入依赖</span></h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.bval<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bval-jsr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>SpringBoot依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--继承父模块中的依赖：数据校验--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用以下注解时，必须在控制层的参数加上@Valid才能生效</p>
<h2><span id="notnull">@NotNull</span></h2>
<ul>
<li>不能为 null，但可以为 empty</li>
<li>一般用在 Integer 类型的基本数据类型的非空校验上，而且被其标注的字段可以使用 @size、@Max、@Min 对字段数值进行大小的控制</li>
<li>一个 BigDecimal 的字段使用字段校验标签应该为 @NotNull</li>
</ul>
<h2><span id="notempty">@NotEmpty</span></h2>
<ul>
<li>不能为 null，且长度必须大于 0</li>
<li>一般用在集合类上或者数组上</li>
</ul>
<h2><span id="notblank">@NotBlank</span></h2>
<ul>
<li>只能作用在接收的 String 类型上，不能为 null，而且调用 trim() 后，长度必须大于 0即：必须有实际字符</li>
</ul>
<h2><span id="size">@Size</span></h2>
<p>一般用在 String 类型上可对字段数值进行最大长度限制的控制</p>
<h2><span id="max-min">@Max @Min</span></h2>
<p>一般用在 Integer 类型上可对字段数值进行大小范围的控制</p>
<table>
<thead>
<tr>
<th></th>
<th>@NotNull</th>
<th>@NotEmpty</th>
<th>@NotBlank</th>
</tr>
</thead>
<tbody>
<tr>
<td>String name = null;</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>String name = “”;</td>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>String name = &quot; &quot;;</td>
<td>true</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>String name = “Hello World！”;</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
</tbody>
</table>
<h2><span id="常用的校验注解">常用的校验注解</span></h2>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Null</td>
<td>限制只能为null</td>
</tr>
<tr>
<td>@NotNull</td>
<td>限制必须不能为null</td>
</tr>
<tr>
<td>@AssertTrue</td>
<td>限制必须为true</td>
</tr>
<tr>
<td>@AssertFalse</td>
<td>限制必须为false</td>
</tr>
<tr>
<td>@Min(value)</td>
<td>限制必须为一个不小于指定值的数字</td>
</tr>
<tr>
<td>@Max(value)</td>
<td>限制必须为一个不大于指定值的数字</td>
</tr>
<tr>
<td>@DecimalMin(value)</td>
<td>被限制的元素必须是一个数字，其值必须大于等于指定的最小值</td>
</tr>
<tr>
<td>@DecimalMax(value)</td>
<td>被限制的元素必须是一个数字，其值必须小于等于指定的最大值</td>
</tr>
<tr>
<td>@Size(max,min)</td>
<td>限制字符长度必须在min到max的指定范围内</td>
</tr>
<tr>
<td>@Digits(integer,fraction)</td>
<td>限制必须为一个小数，且整数部分的位数不能超过integer、小数部分的位数不能超过fraction的在可接受的范围内</td>
</tr>
<tr>
<td>@Past</td>
<td>被限制的元素(日期类型)必须是一个过去的日期</td>
</tr>
<tr>
<td>@Future</td>
<td>被限制的元素(日期类型)必须是一个将来的日期</td>
</tr>
<tr>
<td>@Pattern(value)</td>
<td>限制必须符合指定的正则表达式</td>
</tr>
<tr>
<td>@Email</td>
<td>被限制的元素值为是电子邮件地址，也可以通过正则表达式和flag指定自定义的email</td>
</tr>
<tr>
<td>@Length</td>
<td>被限制的字符串的大小必须在指定的范围内</td>
</tr>
<tr>
<td>@NotEmpty</td>
<td>被限制的字符串必须非空(不为null且不为空)</td>
</tr>
<tr>
<td>@Range</td>
<td>被限制的元素必须在合适的范围内</td>
</tr>
<tr>
<td>@JsonFormat</td>
<td>使用 @JsonFormat 注解时，查到的时间可能会比数据库中的时间少八个小时，这是由于时区差引起的，JsonFormat 默认的时区是 Greenwich Time， 默认的是格林威治时间，而我们是在东八区上，所以时间会比实际我们想得到的时间少八个小时。需要在后面加上一个时区:@JsonFormat(pattern=“yyyy-MM-dd”,timezone=“GMT+8”) private Date date;</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>第三阶段</category>
      </categories>
  </entry>
  <entry>
    <title>流程控制</title>
    <url>/post/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(b = <span class="literal">false</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;a &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;c&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        从键盘分别输入年、月、日，判断这一天是当年的第几天</span></span><br><span class="line"><span class="comment">        注：判断一年是否是闰年的标准：</span></span><br><span class="line"><span class="comment">        1）可以被4整除，但不可被100整除、或</span></span><br><span class="line"><span class="comment">        2）可以被400整除</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入年份：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入月份：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入几号：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">date</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">month2</span> <span class="operator">=</span> <span class="number">28</span>;</span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year %<span class="number">100</span> != <span class="number">0</span> ||year % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    month2 = <span class="number">29</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (month)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        day += <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        day += <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        day += <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        day += <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        day += <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        day += <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        day += <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        day += <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        day += <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        day += <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        day += month2;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        day += date;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的月份不合法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(day);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>类加载的初始化顺序</title>
    <url>/post/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<h2><span id="静态代码块">静态代码块</span></h2>
<ul>
<li>
<p>随着类的加载而运行，只执行一次</p>
</li>
<li>
<p>当出现多个静态代码块(包括静态属性赋值）时，按顺序执行</p>
</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    i = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(Order.i);		<span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="构造代码块">构造代码块</span></h2>
<ul>
<li>随着对象的创建而运行，且先于构造函数的执行</li>
<li>有多个构造代码块时，也按顺序执行</li>
</ul>
<h2><span id="构造器">构造器</span></h2>
<ul>
<li>与类名同名的，通过new运算符来新建一个类的实例的函数。可以同时拥有多个不同参数类型顺序的构造器</li>
<li>当未定义任何构造器时，编译器会默认提供一个无参的构造器</li>
</ul>
<span id="more"></span>
<h2><span id="执行顺序">执行顺序</span></h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Order</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> Order();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Order();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------</span><br><span class="line">静态代码块</span><br><span class="line">构造代码块</span><br><span class="line">构造器</span><br><span class="line">===============</span><br><span class="line">构造代码块</span><br><span class="line">构造器</span><br></pre></td></tr></table></figure>
<p>可以看出</p>
<ol>
<li>静态代码块&gt;&gt;构造代码块&gt;&gt;构造器</li>
<li>不管new几次对象，静态代码块都只执行一次，而构造代码块和构造器每次创建对象时都会执行</li>
</ol>
<h2><span id="继承的情况">继承的情况</span></h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Inheritance</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> GrandChild();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> GrandChild();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Parent</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;父类的静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;父类的构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Parent()&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;父类的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Child</span> <span class="title">extends</span> <span class="title">Parent</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;子类的静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;子类的构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Child()&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;子类的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">GrandChild</span> <span class="title">extends</span> <span class="title">Child</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;孙子类的静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;孙子类的构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    GrandChild()&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;孙子类的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------</span><br><span class="line">父类的静态代码块</span><br><span class="line">子类的静态代码块</span><br><span class="line">孙子类的静态代码块</span><br><span class="line">父类的构造代码块</span><br><span class="line">父类的构造器</span><br><span class="line">子类的构造代码块</span><br><span class="line">子类的构造器</span><br><span class="line">孙子类的构造代码块</span><br><span class="line">孙子类的构造器</span><br><span class="line">===============</span><br><span class="line">父类的构造代码块</span><br><span class="line">父类的构造器</span><br><span class="line">子类的构造代码块</span><br><span class="line">子类的构造器</span><br><span class="line">孙子类的构造代码块</span><br><span class="line">孙子类的构造器</span><br></pre></td></tr></table></figure>
<h3><span id="子类对象实例化过程">子类对象实例化过程</span></h3>
<ol>
<li>
<p>首先不断向上查找直至到达顶层父类Object，然后不断向下依次调用父类的构造器进行父特征的初始化</p>
</li>
<li>
<p>然后向下依次执行静态代码块（静态代码块随着类的加载执行且执行一次，再次创建对象无需加载类）</p>
</li>
<li>
<p>接着依次创建对象，依次执行构造代码块、构造器</p>
</li>
<li>
<p>直到创建完所有子类对象</p>
<p><a href="../super/#%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8">若父类定义了有参构造器而没定义无参构造器，此时子类的构造器会报错</a></p>
</li>
</ol>
<h2><span id="静态内部类">静态内部类</span></h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OuterClass</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OuterClass</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;外部类构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMethod</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;外部类静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;外部类静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;外部类构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">StaticInnerClass</span>&#123;</span><br><span class="line">        StaticInnerClass()&#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;静态内部类的构造器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;静态内部类的静态代码块&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;静态内部类的构造代码块&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMethod</span>()</span>&#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;静态内部类的静态方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">class</span> <span class="title">InnerClass</span>&#123;</span><br><span class="line">        InnerClass()&#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;实例内部类的构造器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*static void testMethod()&#123;					//编译报错</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;实例内部类静态方法&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        static&#123;									   //编译报错</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;实例内部类静态代码块&quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;实例内部类的构造代码块&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="外部类执行顺序">外部类执行顺序</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">--------------------------------------------</span><br><span class="line">外部类静态代码块</span><br><span class="line">外部类构造代码块</span><br><span class="line">外部类构造器</span><br></pre></td></tr></table></figure>
<h3><span id="外部类静态方法执行顺序">外部类静态方法执行顺序</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OuterClass.testMethod();</span><br><span class="line">--------------------------------------------</span><br><span class="line">外部类静态代码块</span><br><span class="line">外部类静态方法</span><br></pre></td></tr></table></figure>
<ul>
<li>执行静态方法时，先加载类和静态代码块</li>
<li>不创建类实例对象，直接访问静态方法</li>
</ul>
<h3><span id="静态内部类执行顺序">静态内部类执行顺序</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">OuterClass</span>.StaticInnerClass();</span><br><span class="line">--------------------------------------------</span><br><span class="line">外部类静态代码块</span><br><span class="line">静态内部类的静态代码块</span><br><span class="line">静态内部类的构造代码块</span><br><span class="line">静态内部类的构造器</span><br></pre></td></tr></table></figure>
<ul>
<li>首先加载外部类以及外部类静态代码块，但没有创建外部类实例对象</li>
<li>接着顺序执行构造静态内部类实例对象</li>
</ul>
<h3><span id="静态内部类静态方法执行顺序">静态内部类静态方法执行顺序</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OuterClass.StaticInnerClass.testMethod();</span><br><span class="line">--------------------------------------------</span><br><span class="line">外部类静态代码块</span><br><span class="line">静态内部类的静态代码块</span><br><span class="line">静态内部类的静态方法</span><br></pre></td></tr></table></figure>
<ul>
<li>同样加载了外部类及外部类静态代码块，但没有创建外部类实例对象</li>
<li>加载了当前内部类及静态代码块，但没有创建内部类实例对象</li>
</ul>
<h3><span id="实例内部类执行顺序">实例内部类执行顺序</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">OuterClass</span>().<span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br><span class="line">--------------------------------------------</span><br><span class="line">外部类静态代码块</span><br><span class="line">外部类构造代码块</span><br><span class="line">外部类构造器</span><br><span class="line">实例内部类的构造代码块</span><br><span class="line">实例内部类的构造器</span><br></pre></td></tr></table></figure>
<ul>
<li>先后创建了外部类、内部类的实例对象</li>
</ul>
<p><strong>结论</strong>：<br>
静态内部类并不会随着外部类的初始化而被初始化，而是当静态内部类的方法被调用时，静态内部类才被初始化。反之，静态内部类被调用时，仅加载了外部类及外部类静态代码块，并没有创建外部类实例对象</p>
<table>
<thead>
<tr>
<th></th>
<th>类的执行顺序</th>
</tr>
</thead>
<tbody>
<tr>
<td>不含继承关系、不含内部类</td>
<td>静态代码块&gt;&gt;构造代码块&gt;&gt;构造器，静态代码块随类的加载只执行一次</td>
</tr>
<tr>
<td>含继承关系</td>
<td>访问子类对象时，从上向下依次加载类和静态代码块，再依次创建对象（构造代码块&gt;&gt;构造器）</td>
</tr>
<tr>
<td>含内部类</td>
<td>访问内部类对象时，无论静态或非静态，都先加载外部类及外部类静态代码块，不创建外部实例对象，然后创建内部类对象</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot统一异常处理与信息返回</title>
    <url>/post/%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%BF%94%E5%9B%9E/</url>
    <content><![CDATA[<h2><span id="异常处理">异常处理</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(value = &#123;Exception.class&#125;)</span><span class="comment">//value=&#123;&#125;可省略</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Resp&lt;T&gt; <span class="title function_">exceptionHandler</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//这里先判断拦截到的Exception是不是我们自定义的异常类型</span></span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> AppException)&#123;</span><br><span class="line">            <span class="type">AppException</span> <span class="variable">appException</span> <span class="operator">=</span> (AppException)e;</span><br><span class="line">            <span class="keyword">return</span> Resp.error(appException.getCode(),appException.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果拦截的异常不是我们自定义的异常(例如：数据库主键冲突)</span></span><br><span class="line">        <span class="keyword">return</span> Resp.error(<span class="number">500</span>,<span class="string">&quot;服务器端异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;demo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Resp&lt;String&gt; <span class="title function_">demo1</span><span class="params">(String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;ok&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> Resp.success(<span class="string">&quot;succ&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;err&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="comment">//抛业务相关的异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(AppExceptionCodeMsg.USERNAME_NOT_EXISTS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;errcode&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(AppExceptionCodeMsg.INVALID_CODE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;0&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="type">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查用户积分是否足够，如果不够，就抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;notenough&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(AppExceptionCodeMsg.USER_CREDIT_NOT_ENOUTH);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Resp.success(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Resp&lt;List&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">		List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Resp.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2><span id="信息返回">信息返回</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resp</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务端返回的错误码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="comment">//服务端返回的错误信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    <span class="comment">//我们服务端返回的数据</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Resp</span><span class="params">(<span class="type">int</span> code,String msg,T data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Resp <span class="title function_">success</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="type">Resp</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resp</span>(<span class="number">200</span>, <span class="string">&quot;success&quot;</span>, data);</span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Resp <span class="title function_">success</span><span class="params">(String msg,T data)</span>&#123;</span><br><span class="line">        <span class="type">Resp</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resp</span>(<span class="number">200</span>,msg, data);</span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Resp <span class="title function_">error</span><span class="params">(AppExceptionCodeMsg appExceptionCodeMsg)</span>&#123;</span><br><span class="line">        <span class="type">Resp</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resp</span>(appExceptionCodeMsg.getCode(), appExceptionCodeMsg.getMsg(), <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Resp <span class="title function_">error</span><span class="params">(<span class="type">int</span> code,String msg)</span>&#123;</span><br><span class="line">        <span class="type">Resp</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resp</span>(code,msg, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2><span id="枚举">枚举</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个枚举类中定义的都是跟业务有关的异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">AppExceptionCodeMsg</span> &#123;</span><br><span class="line"></span><br><span class="line">    INVALID_CODE(<span class="number">10000</span>,<span class="string">&quot;验证码无效&quot;</span>),</span><br><span class="line">    USERNAME_NOT_EXISTS(<span class="number">10001</span>,<span class="string">&quot;用户名不存在&quot;</span>),</span><br><span class="line">    USER_CREDIT_NOT_ENOUTH(<span class="number">10002</span>,<span class="string">&quot;用户积分不足&quot;</span>);</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code ;</span><br><span class="line">    <span class="keyword">private</span> String msg ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    AppExceptionCodeMsg(<span class="type">int</span> code, String msg)&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="自定义异常类">自定义异常类</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;服务器异常&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AppException</span><span class="params">(AppExceptionCodeMsg appExceptionCodeMsg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.code = appExceptionCodeMsg.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = appExceptionCodeMsg.getMsg();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AppException</span><span class="params">(<span class="type">int</span> code,String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2><span id></span></h2>
]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
  </entry>
  <entry>
    <title>继承</title>
    <url>/post/%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<p>is a”代表的是类之间的继承关系，比如PC机是计算机，工作站也是计算机。PC机和工作站是两种不同类型的计算机，但都继承了计算机的共同特性。因此在用 Java语言实现时，应该将PC机和工作站定义成两种类，均继承计算机类。</p>
<p>“has a”代表的是对象和它的成员的从属关系。同一种类的对象，通过它们的属性的不同值来区别。比如一台PC机的操作系统是Windows，另一台PC机的操作系统是Linux。操作系统是PC机的一个成员变量，根据这一成员变量的不同值，可以区分不同的PC机对象。</p>
<p>is a 是如果A是B，那么B就是A的基类。比如：等边三角形是使是三角形，那么，三角形就是等边三角形的基类。<br>
has a 是如果A中有B，那么，B就是A的组成部分</p>
<p>如果你确定两件对象之间是is-a的关系，那么此时你应该使用继承；比如菱形、圆形和方形都是形状的一种，那么他们都应该从形状类继承而不是聚合。<br>
如果你确定两件对象之间是has-a的关系，那么此时你应该使用聚合；比如电脑是由显示器、CPU、硬盘等组成的，那么你应该把显示器、CPU、硬盘这些类聚合成电脑类，而不是从电脑类继承。</p>
<span id="more"></span>
<p>如果多个类有着共同的属性,并且类之间符合is a 的关系，可以将共性的抽取到一个类中,作为父类,</p>
<p>别的类通过使用extends继承它,进而获取它的所有的成员(处理构造器)</p>
<h2><span id="意义">意义</span></h2>
<p>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个 类无需再定义这些属性和行为，只要继承那个类即可。</p>
<h2><span id="使用">使用</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">子类 extends 父类&#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>子类:继承其他类的类,又叫派生类</li>
<li>父类:被继承的类,又叫基类或者超类</li>
</ul>
<ol>
<li>Java只支持单继承,不能多继承,支持多级继承</li>
<li>如果继承了一个类,那么就拥有了除了构造方法之外的父类的所有的成员(属性和方法)</li>
<li>私有成员(private)不能被继承的,引用了私有成员的方法可以被子类继承的</li>
</ol>
<p>静态成员也是被继承的(没有意义)</p>
<h2><span id="方法的重写">方法的重写</span></h2>
<p>当子类从父类中继承过来的方法不满足自身的要求的时，在子类中可以根据需要对从父类中继承来的方法进行改造，也称为方法的重置、覆盖。在程序执行时，子类的方法将代替父类的方法执行。</p>
<table>
<thead>
<tr>
<th></th>
<th>子类重写后的方法、父类被重写的方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>方法名称、参数列表</td>
<td>相同</td>
</tr>
<tr>
<td>异常、返回值类型</td>
<td>小于等于</td>
</tr>
<tr>
<td>访问权限</td>
<td>大于等于</td>
</tr>
</tbody>
</table>
<ul>
<li>访问修饰符的限制一定要大于被重写方法的访问修饰符（public&gt;protected&gt;default&gt;private)</li>
<li>重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常</li>
<li>子类与父类中同名同参数的方法必须同时声明为非static的(即为重写)， 或者同时声明为static的（不是重写）。因为static方法是属于类的，子类无法重写属于父类的方法。</li>
</ul>
<h3><span id="重载overload和重写override">重载(Overload)和重写(Override)</span></h3>
<table>
<thead>
<tr>
<th>重载</th>
<th>重写</th>
</tr>
</thead>
<tbody>
<tr>
<td>在一个类中</td>
<td>在子类和父类中</td>
</tr>
<tr>
<td>同名方法的参数列表不同(参数类型，参数个数以及参数顺序)</td>
<td><strong>同名方法的参数列表都必须相同</strong></td>
</tr>
<tr>
<td>返回类型没有要求</td>
<td><strong>返回类型与父类一致（引用类型要能向上转型）</strong></td>
</tr>
<tr>
<td>访问权限没有要求</td>
<td>相比于重写前的方法，<strong>访问权限不能更低</strong></td>
</tr>
<tr>
<td>异常没有要求</td>
<td>相比于重写前的方法，不能申明更加宽泛的检查型异常</td>
</tr>
<tr>
<td>实现类中的多态（编译时的多态性）</td>
<td>多态的前提（运行时的多态性）</td>
</tr>
</tbody>
</table>
<h2><span id="访问权限修饰符">访问权限修饰符</span></h2>
<p>在类的成员定义前，用来限定对象对该类成员的访问权限。</p>
<p>（public&gt;protected&gt;default&gt;private)</p>
<table>
<thead>
<tr>
<th>访问权限修饰符</th>
<th>public</th>
<th>protected</th>
<th>default</th>
<th>private</th>
</tr>
</thead>
<tbody>
<tr>
<td>类内部</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>同包</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>不同包子类</td>
<td>Yes</td>
<td>Yes</td>
<td></td>
<td></td>
</tr>
<tr>
<td>同一个工程</td>
<td>Yes</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>其中，对于class的权限修饰只可以用public和default(缺省)。</li>
</ul>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>编码与数制</title>
    <url>/post/%E7%BC%96%E7%A0%81%E4%B8%8E%E6%95%B0%E5%88%B6/</url>
    <content><![CDATA[<h1><span id="引言">引言</span></h1>
<p>1、2、3、4……，我们从小便学习这么计数，并使用到现在。但是这样的计数方式从何而来呢？又如何发展成如今计算机的计数方式？</p>
<span id="more"></span>
<p>罗马人从使用手指计数到在羊皮上画出Ⅰ、Ⅱ、Ⅲ来代替手指的字符，他们定义出了能够表示不同个数的符号，并随后引出了X(十)、C(百)、(M)千等等符号。随着要表示的数量越来越多，他们不得不引出更多的符号。</p>
<p>印度人发明了如今成为国际通用的阿拉伯数字，与罗马人的计数方式相比，阿拉伯数字不需要不断引出新的符号，而是用数字的位置来表示，高位在左，低位在右，传入欧洲后，加上逢十进一，演变成如今人们使用的数字计数，即十进制计数法（D)。</p>
<h1><span id="进位计数法">进位计数法</span></h1>
<h2><span id="r进制计数法">r进制计数法</span></h2>
<p>r进制计数法是从十进制计数法中抽象出来的概念，r可以表示任何整数，逢r进一</p>
<p>相比于传统计数方法，r进制计数法</p>
<ul>
<li>
<p>利用了数字位置的信息</p>
<p>每个数位表示不同的常数，第0位表示r<sup>0</sup>,第1位表示r<sup>1</sup>……</p>
<p>（从0开始）第i位表示r<sup>i</sup>，r<sup>i</sup>就是第i位的<strong>位权</strong></p>
</li>
<li>
<p>每个数位使用r种不同数码</p>
<p>r就是<strong>基数</strong></p>
<p>真实的数字 = 累加 （每个数位的数字	乘以	该位的位权）</p>
<blockquote>
<p>K<sub>n</sub>K<sub>n-1</sub>…K<sub>2</sub>K<sub>1</sub>K<sub>0</sub>K<sub>-1</sub>K<sub>-2</sub>…K<sub>-m</sub></p>
<p>= K<sub>n</sub>*r<sup>n</sup>+K<sub>n-1</sub>*r<sup>n-1</sup>+…+K<sub>2</sub>*r<sup>2</sup>+K<sub>1</sub>*r<sup>1</sup>+K<sub>0</sub>*r<sup>0</sup>+K<sub>-1</sub>*r<sup>-1</sup>+K<sub>-2</sub>*r<sup>-2</sup>+…+K<sub>-m</sub>*r<sup>-m</sup></p>
</blockquote>
</li>
</ul>
<h2><span id="二进制计数法">二进制计数法</span></h2>
<p>在计算机中使用高电平和低电平两种稳定状态的电子器件，因而使用二进制来表示计算机中的数据</p>
<p>二进制中的1、0对应了逻辑中的真、假，为逻辑运算提供便利条件</p>
<p>常用的还有<strong>八进制计数法（O）、十六进制计数法（H）</strong></p>
<h1><span id="不同进制间的转换">不同进制间的转换</span></h1>
<p>为了深入了解不同进制表示的数据，还需分析不同进制间的转换</p>
<h2><span id="任意进制-gt-十进制">任意进制 -&gt; 十进制</span></h2>
<h3><span id="按权展开相加法">按权展开相加法</span></h3>
<p>累加 （每个数位的数字	乘以	该位的位权）</p>
<h2><span id="二进制-gt-八进制-十六进制">二进制 -&gt; 八进制 、十六进制</span></h2>
<ul>
<li>二进制的3个数位最多能表示8个数字</li>
<li>二进制的4个数位最多能表示16个数字</li>
</ul>
<p>二进制 -&gt; 八进制 ：</p>
<ol>
<li>小数点左边：3位1组-&gt;最左边补0凑3位</li>
<li>小数点右边：3位1组-&gt;最右边补0凑3位</li>
<li>每组转化成八进制数</li>
</ol>
<p>二进制 -&gt; 十六进制：</p>
<ol>
<li>小数点左边：4位1组-&gt;最左边补0凑4位</li>
<li>小数点右边：4位1组-&gt;最右边补0凑4位</li>
<li>每组转化成十六进制数</li>
</ol>
<h2><span id="八进制-十六进制-gt-二进制">八进制 、十六进制 -&gt; 二进制</span></h2>
<p>八进制 -&gt; 二进制 ：1位 -&gt; 3位二进制数</p>
<p>十六进制 -&gt; 二进制：1位 -&gt; 4位二进制数</p>
<p>最后去掉最高位最小位的0</p>
<h2><span id="八进制-gt-十六进制">八进制 -&gt; 十六进制</span></h2>
<p>以二进制为桥梁  八进制-&gt;二进制-&gt;十六进制</p>
<h2><span id="十进制-gt-二进制">十进制 -&gt; 二进制</span></h2>
<h3><span id="基数乘除法">基数乘除法</span></h3>
<p>进位计数法有效利用了数码的位置信息，如何借助数字位置信息实现进制转换呢？</p>
<blockquote>
<p>对于一个r进制数：K<sub>n</sub>K<sub>n-1</sub>…K<sub>2</sub>K<sub>1</sub>K<sub>0</sub>K<sub>-1</sub>K<sub>-2</sub>…K<sub>-m</sub></p>
<p>= K<sub>n</sub>*r<sup>n</sup>+K<sub>n-1</sub>*r<sup>n-1</sup>+…+K<sub>2</sub>*r<sup>2</sup>+K<sub>1</sub>*r<sup>1</sup>+K<sub>0</sub>*r<sup>0</sup>+K<sub>-1</sub>*r<sup>-1</sup>+K<sub>-2</sub>*r<sup>-2</sup>+…+K<sub>-m</sub>*r<sup>-m</sup></p>
</blockquote>
<p>乘以基数r</p>
<blockquote>
<p>r*(K<sub>n</sub>K<sub>n-1</sub>…K<sub>2</sub>K<sub>1</sub>K<sub>0</sub>K<sub>-1</sub>K<sub>-2</sub>…K<sub>-m</sub>)</p>
<p>=r*(K<sub>n</sub>*r<sup>n</sup>+K<sub>n-1</sub>*r<sup>n-1</sup>+…+K<sub>2</sub>*r<sup>2</sup>+K<sub>1</sub>*r<sup>1</sup>+K<sub>0</sub>*r<sup>0</sup>+K<sub>-1</sub>*r<sup>-1</sup>+K<sub>-2</sub>*r<sup>-2</sup>+…+K<sub>-m</sub>*r<sup>-m</sup>)</p>
<p>=K<sub>n</sub>*r<sup>n+1</sup>+K<sub>n-1</sub>*r<sup>n</sup>+…+K<sub>2</sub>*r<sup>3</sup>+K<sub>1</sub>*r<sup>2</sup>+K<sub>0</sub>*r<sup>1</sup>+K<sub>-1</sub>*r<sup>0</sup>+K<sub>-2</sub>*r<sup>-1</sup>+…+K<sub>-m</sub>*r<sup>-m+1</sup>+0*r<sup>m</sup></p>
<p>=K<sub>n</sub>K<sub>n-1</sub>…K<sub>2</sub>K<sub>1</sub>K<sub>0</sub>K<sub>-1</sub>K<sub>-2</sub>…K<sub>-m</sub>0</p>
</blockquote>
<p>相比于K<sub>n</sub>K<sub>n-1</sub>…K<sub>2</sub>K<sub>1</sub>K<sub>0</sub>K<sub>-1</sub>K<sub>-2</sub>…K<sub>-m</sub>，各个数位的数码同时发生左移，并在最右边一位补0</p>
<p>除以基数r</p>
<blockquote>
<p>(K<sub>n</sub>K<sub>n-1</sub>…K<sub>2</sub>K<sub>1</sub>K<sub>0</sub>K<sub>-1</sub>K<sub>-2</sub>…K<sub>-m</sub>)\r</p>
<p>= (K<sub>n</sub>*r<sup>n</sup>+K<sub>n-1</sub>*r<sup>n-1</sup>+…+K<sub>2</sub>*r<sup>2</sup>+K<sub>1</sub>*r<sup>1</sup>+K<sub>0</sub>*r<sup>0</sup>+K<sub>-1</sub>*r<sup>-1</sup>+K<sub>-2</sub>*r<sup>-2</sup>+…+K<sub>-m</sub>*r<sup>-m</sup>)\r</p>
<p>=0*r<sup>n</sup>+K<sub>n</sub>*r<sup>n-1</sup>+K<sub>n-1</sub>*r<sup>n</sup>-2+…+K<sub>2</sub>*r<sup>1</sup>+K<sub>1</sub>*r<sup>0</sup>+K<sub>0</sub>*r<sup>-1</sup>+K<sub>-1</sub>*r<sup>-2</sup>+K<sub>-2</sub>*r<sup>-3</sup>+…+K<sub>-m</sub>*r<sup>-m-1</sup></p>
<p>=0K<sub>n</sub>K<sub>n-1</sub>…K<sub>2</sub>K<sub>1</sub>K<sub>0</sub>K<sub>-1</sub>K<sub>-2</sub>…K<sub>-m</sub></p>
</blockquote>
<p>相比于K<sub>n</sub>K<sub>n-1</sub>…K<sub>2</sub>K<sub>1</sub>K<sub>0</sub>K<sub>-1</sub>K<sub>-2</sub>…K<sub>-m</sub>，各个数位的数码同时发生右移，并在最左边一位补0</p>
<table>
<thead>
<tr>
<th></th>
<th>第n+1位</th>
<th>第n位</th>
<th>第n-1位</th>
<th>…</th>
<th>第2位</th>
<th>第1位</th>
<th>第0位</th>
<th>第-1位</th>
<th>…</th>
<th>第-(m-1)</th>
<th>第-m位</th>
<th>第-(m+1)</th>
</tr>
</thead>
<tbody>
<tr>
<td>原数</td>
<td></td>
<td>Kn</td>
<td>Kn-1</td>
<td>…</td>
<td>K2</td>
<td>K1</td>
<td>K0</td>
<td>K-1</td>
<td>…</td>
<td>K-(m-1)</td>
<td>K-m</td>
<td></td>
</tr>
<tr>
<td>乘以基数r</td>
<td>Kn</td>
<td>Kn-1</td>
<td>Kn-2</td>
<td>…</td>
<td>K1</td>
<td>K0</td>
<td>K-1</td>
<td>K-2</td>
<td>…</td>
<td>K-m</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>除以基数r</td>
<td></td>
<td>0</td>
<td>Kn</td>
<td>…</td>
<td>K3</td>
<td>K2</td>
<td>K1</td>
<td>K0</td>
<td>…</td>
<td>K-(m-2)</td>
<td>K-(m-1)</td>
<td>K-m</td>
</tr>
</tbody>
</table>
<h4><span id="对于整数除基取余法">对于整数：除基取余法</span></h4>
<p>将数字除以基数，相当于右移了数字，小数点右边的为余数，先除得的余数为低位，即二进制的最低位</p>
<p>继续将商除以基数，继续右移，直到商为0，后除得的余数为高位</p>
<p><strong>除基取余，先余为低，后余为高，商0结束</strong></p>
<h4><span id="对于小数乘基取整法">对于小数：乘基取整法</span></h4>
<p>将数字乘以基数，相当于左移了数字，小数点左边的为高位</p>
<p>此时乘积的结构为： 高位数码（整数部分） + 剩余数  (**.**K<sub>-1</sub>K<sub>-2</sub>…K<sub>-m</sub>)*r =  K<sub>-1</sub> <strong>.</strong> K<sub>-2</sub>…K<sub>-m</sub></p>
<p>乘积减去高位数码得到剩余数，再将剩余数继续乘基数，重复以上步骤，直到高位数码为0</p>
<p><strong>乘基取整，先整为高，后整为低，整0结束</strong></p>
<p>注意：不是每个小数都能用二进制表示</p>
<h3><span id="拼凑法">拼凑法</span></h3>
<p>在十进制转换为二进制中，大小适中的数字，可以通过位权凑出数字</p>
<table>
<thead>
<tr>
<th style="text-align:left">2<sup>-4</sup></th>
<th style="text-align:left">2<sup>-3</sup></th>
<th style="text-align:left">2<sup>-2</sup></th>
<th style="text-align:left">2<sup>-1</sup></th>
<th style="text-align:left">2<sup>0</sup></th>
<th style="text-align:left">2<sup>1</sup></th>
<th style="text-align:left">2<sup>2</sup></th>
<th style="text-align:left">2<sup>3</sup></th>
<th style="text-align:left">2<sup>4</sup></th>
<th style="text-align:left">2<sup>5</sup></th>
<th style="text-align:left">2<sup>6</sup></th>
<th style="text-align:left">2<sup>7</sup></th>
<th style="text-align:left">2<sup>8</sup></th>
<th style="text-align:left">2<sup>9</sup></th>
<th style="text-align:left">2<sup>10</sup></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0.0625</td>
<td style="text-align:left">0.125</td>
<td style="text-align:left">0.25</td>
<td style="text-align:left">0.5</td>
<td style="text-align:left">1</td>
<td style="text-align:left">2</td>
<td style="text-align:left">4</td>
<td style="text-align:left">8</td>
<td style="text-align:left">16</td>
<td style="text-align:left">32</td>
<td style="text-align:left">64</td>
<td style="text-align:left">128</td>
<td style="text-align:left">256</td>
<td style="text-align:left">512</td>
<td style="text-align:left">1024</td>
</tr>
</tbody>
</table>
<p>75.325D = 64 + 8 + 2 + 1 + 0.25 + 0.125 = 2<sup>6</sup> + 2<sup>3</sup> + 2<sup>1</sup> + 2<sup>0</sup> + 2<sup>-2</sup> + 2<sup>-3</sup> = 1001011.011B</p>
<p>在了解了计算机的进位计数法及不同进制的转换后，便可以学习如何将生活中的数存入计算机</p>
<h1><span id="整数的表示">整数的表示</span></h1>
<p>在日常生活中带正负号的数，我们通常称为 <strong>真值</strong></p>
<p>将数据<strong>符号数字化</strong>后并能够存储到计算机中的数称为 <strong>机器数</strong>。</p>
<p>先看简化的无符号整数（以下都是二进制计数）</p>
<h2><span id="无符号整数">无符号整数</span></h2>
<p>K<sub>n</sub>K<sub>n-1</sub>…K<sub>2</sub>K<sub>1</sub>K<sub>0</sub></p>
<ul>
<li>没有符号位，默认为正号</li>
<li>最大值为：2<sup>n+1</sup>-1，最小值为0</li>
</ul>
<h3><span id="加法运算">加法运算</span></h3>
<blockquote>
<p>1+1 = 0001 + 0001 = 0010B = 2D</p>
</blockquote>
<h3><span id="减法运算">减法运算</span></h3>
<p>减法只考虑正数减正数：</p>
<ol>
<li>正数减负数、负数减正数本质上是加法，</li>
<li>负数减负数其实也就是正数减正数</li>
</ol>
<blockquote>
<p>2-1 = 0010 - 0001 = 0001 =1D</p>
</blockquote>
<p>实际上，早期的计算机中设有关于减法的相关电路，复杂的电路伴随着高昂的成本，因此如今的计算机逻辑运算单元中，只有加法器进行加法的运算，减法的运算也是通过加法器实现。那么如何通过加法运算实现减法呢？</p>
<h3><span id="钟表时针">钟表时针</span></h3>
<p>类似于钟表的时针：如果说现在时针现在停在10点钟，那么什么时候时针会停在8点钟呢？</p>
<p>时针倒拨2小时，或是正拨10小时，超过12小时后，时针将走第二圈，并最终停在8点钟</p>
<blockquote>
<p>10 - 2 = 8，10 + 10 = 20 = 12 + 8</p>
<p>即 (10 - 2) mod 12 = 8</p>
<p>​	(10 + 10) mod 12 = 8</p>
</blockquote>
<ul>
<li>
<p>mod就是<strong>取模运算</strong>，它们除以整数12，并计算最后的余数</p>
</li>
<li>
<p>8和20对于模12<strong>同余</strong>(有着相同的余数)，它们将共同停在余数8点钟</p>
</li>
</ul>
<h3><span id="取模运算">取模运算</span></h3>
<p>对整数a、b，取模运算就是a除以b，并计算余数（模余），记作</p>
<blockquote>
<p>a Mod b = a - [a/b]*b，[a/b]为向下取整</p>
</blockquote>
<p>如：20 Mod 12 = 20 - [20/12]*12 = 20 - 1*12 = 8</p>
<h3><span id="同余">同余</span></h3>
<p>两个整数a，b，若它们除以整数m所得的余数相等，则称a，b对于模m同余,记作</p>
<blockquote>
<p>a Mod r =  b Mod r =&gt; a ≡ b (mod m)</p>
<p>性质：<strong>a、b满足a-b为r的整数倍</strong></p>
</blockquote>
<h3><span id="思考">思考</span></h3>
<p>与钟表时针相比，计算机计数也有相似的地方：</p>
<table>
<thead>
<tr>
<th style="text-align:left">钟表时针</th>
<th style="text-align:left">计算机计数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">钟表时针取值只有[0-11]，超过12后会从0重新开始</td>
<td style="text-align:left">计算机作二进制表示的数位有限，超过一定数值也会重新开始计数</td>
</tr>
<tr>
<td style="text-align:left">将时针倒拨可以通过正拨等价实现</td>
<td style="text-align:left">计算机减法也可以使用加法等价实现</td>
</tr>
<tr>
<td style="text-align:left">(10-2) mod 12 = (10+10) mod 12</td>
<td style="text-align:left">(x - a) Mod r = (x + b) Mod r</td>
</tr>
<tr>
<td style="text-align:left">(10-2) ≡ (10+10) (mod 12)</td>
<td style="text-align:left">(x-a) ≡ (x+ b) (mod r)</td>
</tr>
</tbody>
</table>
<ul>
<li>x - a与x + b同余</li>
<li>根据<a href="#%E5%90%8C%E4%BD%99">同余的性质</a>，(x+ b) - (x-a) = r*Z，化简得 b = r*Z - a	（Z为整数、r为模）</li>
</ul>
<p>为了方便计算，可以只找离模最近的数，取Z = 1，即 b = r - a</p>
<p>也就是说，减法中减去a与加上 <strong>r - a</strong>等价，但r - a中仍存在减法，</p>
<p>这时需要利用计算机中的取反操作：</p>
<blockquote>
<p><strong>r  = a + ~a +1</strong>	（~为取反符号）</p>
</blockquote>
<p>二进制中任何一个数与它取反后的数相加，都会得到每个位为1的数，此时加上1就能得到该位下的模</p>
<blockquote>
<p>b = r - a = ~a +1</p>
</blockquote>
<p>x减去a 可以等价成 x 加上取反后的a加1，即</p>
<blockquote>
<p><strong>x - a = x + b =  x + ~a + 1</strong></p>
</blockquote>
<p>至此，减法运算可以仅通过加法、取反来实现</p>
<h2><span id="带符号整数">带符号整数</span></h2>
<h3><span id="原码">原码</span></h3>
<p>接着引入符号位的概念，最高位为符号位，正数为0，负数为1</p>
<p>符号位与真值的绝对值构成了原码</p>
<blockquote>
<p>[1]<sub>原</sub> = 0001	[-1]<sub>原</sub> = 1001</p>
</blockquote>
<p>8位的原码表示范围为：</p>
<blockquote>
<p>​	1111 1111 ~ 0111 1111</p>
<p>= -127 ~ 127</p>
</blockquote>
<h4><span id="原码的运算">原码的运算</span></h4>
<ul>
<li>原码中的符号位仅用来表示数的正、负，不参加运算，只有数值部分参与运算</li>
<li>原码运算时，先比较两个数的符号，若两个数的符号相同，则将两个数的相加，最后加上符号</li>
<li>若两数的符号不同，则需比较两数的数值大小，然后将数值较大的数减去数值较小的数，并将数值较大的数的符号作为最后结果的符号。</li>
</ul>
<h3><span id="补码">补码</span></h3>
<p>回顾<a href="#%E6%80%9D%E8%80%83">无符号整数的减法运算</a>，x减去a 可以等价成 x 加上取反后的a加1</p>
<h4><span id="补码引言">补码引言</span></h4>
<p>无符号4位2进制的模为2<sup>4</sup></p>
<blockquote>
<ol>
<li>被减数-减数 = 0：1 - 1 = 0001 + 1111 = 1)0000B = 0D</li>
<li>被减数-减数 &gt; 0：2 - 1 = 0010 + 1111 = 1)0001B = 1D</li>
<li>被减数-减数 &lt; 0：1 - 2 = 0001 + 1110 = 1111B = 15D(16 - 1)</li>
</ol>
</blockquote>
<p>结果都比原来多了2<sup>4</sup>,都多加了一个模</p>
<ol>
<li>对于被减数 - 减数 &gt;= 0，忽视溢出位，数值位等于实际值</li>
<li>对于被减数 - 减数 &lt; 0，还需减去一个模，a - r = a - (a + ~a + 1) = -(~a + 1)，数值位才等于实际值</li>
</ol>
<p>我们继续整合符号位，当符号位中0表示负号，1表示正号时，符号位参与运算后为1</p>
<ul>
<li>对于被减数 - 减数 &gt;= 0，溢出位参与符号位的运算恰好使得结果的符号为正</li>
<li>对于被减数 - 减数&lt; 0，符号位不变表示结果小于0，恰好表示了 -(~a + 1)中的负号</li>
<li>对于减数，将x - a = x+ b 看作 x -a = x + [-a]<sub>新的形式</sub>，- a = [-a]<sub>新的形式</sub></li>
</ul>
<h4><span id="小结">小结</span></h4>
<p>加上符号位的减法运算，我们可以总结出：</p>
<ol>
<li>减法变加法，减数看成负数，数值位为按位取反后加1，符号位为1</li>
<li>符号位应为数值位高一位，参与加法运算</li>
<li>结果如果符号位为0则不变，如果符号为1，符号位不变，作 取反加1 的变换</li>
</ol>
<p>至此，补码的定义逐渐清晰起来</p>
<h4><span id="定义">定义</span></h4>
<ul>
<li>补码的符号位为数值位高一位，0表示负，1表示正</li>
<li>正数的补码与原码一致，负数的补码符号位不变，数值位作 取反加1</li>
</ul>
<p>8位的补码表示范围为：</p>
<p>​	1111 1111 ~ 0111 1111，补码没有-0的结果，补码中的1000 0000表示-128</p>
<p>(-1) + (-127) = [1000 0001]<sub>原</sub> + [1111 1111]<sub>原</sub> = [1111 1111]<sub>补</sub> + [1000 0001]<sub>补</sub> = [1000 0000]<sub>补</sub> = -128D</p>
<p>表示范围：-128 ~ 127</p>
<h4><span id="补码的加法">补码的加法</span></h4>
<p>最低位开始，按位相加，并往高位进位（符号位参与运算）</p>
<h4><span id="补码的减法">补码的减法</span></h4>
<p>减法变加法，减数看成负数，被减数的补码加上减数的负数的补码，，减数符号位为1不变，数值位为按位取反后加1</p>
<p>有符号5位2进制的模为2<sup>5</sup>，第5位为符号位</p>
<blockquote>
<p><strong>[a]<sub>补</sub> - [b]<sub>补</sub> = [a]<sub>补</sub> + [-b]<sub>补</sub></strong></p>
</blockquote>
<ol>
<li>被减数-减数 = 0	[1]<sub>补</sub> - [1]<sub>补</sub> = [1]<sub>补</sub> + [-1]<sub>补</sub> = [<u>0</u>0001 + <u>1</u>1111]<sub>补</sub> = [<u>0</u>0000]<sub>补</sub> = 0D</li>
<li>被减数-减数 &gt; 0	[2]<sub>补</sub> - [1]<sub>补</sub> = [2]<sub>补</sub> + [-1]<sub>补</sub> = [<u>0</u>0010 + <u>1</u>1111]<sub>补</sub> = [<u>0</u>0001]<sub>补</sub> = 1D</li>
<li>被减数-减数 &lt; 0	[1]<sub>补</sub> - [2]<sub>补</sub> = [1]<sub>补</sub> + [-2]<sub>补</sub> = [<u>0</u>0001 + <u>1</u>1110]<sub>补</sub> = [<u>1</u>1111]<sub>补</sub>= -1D</li>
</ol>
<p>结果还是补码，计算机内，所有带符号整数的加减法都先转换为补码</p>
<h4><span id="补码lt-gt原码">补码&lt;-&gt;原码</span></h4>
<ol>
<li>
<p>在补码减法运算中，[a]<sub>补</sub> - [b]<sub>补</sub> = [a]<sub>补</sub> + [-b]<sub>补</sub>；根据原码、补码定义，[b]<sub>补</sub> = [b]<sub>原</sub>，-[b]<sub>原</sub> = [-b]<sub>原</sub>，</p>
<blockquote>
<p>[a]<sub>原</sub> + [-b]<sub>原</sub> = [a]<sub>原</sub> - [b]<sub>原</sub> =  [a]<sub>补</sub> - [b]<sub>补</sub> = [a]<sub>补</sub> + [-b]<sub>补</sub></p>
</blockquote>
</li>
</ol>
<p>也就是 [-b]<sub>原</sub>到 [-b]<sub>补</sub>的转换，[-b]<sub>原</sub>的符号位为1不变，数值位按位取反后加1</p>
<ol start="2">
<li>而被减数-减数 &lt; 0，结果为补码，要转换成原码，符号位为1不变，还需将数值位按位取反后加1</li>
</ol>
<p>总结：补码与原码之间的转换相同，正数不变，负数符号位为1不变，数值位按位取反后加1</p>
<h3><span id="反码">反码</span></h3>
<p>在使用补码作减法运算中，对于正数用不到按位取反的操作，而多次将负数的数值位按位取反再加一，将数值位按位取反也定义成新的形式，这个新的形式就是反码</p>
<h4><span id="定义">定义</span></h4>
<ul>
<li>反码的最高位为符号位，符号位为1为负数，符号位为0则为负数</li>
<li>正数的反码与原码相同，负数的反码符号位为1不变，数值位按位取反</li>
</ul>
<p>8位的反码表示范围为：</p>
<blockquote>
<p>​	1000 0000 ~ 0111 1111</p>
<p>= -127 ~ 127</p>
</blockquote>
<h4><span id="反码-gt-补码">反码 -&gt; 补码</span></h4>
<p>[X]<sub>补</sub> = [X]<sub>反</sub> + 1</p>
<h3><span id="移码">移码</span></h3>
<p>移码的符号位用“1”表示正数，用“0”表示负数，数值部分与补码相同。</p>
<p>常用于表示浮点数的阶码</p>
<h2><span id="总结">总结</span></h2>
<table>
<thead>
<tr>
<th>n + 1 bit</th>
<th>无符号整数</th>
<th>原码</th>
<th>反码</th>
<th>补码</th>
<th>移码</th>
</tr>
</thead>
<tbody>
<tr>
<td>表示范围</td>
<td>0 ~ 2<sup>n+1</sup>-1</td>
<td>-(2<sup>n</sup>-1) ~ 2<sup>n</sup>-1</td>
<td>-(2<sup>n</sup>-1) ~ 2<sup>n</sup>-1</td>
<td>-(2<sup>n</sup>) ~ 2<sup>n</sup>-1</td>
<td>-(2<sup>n</sup>) ~ 2<sup>n</sup>-1</td>
</tr>
<tr>
<td>最大值</td>
<td>11…11=2<sup>n+1</sup>-1</td>
<td>0,11…11 = 2<sup>n</sup>-1</td>
<td>0,11…11 = 2<sup>n</sup>-1</td>
<td>0,11…11=2<sup>n</sup>-1</td>
<td>1,11…11=2<sup>n</sup>-1</td>
</tr>
<tr>
<td>最小值</td>
<td>00…00 = 0</td>
<td>1,11…11 = -(2<sup>n</sup>-1)</td>
<td>1,00…00 = -(2<sup>n</sup>-1)</td>
<td>1,00…00=-(2<sup>n</sup>)</td>
<td>0,00…00=-(2<sup>n</sup>)</td>
</tr>
<tr>
<td>0的表示</td>
<td>00…00</td>
<td>[+0]<sub>原</sub>=0,00…00,[-0]<sub>原</sub>=1,00…00</td>
<td>[+0]<sub>反</sub>=0,00…00[-0]<sub>反</sub>=1,11…11</td>
<td>[0]<sub>补</sub>=0,00…00</td>
<td>[0]<sub>移</sub>=1,00…00</td>
</tr>
</tbody>
</table>
<p><img src="https://pic.imgdb.cn/item/63993b6ab1fccdcd36b1b146.png" alt="相互转换"></p>
<h1><span id="定点数的表示">定点数的表示</span></h1>
<p>定点数约定小数点的位置不变，定点纯整数约定了小数点在数值位的最后。定点纯小数约定了数值位的最高位在小数点后面。</p>
<h2><span id="定点小数的原码-反码表示">定点小数的原码、反码表示</span></h2>
<p>​	整数符号位后接，号，小数符号位接.号</p>
<h2><span id="定点小数的补码">定点小数的补码</span></h2>
<p>​	定点小数的补码加减法运算同带符号整数的补码加减法运算</p>
<h2><span id="位数扩展">位数扩展</span></h2>
<p>定点小数与定点整数做时，扩展位置不同</p>
<ul>
<li>定点小数右边扩展</li>
<li>定点整数在符号位后一位扩展</li>
</ul>
<h1><span id="浮点数的表示">浮点数的表示</span></h1>
<p>浮点数是与定点数相对的概念，定点数约定小数点的位置不变。</p>
<p>使用定点数表示时，当定点数占用的字长多而有效数字少时，就会造成存储空间的浪费；使用浮点数表示，合理改变小数点的位置，仅存储有效数字和2次幂信息，在位数有限的情况下，既扩大了数的表示范围，又保留了数的有效精度</p>
<h2><span id="浮点数的形式">浮点数的形式</span></h2>
<p>浮点数由尾数M和阶码E构成。基数为2的数F的浮点数表示为：</p>
<blockquote>
<p>F = M*2<sup>E</sup></p>
</blockquote>
<ul>
<li>尾数M存储有效数字，尾数反映数字的精度</li>
<li>阶码E存储2次幂信息，阶码反映表示范围，以及小数点的位置</li>
</ul>
<h3><span id="浮点数编码规则">浮点数编码规则</span></h3>
<table>
<thead>
<tr>
<th>阶符</th>
<th>阶码</th>
<th>数符</th>
<th>尾数</th>
</tr>
</thead>
<tbody>
<tr>
<td>1位</td>
<td>k位</td>
<td>1位</td>
<td>n位</td>
</tr>
<tr>
<td>阶码的正负</td>
<td>数值大小</td>
<td>浮点数的正负</td>
<td>数值精度</td>
</tr>
</tbody>
</table>
<ul>
<li>尾数M必须为<strong>小数</strong>，用n+1位有符号定点小数表示，可采用的原码，补码。</li>
<li>阶码E必须为<strong>整数</strong>，用k+1位有符号定点整数表示，可采用原码，补码，移码。</li>
<li>浮点数编码的位数m=(n+1)+(k+1)</li>
</ul>
<h2><span id="非规格化浮点数">非规格化浮点数</span></h2>
<p>当对尾数M只要求是小数而无其他限制时，此时的浮点数被称为非规格化浮点数。</p>
<p>假设阶码和尾数都用原码表示，则非规格化浮点数可表示的范围如下：</p>
<table>
<thead>
<tr>
<th>阶码和尾数</th>
<th>数值</th>
<th>阶码和尾数</th>
<th>数值</th>
</tr>
</thead>
<tbody>
<tr>
<td>阶码最小值</td>
<td>- (2<sup>k</sup>-1)</td>
<td>阶码最大值</td>
<td>2<sup>k</sup>-1</td>
</tr>
<tr>
<td>尾数最小负值</td>
<td>-(1- 2<sup>-n</sup>)</td>
<td>尾数最大负值</td>
<td>-2<sup>-n</sup></td>
</tr>
<tr>
<td>尾数最小正值</td>
<td>2<sup>-n</sup></td>
<td>尾数最大正值</td>
<td>1-2<sup>-n</sup></td>
</tr>
</tbody>
</table>
<p>以8位数值位，一位符号位的阶码为例子： 由于用原码表示，</p>
<p>阶码的最小值：1 11111111 即 -(2^8 - 1) = -255</p>
<p>阶码的最大值：0 0000000 即   2^8 - 1  =  255</p>
<p>尾数也是8位数值位，1为符号位原码的形式：</p>
<p>由于我们限定了浮点数的尾数只能是小数，所以我们当成定点纯小数的形式进行分析：</p>
<p>尾数的最小负值：1.11111111	即-(1- 2<sup>-8</sup>)</p>
<p>尾数的最大负值：1.0000001	即-2<sup>8</sup></p>
<p>尾数的最大正值：0.11111111	即1- 2<sup>-8</sup></p>
<p>尾数的最小正值	0.0000001	即2<sup>8</sup></p>
<h2><span id="规格化浮点数">规格化浮点数</span></h2>
<p>假如一个尾数M用原码表示为0.00000001，那么这8位尾数的前7位都是0，这7个0实际上是无效数值位，我们完全可以改写成：</p>
<blockquote>
<p>0.1XXXXXXX×2<sup>-7</sup></p>
</blockquote>
<p>当1左移到最高位时，尾数后面多出来了7位可以多表示7个有效位来提高精度</p>
<p>规格化浮点数，就是调整一个非规格化浮点数的位数和阶码的大小，使非零的浮点数在尾数的最高位上保证是一个有效值</p>
<p>规格化浮点数使尾数存储空间能表示更多的有效数位</p>
<h3><span id="规范">规范</span></h3>
<p>若尾数M用原码表示，</p>
<ul>
<li>
<p>当M ≥0时，[M]<sub>原</sub> = 0.1XXXXXXX</p>
</li>
<li>
<p>当M&lt; 0时，[M]<sub>原</sub> = 1.1XXXXXXX</p>
<p>若尾数M用补码表示，</p>
</li>
<li>
<p>当M ≥0时，[M] 补 = 0.1XXXXXXX</p>
</li>
<li>
<p>当M&lt; 0时，[M] 补 = 1.0XXXXXXX</p>
</li>
</ul>
<h3><span id="表示范围">表示范围</span></h3>
<p>尾数用原码表示，则规格化浮点数可表示的范围如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>数值</th>
<th></th>
<th>数值</th>
</tr>
</thead>
<tbody>
<tr>
<td>尾数最小负值</td>
<td>-(1-2<sup>n</sup>)</td>
<td>尾数最大负值</td>
<td>-1/2</td>
</tr>
<tr>
<td>尾数最小正值</td>
<td>1/2</td>
<td>尾数最大正值</td>
<td>1-2<sup>n</sup></td>
</tr>
</tbody>
</table>
<p>因此规格化浮点数将尾数M的绝对值限定在规定的数值范围之内，即</p>
<blockquote>
<p>1/2 ≤ ∣ M ∣ &lt; 1 （原码）</p>
</blockquote>
<p>要使尾数的绝对值在此范围内，通过改变小数点的位置（相应地改变阶码）就可以做到。</p>
<h3><span id="操作">操作</span></h3>
<table>
<thead>
<tr>
<th>非规格化浮点数</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>当运算结果最高位不是有效位时</td>
<td>尾数每左移一位，阶码减一</td>
</tr>
<tr>
<td>当运算结果的尾数的有效位进到小数点前面时</td>
<td>尾数每右移一位，阶码加一</td>
</tr>
</tbody>
</table>
<ul>
<li>判断浮点数是否规格化：尾数最高位是否是有效位</li>
<li>正数补码（原码）而言，有效位都为1；而对于负数补码而言，有效位为0，对于负数原码，有效位为1</li>
<li>特别地，补码表示中，-1/2（1.100000000）不是规格化形式，-1（1.00000000）是规格化形式；，注意不要与原码规格化判定的绝对值范围混淆</li>
</ul>
<h2><span id="ieee-754标准浮点数">IEEE 754标准浮点数</span></h2>
<h3><span id="单精度浮点数">单精度浮点数</span></h3>
<p>IEEE 754规定单精度浮点数的真值N一般表示为：</p>
<blockquote>
<p>N = (-1)<sup>S</sup> * 2<sup>e-127</sup> * 1.f</p>
</blockquote>
<table>
<thead>
<tr>
<th>数符S</th>
<th>阶码e</th>
<th>尾数f</th>
</tr>
</thead>
<tbody>
<tr>
<td>1位</td>
<td>8位</td>
<td>23位</td>
</tr>
<tr>
<td>浮点数的正负</td>
<td>含1位阶符，采用移码表示，偏移量127</td>
<td>浮点数的精度，采用原码表示</td>
</tr>
</tbody>
</table>
<ul>
<li>IEEE 754中的阶码采用移码来表示，但对于单精度浮点数来说，移码的偏移量不是2<sup>7</sup>而是2<sup>7</sup> − 1 = 127 ,这是因为IEEE 754将移码编码的全0和全1作为了特殊标识。</li>
<li>IEEE 754浮点数是规格化浮点数，为了能够更多地表示尾数的有效数位，规定尾数真值的整数部分必须为1，尾数编码时整数1隐去，小数部分f用原码表示。</li>
</ul>
<table>
<thead>
<tr>
<th>真值D</th>
<th>补码</th>
<th>移码</th>
<th>阶码真值</th>
</tr>
</thead>
<tbody>
<tr>
<td>-128</td>
<td>1000 0000</td>
<td>0000 0000</td>
<td>/</td>
</tr>
<tr>
<td>-127</td>
<td>1000 0001</td>
<td>0000 0001</td>
<td>1111 1110</td>
</tr>
<tr>
<td>-126</td>
<td>1000 0010</td>
<td>0000 0010</td>
<td></td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>-1</td>
<td>1111 1111</td>
<td>0111 1111</td>
<td>0000 0000</td>
</tr>
<tr>
<td>0</td>
<td>0000 0000</td>
<td>1000 0000</td>
<td>0000 0001</td>
</tr>
<tr>
<td>1</td>
<td>0000 0001</td>
<td>1000 0001</td>
<td></td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>125</td>
<td>0111 1101</td>
<td>1111 1101</td>
<td></td>
</tr>
<tr>
<td>126</td>
<td>0111 1110</td>
<td>1111 1110</td>
<td></td>
</tr>
<tr>
<td>127</td>
<td>0111 1111</td>
<td>1111 1111</td>
<td></td>
</tr>
</tbody>
</table>
<h4><span id="阶码e全0和全1时的特殊含义">阶码e全0和全1时的特殊含义</span></h4>
<ol>
<li>当阶码全0，且尾数f不全0时，表示该浮点数不是规格化浮点数，尾数实际为：0.XXXXXXXX 次正规数,而不是规定形式的：1.XXXXXXXX</li>
<li>当阶码e全1，且尾数f全为0时，则该浮点数表示正无穷大或负无穷大，当数符s为1时，表示负无穷大，当数符s为0时，表示正无穷大。</li>
<li>当阶码e全1，且尾数f不全为0时，则该浮点数表示非数值数据（NaN）。</li>
</ol>
<h4><span id="为什么ieee-754使用移码表示阶码e">为什么IEEE 754使用移码表示阶码e</span></h4>
<h5><span id="保证浮点数的机器零的阶码为全0">保证浮点数的机器零的阶码为全0</span></h5>
<p>机器零：机器数表示0的形式</p>
<p>​	IEEE 754标准下，浮点数尾数真值的整数部分隐藏了真值1，因此无法通过尾数全0来表示机器0；使用阶符表示机器0时，当阶码的真值趋向负无穷时，即指数趋于负无穷，此时浮点真值也趋于0，因此规定使用阶码中真值为负数且最小的数来表示机器0；假设使用8位补码来表示阶码，此时机器0表示为1000 0000B（-127D)，若使用8位移码，则使用 0000 0000 ；使用移码更直观，因此规定<strong>尾数、阶码同时全为0来表示机器0</strong>。（阶码全0，尾数不全0时，表示浮点数非规格化）</p>
<h5><span id="移码全部位于正轴上随真值增大而增大">移码全部位于正轴上，随真值增大而增大</span></h5>
<p>​	移码是对于某一个系列或集合的数使它们都映射到正数轴上去，即在数轴上把数都统一往右移动n位，使得所有的数都不为负数。IEEE 754标准下，移码E=e+偏移量，因此对于所有的E都有E大于等于0。由于移码都是从0开始的正数，所以即使是二进制的表示形式，也能直接<strong>比较阶码对应数值的大小</strong>(而补码之间的比较要观察符号位，同时转换成原码对数值位进行比较)。</p>
<h5><span id="移码也能减法变加法">移码也能减法变加法</span></h5>
<p>移码相对于补码仅符号位取反，进行减法运算时，也能加法变减法，只是符号位代表的含义不同，0表示负数，1表示正数，使用移码减法运算和补码减法运算得到的结果真值相同。</p>
<h5><span id="总结">总结</span></h5>
<p>对于单精度浮点数：<br>
(1)阶码的真值E=e-127，并且0&lt;e&lt;255，-126&lt;E&lt;127。</p>
<p>(2)当e=0或255时，在IEEE 754中表示特殊的数。</p>
<p>(3)所能表示的范围为：</p>
<ul>
<li>正数为：+2 <sup>+127</sup> ×(1+1−2 <sup>−23</sup> )到+2 <sup>−126</sup> ×(1+0)</li>
<li>负数为：−2 <sup>+127</sup> ×(1+1−2 <sup>−23</sup> )到−2 <sup>−126</sup> ×(1+0)</li>
</ul>
<h3><span id="双精度浮点数">双精度浮点数</span></h3>
<p>简要说明双精度浮点数（与单精度浮点数相类似）：</p>
<p>（1)阶码的真值E的取值范围为：-1022 ~ +1023,偏移量为+1023,阶码移码编码e为：<br>
+1 ~ + 2046</p>
<p>（2）双精度浮点数的规格化数表示为：N=(−1) s ×2 e−1023 ×1.f</p>
<p>（3）所能表示的规格化数范围：<br>
正数为：+2 +1023 ×(1+1−2 −52 )到+2 −1022 ×(1+0)</p>
<p>负数为：−2 +1023 ×(1+1−2 −52 )到−2 −1022 ×(1+0)</p>
<p>（4）当e=0或e=2047时，在IEEE 754标准中表示特殊的数</p>
<h3><span id="舍入模式">舍入模式</span></h3>
<p>我们在进行对阶或者右规格化的时候，阶数较小的操作数在进行右移的时候，会造成尾数部分的低位丢失，从而会造成误差。因此我们才需要根据需求，采取四种舍入模式中的一种对尾数进行舍入操作以减少误差。</p>
<p>二、IEEE754标准中的4种舍入模式<br>
1、就近舍入：</p>
<p>即十进制下的四舍五入。但是也会出现以下几种情况：</p>
<p>多余数字是1001，它大于0.5，故最低位进1。<br>
多余数字是0111，它小于0.5，则直接舍掉多余数字。<br>
多余数字是1000，正好是等于0.5的特殊情况；那么此时最低位为0则舍掉多余位，最低位为1则进位1。<br>
注意这里说明的数位都是指二进制数。因为这是尾数，所以在计算这些二进制和0.5的关系的时候，也即转为10进制的时候，我们用每一位的权重乘以2^(-i)然后求和即可。</p>
<p>2、朝0舍入：即朝数轴零点方向舍入，所以我们直接截尾即可。</p>
<p>3、朝正无穷舍入：对正数而言，多余位全为0则直接截尾，不全为0则向最低有效位进1；负数的话不管多余位是多少直接截尾即可。</p>
<p>4、朝负无穷舍入：对负数而言，多余位全为0则直接截尾，不全为0则向最低有效位进1；正数的话不管多余位是多少直接截尾即可。</p>
]]></content>
      <categories>
        <category>计算机组成与原理</category>
      </categories>
  </entry>
  <entry>
    <title>运算符</title>
    <url>/post/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h1><span id="引言">引言</span></h1>
<span id="more"></span>
<h1><span id="算数运算符">算数运算符</span></h1>
<h2><span id="加法-取正">+:	 加法 、取正</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>，b = <span class="number">2</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println(a + b + str);<span class="comment">//3hello</span></span><br><span class="line">System.out.println(str + a + b);<span class="comment">//hello12</span></span><br><span class="line">System.out.println(str + (a + b));<span class="comment">//hello3</span></span><br><span class="line">System.out.println(a + str + b);<span class="comment">//1hello2</span></span><br></pre></td></tr></table></figure>
<p>从左向右执行：</p>
<ul>
<li>符号两边有任意一边是字符串 做的是字符串拼接</li>
<li>符号两边都是数字 做的是加法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;<span class="comment">//48</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">System.out.println(x + y + c);<span class="comment">//52</span></span><br><span class="line">System.out.println(s + y + c);<span class="comment">//030</span></span><br><span class="line">System.out.println(y + c + s);<span class="comment">//510</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;*	*&quot;</span>);<span class="comment">//*	*</span></span><br><span class="line">System.out.println(<span class="string">&#x27;*&#x27;</span> + <span class="string">&#x27;\t&#x27;</span> + <span class="string">&#x27;*&#x27;</span>);<span class="comment">//数字</span></span><br><span class="line">System.out.println(<span class="string">&#x27;*&#x27;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&#x27;*&#x27;</span>);<span class="comment">//*	*</span></span><br><span class="line">System.out.println(<span class="string">&#x27;*&#x27;</span> + <span class="string">&#x27;\t&#x27;</span> + <span class="string">&quot;*&quot;</span>);<span class="comment">//数字*</span></span><br><span class="line">System.out.println(<span class="string">&#x27;*&#x27;</span> + (<span class="string">&#x27;\t&#x27;</span> + <span class="string">&quot;*&quot;</span>));<span class="comment">//*	*</span></span><br></pre></td></tr></table></figure>
<h2><span id="-减法-取负">-  :	减法 、 取负</span></h2>
<h2><span id="乘法">* :	乘法</span></h2>
<h2><span id="除法">\ :	除法</span></h2>
<p>​		<code>System.out.println(10/3*3);//9</code></p>
<h2><span id="取余">%：取余</span></h2>
<ul>
<li>
<p>任意数字和n取余结果是[0，n-1]</p>
</li>
<li>
<p>取余结果符号和被除数符号一致</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">System.out.println(a  + <span class="string">&quot; % &quot;</span> + b  + <span class="string">&quot; = &quot;</span> + (a % b));</span><br><span class="line">System.out.println(-a + <span class="string">&quot; % &quot;</span> + b  + <span class="string">&quot; = &quot;</span> + (-a % b));</span><br><span class="line">System.out.println(a  + <span class="string">&quot; % &quot;</span> + -b + <span class="string">&quot; = &quot;</span> + (a % -b));</span><br><span class="line">System.out.println(-a + <span class="string">&quot; % &quot;</span> + -b + <span class="string">&quot; = &quot;</span> + (-a % -b));</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	随意给出一个整数，打印显示它的个位数，十位数，百</span></span><br><span class="line"><span class="comment">	位数的值，例如:数字345的情况如下：</span></span><br><span class="line"><span class="comment">	个位数：5 十位数：4 百位数：3</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">345</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;个位数:&quot;</span> + number%<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;十位数:&quot;</span> + number/<span class="number">10</span>%<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;百位数:&quot;</span> + number/<span class="number">100</span>);<span class="comment">//number/10/10</span></span><br></pre></td></tr></table></figure>
<h2><span id="前-后-前-后">前++ 、 后++、前–、后–</span></h2>
<h3><span id>++</span></h3>
<ul>
<li>同:运算结果相同 都是减1</li>
<li>异:前++：先加1 再赋值     后++：先赋值 再加1</li>
</ul>
<h2><span id>–</span></h2>
<ul>
<li>同:运算结果相同 都是减1</li>
<li>异:前–：先减1 再赋值     后–：先赋值 再减</li>
<li>++ – 不改变自身数据类型 所以 byte b = 3 ;b++;不报错，区别于<a href="../%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型中的常数赋值</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">//b = b + 1;//报错</span></span><br><span class="line">b++;<span class="comment">//++b  === (byte)(b + 1)</span></span><br></pre></td></tr></table></figure>
<h1><span id="赋值运算符">赋值运算符</span></h1>
<h2><span id="基本运算符">基本运算符： =</span></h2>
<h2><span id="扩展运算符-">扩展运算符： += -= *= /= %=</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给一个数加1 有几种方式</span></span><br><span class="line">i = i + <span class="number">1</span>;<span class="comment">//方式1</span></span><br><span class="line">i++;<span class="comment">//++i; 方式2</span></span><br><span class="line">i += <span class="number">1</span>;<span class="comment">//方式3</span></span><br></pre></td></tr></table></figure>
<ul>
<li>不改变自身数据类型 byte b = 5; b += 1; 不报错</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">//b = b + 1; //报错</span></span><br><span class="line">b += <span class="number">1</span>;	<span class="comment">//不报错 b = (byte)(b + 1)	底层发生了强制转换类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">ii</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">ii *= <span class="number">0.1</span>;<span class="comment">//不报错 ii = (int)(ii * 0.1) </span></span><br></pre></td></tr></table></figure>
<h1><span id="关系运算符">关系运算符</span></h1>
<h1><span id="逻辑运算符">逻辑运算符</span></h1>
<p>操作数是boolean 运算结果也是boolean类型</p>
<h2><span id="逻辑与-短路与">逻辑与、短路与</span></h2>
<ul>
<li>有一假结果是假</li>
<li>同:运算结果相同</li>
<li>当运算符左侧是false,&amp;右侧继续运算 &amp;&amp; 发生短路 右侧不运算</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&amp; 和 &amp;&amp;短路与的区别</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="comment">//boolean result = sex == &#x27;女&#x27; &amp; age++ == 10;	//age = 11</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> sex == <span class="string">&#x27;女&#x27;</span> &amp;&amp; age++ == <span class="number">10</span>;		<span class="comment">//age = 10</span></span><br></pre></td></tr></table></figure>
<h2><span id="逻辑或-短路或">逻辑或、短路或</span></h2>
<ul>
<li>有一真结果为真</li>
<li>运算结果相同</li>
<li>当运算符左侧是true,|右侧继续运算 || 发生短路 右侧不运算</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//| 和 || 的区别</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="comment">//boolean result = sex == &#x27;男&#x27; | age++ == 10;	//age = 11</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> sex == <span class="string">&#x27;男&#x27;</span> || age++ == <span class="number">10</span>;		<span class="comment">//age = 10</span></span><br></pre></td></tr></table></figure>
<h2><span id="逻辑非">逻辑非</span></h2>
<ul>
<li>！取反</li>
</ul>
<h2><span id="逻辑异或">逻辑异或</span></h2>
<ul>
<li>^ :相同为假 不同为真</li>
</ul>
<h1><span id="位运算符">位运算符</span></h1>
<p>操作的是数值,得到数值的补码然后进行位运算</p>
<h2><span id="移位运算一元运算符">移位运算(一元运算符)</span></h2>
<h3><span id="左移-ltlt">左移 &lt;&lt;</span></h3>
<p>每移动一位相当于* 2 空位补0</p>
<h3><span id="右移-gtgt">右移 &gt;&gt;</span></h3>
<p>每移动一位相当于/ 2 最高位是0就补0 是1就补1</p>
<h3><span id="无符号右移-gtgtgt">无符号右移 &gt;&gt;&gt;</span></h3>
<p>每移动一位相当于/ 2 最高位补0</p>
<h2><span id="逻辑运算二元运算符">逻辑运算(二元运算符)</span></h2>
<p>每一位上如果是1 看做true 如果是0 看做false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<h3><span id="逻辑与-amp">逻辑与 &amp;</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> x &amp; y;<span class="comment">//4</span></span><br><span class="line"><span class="comment">//00000000 00000000 00000000 00001100 12</span></span><br><span class="line"><span class="comment">//00000000 00000000 00000000 00000101 5</span></span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="comment">//00000000 00000000 00000000 00000100 4</span></span><br></pre></td></tr></table></figure>
<h3><span id="逻辑或">逻辑或 |</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">result = x | y;<span class="comment">//13</span></span><br><span class="line"><span class="comment">//00000000 00000000 00000000 00001100 12</span></span><br><span class="line"><span class="comment">//00000000 00000000 00000000 00000101 5</span></span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="comment">//00000000 00000000 00000000 00001101 13</span></span><br></pre></td></tr></table></figure>
<h3><span id="逻辑非-~">逻辑非 ~</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">result = ~x;<span class="comment">//-13</span></span><br><span class="line"><span class="comment">//00000000 00000000 00000000 00001100 12</span></span><br><span class="line"><span class="comment">//--------------------------------------</span></span><br><span class="line"><span class="comment">//11111111 11111111 11111111 11110011 补码</span></span><br><span class="line"><span class="comment">//11111111 11111111 11111111 11110010 反码	补码减去1得到反码</span></span><br><span class="line"><span class="comment">//10000000 00000000 00000000 00001101 源码 	符号位不变其他位取反得到源码	- 13</span></span><br></pre></td></tr></table></figure>
<h3><span id="逻辑异或">逻辑异或 ^</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">result = x ^ y;<span class="comment">//9</span></span><br><span class="line"><span class="comment">//00000000 00000000 00000000 00001100 12</span></span><br><span class="line"><span class="comment">//00000000 00000000 00000000 00000101 5</span></span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="comment">//00000000 00000000 00000000 00001001 9</span></span><br></pre></td></tr></table></figure>
<ul>
<li>m = (m^^<sup>n)</sup>^^n</li>
</ul>
<h3><span id="3种变量交换">3种变量交换</span></h3>
<h4><span id="临时变量">临时变量</span></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br></pre></td></tr></table></figure>
<h4><span id="累加消除">累加消除</span></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b = a + b;</span><br><span class="line">a = b - a;</span><br><span class="line">b = b - a;</span><br></pre></td></tr></table></figure>
<ol>
<li>少定义一个变量</li>
<li>有局限，可能超过int类型</li>
</ol>
<h4><span id="异或消除">异或消除</span></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br></pre></td></tr></table></figure>
<ol>
<li>少定义一个变量</li>
<li>没有局限</li>
<li>m = (m^^<sup>n)</sup>^^n</li>
</ol>
<h1><span id="三元运算符">三元运算符</span></h1>
<ul>
<li>
<p>boolean表达式 ? 表达式1 : 表达式2</p>
</li>
<li>
<p>boolean表达式返回true  表达式1的结果作为整个表达式的结果</p>
</li>
<li>
<p>boolean表达式返回false 表达式2的结果作为整个表达式的结果</p>
</li>
</ul>
<p>注意:</p>
<ol>
<li>表达式1 和 表达式2 结果类型必须保持一致</li>
<li>表达式结果会发生自动类型转换，转换成范围大的数据类型</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">isAdult</span> <span class="operator">=</span> age &gt;= <span class="number">18</span> ? <span class="string">&quot;已成年&quot;</span> : <span class="number">1.0</span>;<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">true</span> ? <span class="number">1</span> : <span class="number">1.0</span>;	<span class="comment">//不报错 发生自动类型转换 1.0</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="literal">true</span> ? <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>) : <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.0</span>);<span class="comment">//发生自动类型转换</span></span><br><span class="line">System.out.println(o1);<span class="comment">//1.0</span></span><br><span class="line">Object o2;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)</span><br><span class="line">    o2 = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    o2 = <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.0</span>);</span><br><span class="line">System.out.println(o2);<span class="comment">//1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
  </entry>
  <entry>
    <title>集合</title>
    <url>/post/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<span id="more"></span>
<!-- toc -->
<ul>
<li><a href="#%E9%9B%86%E5%90%88%E5%92%8C%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB">集合和数组的区别</a></li>
<li><a href="#%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6">集合框架</a>
<ul>
<li><a href="#%E9%9B%86%E5%90%88%E7%B1%BB%E5%9B%BE">集合类图</a></li>
<li><a href="#collection%E6%96%B9%E6%B3%95">Collection方法</a></li>
<li><a href="#%E5%AD%90%E6%8E%A5%E5%8F%A3%E7%89%B9%E7%82%B9">子接口特点</a></li>
</ul>
</li>
<li><a href="#arraylist%E9%9B%86%E5%90%88">ArrayList集合</a>
<ul>
<li><a href="#%E7%89%B9%E7%82%B9">特点</a></li>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96">初始化</a></li>
<li><a href="#%E6%96%B9%E6%B3%95">方法</a>
<ul>
<li><a href="#%E6%B3%A8%E6%84%8F">注意</a></li>
</ul>
</li>
<li><a href="#%E9%81%8D%E5%8E%86%E5%85%83%E7%B4%A0">遍历元素</a></li>
<li><a href="#%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0">底层实现</a>
<ul>
<li><a href="#%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0%E8%BF%87%E7%A8%8B">添加元素过程</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%E8%BF%87%E7%A8%8B">删除元素过程</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#linkedlist">LinkedList</a>
<ul>
<li><a href="#linkedlist-%E4%B8%8E-arraylist">LinkedList 与 ArrayList</a></li>
</ul>
</li>
<li><a href="#%E8%BF%AD%E4%BB%A3%E5%99%A8">迭代器</a>
<ul>
<li><a href="#%E9%81%8D%E5%8E%86%E5%8E%9F%E7%90%86">遍历原理</a></li>
<li><a href="#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%88%A0%E9%99%A4%E6%96%B9%E6%B3%95">迭代器删除方法</a>
<ul>
<li><a href="#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%88%A0%E9%99%A4%E5%8E%9F%E7%90%86">迭代器删除原理</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#hashset">HashSet</a>
<ul>
<li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li>
<li><a href="#%E7%89%B9%E7%82%B9-1">特点</a></li>
<li><a href="#%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0%E8%BF%87%E7%A8%8B-1">添加元素过程</a></li>
<li><a href="#%E5%88%A4%E9%87%8D">判重</a></li>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96-1">初始化</a></li>
<li><a href="#%E6%96%B9%E6%B3%95-1">方法</a></li>
<li><a href="#%E9%81%8D%E5%8E%86%E5%85%83%E7%B4%A0-1">遍历元素</a>
<ul>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8eclipseidea%E5%A4%8D%E5%86%99hashcode%E6%96%B9%E6%B3%95%E6%9C%8931%E8%BF%99%E4%B8%AA%E6%95%B0%E5%AD%97">为什么用Eclipse/IDEA复写hashCode方法，有31这个数字？</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#treeset">TreeSet</a>
<ul>
<li><a href="#%E6%A6%82%E8%BF%B0-1">概述</a></li>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96-2">初始化</a></li>
<li><a href="#%E6%96%B9%E6%B3%95-2">方法</a></li>
<li><a href="#%E9%81%8D%E5%8E%86%E5%85%83%E7%B4%A0-2">遍历元素</a></li>
<li><a href="#%E7%89%B9%E7%82%B9-2">特点</a></li>
<li><a href="#%E6%AF%94%E8%BE%83%E5%99%A8">比较器</a>
<ul>
<li><a href="#%E5%86%85%E9%83%A8%E6%AF%94%E8%BE%83%E5%99%A8">内部比较器</a></li>
<li><a href="#%E5%A4%96%E9%83%A8%E6%AF%94%E8%BE%83%E5%99%A8">外部比较器</a></li>
</ul>
</li>
<li><a href="#treeset%E5%8E%BB%E9%87%8D">TreeSet去重</a></li>
<li><a href="#%E7%89%B9%E7%82%B9-3">特点</a></li>
</ul>
</li>
<li><a href="#%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98">排序问题</a>
<ul>
<li><a href="#treeset%E6%8E%92%E5%BA%8F%E4%BD%86%E4%B8%8D%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D">TreeSet排序但不去除重复</a></li>
<li><a href="#arraylist%E7%BB%93%E5%90%88collections%E6%96%B9%E6%A1%88%E6%8E%92%E5%BA%8F%E4%BD%86%E4%B8%8D%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D">ArrayList结合Collections方案排序但不去除重复</a></li>
<li><a href="#collections%E5%B7%A5%E5%85%B7%E7%B1%BB">Collections工具类</a>
<ul>
<li><a href="#sort%E6%96%B9%E6%B3%95">sort()方法</a></li>
<li><a href="#arrayssort">Arrays.sort()</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#map%E6%8E%A5%E5%8F%A3%E9%94%AEkey%E5%80%BCvalue%E5%AF%B9">Map接口【键（key）值(value)对】</a>
<ul>
<li><a href="#map%E6%8E%A5%E5%8F%A3%E7%BB%93%E6%9E%84">Map接口结构</a></li>
<li><a href="#%E9%94%AE%E5%80%BC%E5%AF%B9%E7%9A%84%E7%BB%93%E6%9E%84">键值对的结构</a></li>
<li><a href="#hashset%E5%92%8Ctreeset%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88">HashSet和TreeSet实现方案</a></li>
</ul>
</li>
<li><a href="#hashmap">HashMap</a>
<ul>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96-3">初始化</a></li>
<li><a href="#%E6%96%B9%E6%B3%95-3">方法</a></li>
<li><a href="#%E9%81%8D%E5%8E%86">遍历</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">基本数据结构</a></li>
<li><a href="#key%E7%9A%84%E8%AE%BE%E8%AE%A1">key的设计</a></li>
<li><a href="#%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86">执行原理</a>
<ul>
<li><a href="#%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0%E8%BF%87%E7%A8%8B-2">添加元素过程</a></li>
<li><a href="#%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E5%A4%A7%E5%B0%8F">调整数组大小</a></li>
<li><a href="#%E6%9E%84%E9%80%A0%E6%97%B6%E5%88%9D%E5%A7%8B%E5%8C%96threshold">构造时初始化threshold</a></li>
<li><a href="#%E7%B4%A2%E5%BC%95%E8%AE%A1%E7%AE%97">索引计算</a></li>
<li><a href="#%E5%93%88%E5%B8%8C%E7%A2%B0%E6%92%9E">哈希碰撞</a></li>
<li><a href="#%E5%88%A4%E9%87%8D-1">判重</a></li>
<li><a href="#%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E7%9A%84%E5%A4%84%E7%90%86">重复元素的处理</a></li>
<li><a href="#%E6%A0%91%E5%8C%96">树化</a></li>
<li><a href="#%E9%93%BE%E5%8C%96">链化</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%E8%BF%87%E7%A8%8B-1">删除元素过程</a></li>
</ul>
</li>
<li><a href="#%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98">并发问题</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h1><span id="集合和数组的区别">集合和数组的区别</span></h1>
<ol>
<li>数组的长度是固定的，集合的长度无限制</li>
<li>数组里面的每个元素都必须是相同类型，集合里面的元素可以是任意类型</li>
<li>集合里面的元素往往在很多时候是需要统一的，集合采用了泛型的方法来统一元素类型</li>
<li>数组拥有固定的算法，集合有很多种类，已经实现了各种算法</li>
</ol>
<h1><span id="集合框架">集合框架</span></h1>
<p>集合所在的包java.util</p>
<h2><span id="集合类图">集合类图</span></h2>
<img src="https://pic.imgdb.cn/item/63bb70bbbe43e0d30e6e3441.jpg" alt="image-20230105103228912" style="zoom: 50%;">
<ol>
<li>集合的元素长度无需固定，属于动态增长和缩小</li>
<li>集合的元素类型可以是任意，也可以用泛型统一。在 Java5 之前,Java 集合会丢失容器中所有对象的数据类型,把所有对象都当成 Object 类型处理；从 JDK 5.0 增加了泛型以后,Java集合可以记住容器中对象的数据类型</li>
<li>遍历的时候无法删除元素【遍历的时候不能改变集合的长度，删除和修改都会报错】</li>
</ol>
<h2><span id="collection方法">Collection方法</span></h2>
<table>
<thead>
<tr>
<th>Collection</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>返回集合元素个数</td>
<td>int size()</td>
</tr>
<tr>
<td>清空集合</td>
<td>void clear()</td>
</tr>
<tr>
<td>是否是空集合</td>
<td>boolean isEmpty()</td>
</tr>
<tr>
<td>是否包含指定集合中的所有元素</td>
<td>boolean containsAll(Collection c)（调用元素的equals方法比较）</td>
</tr>
<tr>
<td>删除指定集合中的元素（差集）</td>
<td>boolean removeAll(Collection coll)</td>
</tr>
<tr>
<td>保留指定集合中的元素（交集）</td>
<td>boolean retainAll(Collection c)</td>
</tr>
<tr>
<td>集合是否相等</td>
<td>boolean eqauls(Object o)</td>
</tr>
<tr>
<td>转成对象数组</td>
<td>Object[] toArray()</td>
</tr>
<tr>
<td>返回迭代器对象</td>
<td>iterator()</td>
</tr>
</tbody>
</table>
<h2><span id="子接口特点">子接口特点</span></h2>
<table>
<thead>
<tr>
<th></th>
<th>List</th>
<th>Set</th>
</tr>
</thead>
<tbody>
<tr>
<td>顺序</td>
<td>插入顺序</td>
<td>值顺序</td>
</tr>
<tr>
<td>重复</td>
<td>元素可以重复</td>
<td>不支持重复</td>
</tr>
<tr>
<td>下标</td>
<td>有下标</td>
<td>无下标</td>
</tr>
</tbody>
</table>
<h1><span id="arraylist集合">ArrayList集合</span></h1>
<h2><span id="特点">特点</span></h2>
<ul>
<li>自然顺序</li>
<li>有下标</li>
<li>可以重复（地址一样）</li>
</ul>
<h2><span id="初始化">初始化</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用泛型规定集合里面的元素统一数据类型</span></span><br><span class="line">ArrayList&lt;String&gt; arrayList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>
<h2><span id="方法">方法</span></h2>
<table>
<thead>
<tr>
<th>ArrayList</th>
<th>方法</th>
<th>返回类型</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>直接添加元素</td>
<td>add(E e)</td>
<td>boolean</td>
<td>添加成功返回true，失败返回false</td>
</tr>
<tr>
<td>根据下标添加元素</td>
<td>add(int index,E e)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>添加集合元素</td>
<td>addAll(Collection&lt;? extends E&gt; c)</td>
<td>boolean</td>
<td>添加元素个数为0返回false，否则返回true</td>
</tr>
<tr>
<td>根据下标添加集合元素</td>
<td>addAll(int index,Collection&lt;? extends E&gt; c)</td>
<td>boolean</td>
<td>添加元素个数为0返回false，否则返回true</td>
</tr>
<tr>
<td>直接删除元素</td>
<td>remove(E e)</td>
<td>boolean</td>
<td>删除成功返回true，失败返回false</td>
</tr>
<tr>
<td>根据下标删除元素</td>
<td>remove(int index)</td>
<td>Object</td>
<td>返回被删除的元素</td>
</tr>
<tr>
<td>根据下标修改元素</td>
<td>set(int index, E e)</td>
<td>Object</td>
<td>返回被修改元素</td>
</tr>
<tr>
<td>根据下标查找元素</td>
<td>get(int index)</td>
<td>Object</td>
<td>下标不存在，或超标，返回异常</td>
</tr>
<tr>
<td>查找是否包含某个元素</td>
<td>contains(E e)</td>
<td>boolean</td>
<td>包含返回true，不包含返回false</td>
</tr>
<tr>
<td>查找是否包含某个元素</td>
<td>indexOf(E e)</td>
<td>int</td>
<td>包含返回该元素的下标，不包含则返回-1</td>
</tr>
</tbody>
</table>
<h3><span id="注意">注意</span></h3>
<ul>
<li>
<p><strong>使用remove方法删除int类型值时，会优先将int值看作index参数</strong>，即调用remove(int index)根据下标删除元素方法。若需要删除int型元素，还需将int值装箱成Integer类型<code>arrayList.remove(Integer.valueOf(1));</code></p>
</li>
<li>
<p><strong>遍历的时候无法直接删除元素</strong>【遍历的时候不能改变集合的长度，删除和修改都会报错】，如需便利时删除，可使用<strong>迭代器的删除方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;String&gt; iterator = arrayList.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (next.equals(<span class="string">&quot;hzj4&quot;</span>)) &#123;</span><br><span class="line">        System.out.println(next);</span><br><span class="line">        iterator.remove(); 		<span class="comment">//迭代器遍历删除方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>remove(Object o)方法通过equals(o)方法找到第一个元素并删除</strong>，若想将equal(o)的所有元素删除</p>
<p><code> while (arrayList.remove(Object o));</code></p>
</li>
</ul>
<h2><span id="遍历元素">遍历元素</span></h2>
<ul>
<li>迭代器迭代元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;String&gt; iterator = arrayList.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>利用下标遍历</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayList.size(); i++) &#123;</span><br><span class="line">    System.out.println(arrayList.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>利用foreach遍历</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : arrayList) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="底层实现">底层实现</span></h2>
<ol>
<li>
<p>ArrayList底层实现是数组</p>
</li>
<li>
<p>使用空构造器初始化时，数组长度为0</p>
</li>
<li>
<p>使用带参构造器初始化时</p>
<p><code>ArrayList&lt;String&gt; temp=new ArrayList&lt;&gt;(50);//初始化底层数组容量是50</code></p>
<p><code>public ArrayList(Collection&lt;? extends E&gt; c) 会使用 c 的大小作为数组容量</code></p>
</li>
</ol>
<h3><span id="添加元素过程">添加元素过程</span></h3>
<h4><span id="add">add</span></h4>
<ol>
<li>
<p>假设使用空构造初始化，数组长度为0，此时往ArrayList集合中添加元素：</p>
</li>
<li>
<p><strong>数组长度将扩容至10</strong>，并往数组中逐个添加元素</p>
</li>
<li>
<p>当数组存储元素个数已满（再添加元素将超过数组长度）时，<strong>数组长度将扩容至原数组的1.5倍  （向上取整）</strong>，再往集合中逐个添加元素</p>
</li>
<li>
<p>当数组扩容1.5倍后长度超过数组最大长度时，扩容至数组最大值</p>
<p>（MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8）部分JVM在数组中保留一些字头信息</p>
<ol>
<li>即使扩容至数组最大值，也无法再添加元素（再添加将超过数组长度），扩容至int最大值</li>
<li>即使扩容至int最大值，也无法再添加元素（再添加将溢出int类型），产生OutOfMemoryError()异常</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;	<span class="comment">//空数组添加扩容至10</span></span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    modCount++;								<span class="comment">//修改次数，添加、删除时加1</span></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)	<span class="comment">//当前数组长度小于添加元素后的长度，意味着旧数组需要扩容</span></span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);	<span class="comment">//扩容后新数组长度为旧数组长度的一半</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)		<span class="comment">//addAll可能调用</span></span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)	<span class="comment">//0x7fffffff-8</span></span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);<span class="comment">//扩容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">    MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="addall">addAll</span></h4>
<ol>
<li>将要添加的集合转换成数组</li>
<li>被添加的数组加上转换后的数组元素
<ol>
<li>被添加的数组没有元素时 扩容为Math.max(10, 实际元素个数)</li>
<li>被添加的数组中有元素时 扩容为Math.max(原容量 1.5 倍, 实际元素个数)</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  <span class="comment">// 增加修改次数</span></span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);	<span class="comment">//被添加的数组加上转换后的数组元素</span></span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="删除元素过程">删除元素过程</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size)		<span class="comment">//删除索引不存在</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);		<span class="comment">//获取要删除的值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;		<span class="comment">//移动次数</span></span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>删除索引不超过数组非空元素的长度</li>
<li>删除该索引下的值，并将之后的元素都前移一次，最后一个元素置空（底层C语言实现）</li>
</ol>
<h4><span id="缩容">缩容</span></h4>
<ul>
<li>删除元素的时底层数组不会缩放，需要手动调用trimToSize()缩小底层数组长度（缩放到当前元素大小的长度）</li>
<li>删除元素的时候都会将被删除元素以后的所有元素前移，原来的下标指向的元素会改变，因此不能在遍历的时候删除，需要使用迭代器删除</li>
</ul>
<h1><span id="linkedlist">LinkedList</span></h1>
<h2><span id="linkedlist-与-arraylist">LinkedList 与 ArrayList</span></h2>
<table>
<thead>
<tr>
<th>LinkedList</th>
<th>ArrayList</th>
</tr>
</thead>
<tbody>
<tr>
<td>基于双向链表，无需连续内存</td>
<td>基于数组，需连续内存</td>
</tr>
<tr>
<td>随机访问慢（要沿着链表遍历）</td>
<td>随机访问快（指根据下标访问）</td>
</tr>
<tr>
<td>头尾插入删除性能高</td>
<td>尾部插入、删除性能高，其它部分插入、删除都会移动数据，因此性能会低</td>
</tr>
<tr>
<td>占用内存多</td>
<td>可利用 cpu 缓存，局部性原理</td>
</tr>
</tbody>
</table>
<h1><span id="迭代器">迭代器</span></h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; iterator = i.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;		<span class="comment">//遍历所有非空元素</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    iterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="遍历原理">遍历原理</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> cursor;       <span class="comment">// 游标,指向迭代当前元素的游标，在获取完当前元素后指向下一个元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// 指向上一个元素的下标，没有元素为-1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;	<span class="comment">//期望修改的次数，modCount记录当前集合中的增加或删除次数</span></span><br></pre></td></tr></table></figure>
<ol>
<li>遍历所有非空元素</li>
<li>检查迭代期间的修改次数、游标是否超过数组非空元素、是否超过数组长度</li>
<li>获取当前游标指向的元素，并让游标指向下一个元素</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cursor != size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= size)			<span class="comment">//游标已经超过了数组中非空数据元素的下标</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">    Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;<span class="comment">//获取当前数组</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= elementData.length)	<span class="comment">//游标超过了数组长度</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    cursor = i + <span class="number">1</span>;<span class="comment">//游标指向下一个</span></span><br><span class="line">    <span class="keyword">return</span> (E) elementData[lastRet = i];	<span class="comment">//lastRet就指向当前对象，返回当前元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)	<span class="comment">//是否使用了集合的增加或删除方法</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>迭代器遍历时，为什么不能使用集合的增加或删除方法</p>
<p>在迭代器迭代过程中，游标会逐个指向下个元素的下标，当使用集合的增加或删除方法时，可能改变元素在数组中的存储位置，即下标指向的元素可能不是修改前所指向的元素，因此无法按照原顺序遍历元素</p>
<h2><span id="迭代器删除方法">迭代器删除方法</span></h2>
<p>迭代器删除方法调用集合的删除方法来删除lastRet指向的旧元素的位置，并将cursor退回到lastRet的位置实现遍历删除</p>
<h3><span id="迭代器删除原理">迭代器删除原理</span></h3>
<ol>
<li>至少遍历过一次且未连续使用迭代器删除</li>
<li>检查迭代期间是否修改</li>
<li>调用集合删除方法删除，游标回到原来位置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)	<span class="comment">//还没开始遍历，或一次迭代中重复使用迭代器删除方法</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">    checkForComodification();	<span class="comment">//修改次数与预期不符合，迭代期间进行了增加或删除操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList.<span class="built_in">this</span>.remove(lastRet);</span><br><span class="line">        cursor = lastRet;			<span class="comment">//游标回到原来位置</span></span><br><span class="line">        lastRet = -<span class="number">1</span>;				<span class="comment">//设置lastRet为初始值，避免在一次迭代中重复使用迭代器删除方法</span></span><br><span class="line">        expectedModCount = modCount;		<span class="comment">//更新expectedModCount值</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="hashset">HashSet</span></h1>
<h2><span id="概述">概述</span></h2>
<ol>
<li>HashSet是Set接口的典型实现，元素可以是null</li>
<li>HashSet按Hash算法来存储集合中的元素</li>
<li>底层是数组，初始容量为16，当如果使用率超过0.75，（即超过16*0.75=12）就会扩大容量为原来的2倍</li>
</ol>
<h2><span id="特点">特点</span></h2>
<ul>
<li>由哈希值以及数组长度来决定在数组中的存储位置
<ol>
<li>元素没有明确的排列顺序（遍历输出无序）</li>
<li>不支持重复的元素</li>
<li>没有下标</li>
</ol>
</li>
</ul>
<h2><span id="添加元素过程">添加元素过程</span></h2>
<img src="https://pic.imgdb.cn/item/63bbba7dbe43e0d30ef34746.jpg" style="zoom:80%;">
<ol>
<li>
<p>当向HashSet 集合中添加一个元素时，会调用该对象的 hashCode() 方法获得该对象的hashCode值</p>
</li>
<li>
<p>然后根据hashCode值，通过某种散列函数决定该对象在HashSet底层数组中的存储位置</p>
<blockquote>
<p>该散列函数根据hashCode值与底层数组的长度相计算，得到在数组中的下标，该函数计算将尽可能均匀存储元素，即越是散列分布，代表该散列函数设计的越好</p>
</blockquote>
</li>
<li>
<p>若要添加元素的hashCode与集合中某个元素的hashCode值相等（即存储位置一致），会再调用equals方法判断两元素是否相等</p>
</li>
<li>
<p>若equals方法判断两元素相等，则添加元素重复，添加失败；若不相等，由于原数组位置上已经有元素(哈希冲突)，则将新添加元素通过链表的方式连接到数组同一位置上</p>
</li>
<li>
<p>若要添加元素与集合中某个元素的hashCode值不相等，无论两元素equals方法判断是否相等，都会把它们存储在不同的位置，即添加成功。</p>
</li>
</ol>
<h2><span id="判重">判重</span></h2>
<ul>
<li>
<p>HashSet判断两个元素相等规则：<strong>hashCode() 相等 &amp;&amp; equals相等</strong></p>
<ol>
<li>
<p>先判断hashCode是否相等，若hashCode不相等直接判断不重复，若hashCode相等还要看equals是否相等</p>
</li>
<li>
<p>若equals不相等，则判断不重复，若equals相等，则判断重复</p>
<p><a href="../Object%E7%B1%BB">hashCode、equals方法</a></p>
</li>
</ol>
</li>
<li>
<p>往HashSet添加的重复数据会被丢弃</p>
</li>
<li>
<p>相等的对象必须具有相等的散列码，对于引用型对象，需重写equals()和hashCode()方法，以实现对象相等规则</p>
<ul>
<li>对象中用作equals()方法比较的Field，都应该用来计算hashCode值</li>
<li>equals()方法比较返回true时，hashCode()方法的返回值也应相等</li>
</ul>
</li>
</ul>
<h2><span id="初始化">初始化</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet&lt;E&gt; strings=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>
<h2><span id="方法">方法</span></h2>
<table>
<thead>
<tr>
<th>HashSet</th>
<th>方法</th>
<th>返回类型</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>直接添加元素</td>
<td>add(Object o)</td>
<td>boolean</td>
<td>添加成功返回true，失败返回false</td>
</tr>
<tr>
<td>直接删除元素</td>
<td>remove(Object o)</td>
<td>boolean</td>
<td>删除成功返回true，失败返回false</td>
</tr>
<tr>
<td>查找某个元素是否存在</td>
<td>contains(Object o)</td>
<td>boolean</td>
<td>包含返回true，不包含返回false</td>
</tr>
</tbody>
</table>
<p>注意：</p>
<ul>
<li>优点：HashSet增加、删除、查找某个元素是否存在时,通过元素哈希值直接确定位置，不需要调整数组位置</li>
<li>缺点：HashSet不能通过指定条件返回某个元素，只能根据指定条件遍历HashSet来获取</li>
</ul>
<h2><span id="遍历元素">遍历元素</span></h2>
<ul>
<li>foreach循环</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (E temp : hashset) &#123;</span><br><span class="line">    System.out.println(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>迭代器遍历</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;E&gt; iterator = hashset.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    <span class="type">E</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>HashSet没有下标，不能通过下标遍历</li>
<li>HashSet只能通过遍历返回集合中的某个元素。因为没有下标无法定位到指定位置的元素</li>
<li>HashSet集合遍历输出的顺序与添加顺序无关</li>
</ul>
<h3><span id="为什么用eclipseidea复写hashcode方法有31这个数字">为什么用Eclipse/IDEA复写hashCode方法，有31这个数字？</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(Object a[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (Object element : a)</span><br><span class="line">        result = <span class="number">31</span> * result + (element == <span class="literal">null</span> ? <span class="number">0</span> : element.hashCode());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>31是一个质数，带入公式具有良好的散列特性</li>
<li>用移位和减法来代替乘法。31可以 由i*31== (i&lt;&lt;5)-1来表示,现在很多虚拟机可以自动完成相关优化（提高算法效率）</li>
</ol>
<h1><span id="treeset">TreeSet</span></h1>
<h2><span id="概述">概述</span></h2>
<ol>
<li>TreeSet 的元素必须实现Comparable接口的 compareTo(Object obj) 方法或Comparator接口的compare(Object obj1,Object obj2)</li>
</ol>
<p>包装类已经实现了Comparable ：</p>
<table>
<thead>
<tr>
<th>包装类</th>
<th>compareTo(Object obj) 方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>所有的数值型对应的包装类</td>
<td>按对应的数值大小进行比较</td>
</tr>
<tr>
<td>Character</td>
<td>按字符的 unicode值来进行比较</td>
</tr>
<tr>
<td>Boolean</td>
<td>true对应的包装类实例大于 false对应的包装类实例</td>
</tr>
<tr>
<td>String</td>
<td>按字符串中字符的 unicode 值进行比较</td>
</tr>
<tr>
<td>Date、Time</td>
<td>后边的时间、日期比前面的时间、日期大</td>
</tr>
</tbody>
</table>
<h2><span id="初始化">初始化</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeSet&lt;E&gt; e = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>
<h2><span id="方法">方法</span></h2>
<table>
<thead>
<tr>
<th>TreeSet</th>
<th>方法</th>
<th>返回类型</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>直接添加元素</td>
<td>add(Object o)</td>
<td>boolean</td>
<td>添加成功返回true，失败返回false</td>
</tr>
<tr>
<td>直接删除元素</td>
<td>remove(Object o)</td>
<td>boolean</td>
<td>删除成功返回true，失败返回false</td>
</tr>
<tr>
<td>查找某个元素是否存在</td>
<td>contains(Object o)</td>
<td>boolean</td>
<td>包含返回true，不包含返回false</td>
</tr>
<tr>
<td>获取第一个元素</td>
<td>first()</td>
<td>Object</td>
<td>返回第一个元素</td>
</tr>
<tr>
<td>获取最后一个元素</td>
<td>last()</td>
<td>Object</td>
<td>返回最后一个元素</td>
</tr>
<tr>
<td>拿出第一个元素</td>
<td>pollFirst()</td>
<td>Object</td>
<td>返回第一个元素【原集合第一个元素删除】</td>
</tr>
<tr>
<td>拿出最后一个元素</td>
<td>pollLast()</td>
<td>Object</td>
<td>返回最后一个元素【原集合最后一个元素删除】</td>
</tr>
<tr>
<td>大于等于</td>
<td>ceiling(Object o)</td>
<td>Object</td>
<td>返回比指定元素大的元素（含相等）【找不到元素返回null】</td>
</tr>
<tr>
<td>大于</td>
<td>higher(Object o)</td>
<td>Object</td>
<td>返回比指定元素大的元素（不含相等）【找不到元素返回null】</td>
</tr>
<tr>
<td>小于等于</td>
<td>floor(Object o)</td>
<td>Object</td>
<td>返回比指定元素小的元素（含相等）【找不到元素返回null】</td>
</tr>
<tr>
<td>小于</td>
<td>lower(Object o)</td>
<td>Object</td>
<td>返回比指定元素小的元素（不含相等）【找不到元素返回null】</td>
</tr>
</tbody>
</table>
<h2><span id="遍历元素">遍历元素</span></h2>
<ul>
<li>
<p>foreach循环</p>
</li>
<li>
<p>迭代器遍历</p>
</li>
</ul>
<h2><span id="特点">特点</span></h2>
<ul>
<li>支持重复元素</li>
<li>没有下标</li>
<li>拥有升降序</li>
</ul>
<h2><span id="比较器">比较器</span></h2>
<ul>
<li>
<p>添加元素时，TreeSet 会调用集合元素的 compareTo(Object obj) 方法或compare(Object obj1,Object obj2) 来比较元素之间的大小关系（相等为0,大于或者小于使用正整数或者负数，但是官方建议使用1或者-1）， 然后将集合元素按升序(默认情况)排列</p>
</li>
<li>
<p>通常情况下，应保证当两个对象通过equals()方法比较返回true，则通过compareTo(Object obj)方法比较也应返回0</p>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>内部比较器</th>
<th>外部比较器</th>
</tr>
</thead>
<tbody>
<tr>
<td>使用场景</td>
<td>只能按照一个规则比较，一般用于默认排序规则</td>
<td>可以按照不同的规则比较，创建多个比较规则对象</td>
</tr>
<tr>
<td>实现接口</td>
<td>java.lang.Comparable</td>
<td>java.util.Comparator</td>
</tr>
<tr>
<td>实现</td>
<td>实体类中实现接口，重写int compareTo(Object o)方法</td>
<td>创建实现类实现接口，重写int compare(Object o1,Object o2)方法</td>
</tr>
<tr>
<td>TreeSet构造</td>
<td>无参构造TreeSet</td>
<td>实现类实例作为形参传入TreeSet构造器</td>
</tr>
</tbody>
</table>
<h3><span id="内部比较器">内部比较器</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Stu&gt; &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    String sex;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Stu o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.getScore()==o.getScore())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.getScore()&gt;o.getScore())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3><span id="外部比较器">外部比较器</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建按照学生年龄比较的规则</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StuAgeComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Stu&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Stu o1, Stu o2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(o1.getAge()== o2.getAge())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o1.getAge()&gt;o2.getAge()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="treeset去重">TreeSet去重</span></h2>
<ul>
<li>判断两元素相等的标准：实现比较器中比较方法判断</li>
<li>TreeSet去重依然丢弃重复</li>
</ul>
<h2><span id="特点">特点</span></h2>
<ul>
<li>支持重复元素</li>
<li>没有下标</li>
<li>拥有升降序</li>
</ul>
<h1><span id="排序问题">排序问题</span></h1>
<ul>
<li>TreeSet排序可以通过重写比较方法灵活操作相等的元素</li>
</ul>
<h2><span id="treeset排序但不去除重复">TreeSet排序但不去除重复</span></h2>
<p>使用内部比较器重写compareTo方法，其中判断相等时不返回0，从而实现不去重</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Stu o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.getAge()==o.getAge())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.getAge()&gt;o.getAge()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="arraylist结合collections方案排序但不去除重复">ArrayList结合Collections方案排序但不去除重复</span></h2>
<table>
<thead>
<tr>
<th>使用内部比较器</th>
<th>使用外部比较器</th>
</tr>
</thead>
<tbody>
<tr>
<td>实体类实现内部比较器</td>
<td>Comparator实现类实现外部比较器</td>
</tr>
<tr>
<td>将元素添加到ArrayList中</td>
<td>将元素添加到ArrayList中</td>
</tr>
<tr>
<td>Collections.sort(arrayList);</td>
<td>Collections.sort(arrayList,外部比较器)</td>
</tr>
</tbody>
</table>
<h2><span id="collections工具类">Collections工具类</span></h2>
<h3><span id="sort方法">sort()方法</span></h3>
<ul>
<li>用Arrays.sort()方法实现的</li>
<li>Collections.sort()</li>
<li>Collections.sort(stus,外部比较器)     可传入外部比较器</li>
</ul>
<h3><span id="arrayssort">Arrays.sort()</span></h3>
<ul>
<li>JDK8以前
<ul>
<li>判断待排序数组的长度，如果小于7则直接插入排序，否则使用归并排序。</li>
</ul>
</li>
<li>JDK8以后
<ul>
<li>java会使用TimSort进行排序。判断待排序数组的长度，如果长度小于32时会使用二分插入排序，否则会使用优化过的归并排序</li>
</ul>
</li>
</ul>
<h1><span id="map接口键key值value对">Map接口【键（key）值(value)对】</span></h1>
<h2><span id="map接口结构">Map接口结构</span></h2>
<p><img src="/post/%E9%9B%86%E5%90%88/D:%5C%E6%95%99%E5%AD%A6%E8%B5%84%E6%96%99%5Chzj%5Csz2212%5C004-%E9%9B%86%E5%90%88%5C%E9%9B%86%E5%90%88.assets%5Cimage-20230110111753024.png" alt="image-20230110111753024"></p>
<h2><span id="键值对的结构">键值对的结构</span></h2>
<ul>
<li>键：唯一性（采用Set集合标准）</li>
<li>值：非唯一性（采用List集合标准）</li>
</ul>
<h2><span id="hashset和treeset实现方案">HashSet和TreeSet实现方案</span></h2>
<ul>
<li>HashMap的实现其实就是HashSet的实现（哈希表）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>TreeMap的实现其实就是TreeSet的实现（红黑树）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;E,Object&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="hashmap">HashMap</span></h1>
<h2><span id="初始化">初始化</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;K,V&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>
<h2><span id="方法">方法</span></h2>
<table>
<thead>
<tr>
<th>HashMap</th>
<th>方法</th>
<th>返回类型</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>直接添加元素</td>
<td>put(K k,V v)</td>
<td>boolean</td>
<td>添加成功返回true，失败返回false</td>
</tr>
<tr>
<td>根据键删除元素</td>
<td>remove(K k)</td>
<td>V</td>
<td>返回被删除的对象</td>
</tr>
<tr>
<td>根据键和值删除元素</td>
<td>remove(K k,V v)</td>
<td>boolean</td>
<td>键与值不匹配删除失败，返回false，反之true</td>
</tr>
<tr>
<td>根据键修改元素</td>
<td>replace(K k,V v)</td>
<td>V</td>
<td>返回被修改的对象</td>
</tr>
<tr>
<td>根据键获取对象</td>
<td>get(K k)</td>
<td>V</td>
<td>返回查找的对象</td>
</tr>
<tr>
<td>获取所有键</td>
<td>keySet()</td>
<td>Set&lt;K&gt;</td>
<td>返回包含所有键的Set集合</td>
</tr>
<tr>
<td>获取所有值</td>
<td>values()</td>
<td>Collection&lt;V&gt;</td>
<td>返回包含所有值的Collection集合</td>
</tr>
</tbody>
</table>
<h2><span id="遍历">遍历</span></h2>
<ul>
<li>遍历所有键</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Integer&gt; keys = stus.keySet();</span><br><span class="line"><span class="keyword">for</span> (Integer key : keys) &#123;</span><br><span class="line">    <span class="type">Stu</span> <span class="variable">value</span> <span class="operator">=</span> stus.get(key);</span><br><span class="line">    System.out.println(key+<span class="string">&quot;:&quot;</span>+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>遍历所有值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;Stu&gt; values = stus.values();</span><br><span class="line"><span class="keyword">for</span> (Stu value : values) &#123;</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>迭代器迭代所有键（只有删除的时候才会使用迭代器）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; iterator = stus.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    <span class="keyword">if</span>(next &gt; <span class="number">1004</span>)&#123;</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="基本数据结构">基本数据结构</span></h2>
<ul>
<li>1.7 数组 + 链表</li>
<li>1.8 数组 + （链表 | 红黑树）</li>
</ul>
<h2><span id="key的设计">key的设计</span></h2>
<ol>
<li>
<p>HashMap 的 key 可以为 null，但 Map 的其他实现则不然</p>
</li>
<li>
<p>作为 key 的对象，必须实现 hashCode 和 equals，并且 key 的内容不能修改（不可变）</p>
<blockquote>
<p>若修改了key，将无法通过修改后的key查找HashMap中的值</p>
</blockquote>
</li>
<li>
<p>key 的 hashCode 应该有良好的散列性</p>
</li>
</ol>
<h2><span id="执行原理">执行原理</span></h2>
<h3><span id="添加元素过程">添加元素过程</span></h3>
<ol>
<li>
<p>判断若是首次插入元素，未初始化结点数组</p>
<ol>
<li><a href="#%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E5%A4%A7%E5%B0%8F">调整数组大小</a></li>
</ol>
</li>
<li>
<p>已初始化过数组，<a href="#%E7%B4%A2%E5%BC%95%E8%AE%A1%E7%AE%97">计算要插入结点数组的下标</a></p>
<ol>
<li>
<p>若该位置没有元素，则直接插入</p>
</li>
<li>
<p>若该位置有元素说明发生<a href="#%E5%93%88%E5%B8%8C%E7%A2%B0%E6%92%9E">哈希碰撞</a>，可能出现下面几种情况</p>
<ol>
<li>
<p>两元素<a href="#%E5%88%A4%E9%87%8D">重复</a>，<a href="#%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E7%9A%84%E5%A4%84%E7%90%86">处理重复元素</a></p>
</li>
<li>
<p>两元素不重复，原数组元素为树节点（已树化），插入或更新红黑树</p>
</li>
<li>
<p>两元素不重复，原数组元素为普通结点，则遍历该链表</p>
<ol>
<li>全链表没有重复元素，则插入该链表，若插入元素为该链表第九个，需处理链表过长（<a href="#%E6%A0%91%E5%8C%96">树化</a>或<a href="#%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E5%A4%A7%E5%B0%8F">扩容</a>）</li>
</ol>
</li>
</ol>
</li>
<li>
<p>遍历过程中发现链表有重复元素，<a href="#%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E7%9A%84%E5%A4%84%E7%90%86">处理重复元素</a></p>
</li>
</ol>
</li>
<li>
<p>若添加新元素后的数组总个数超过threshold，还需<a href="#%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E5%A4%A7%E5%B0%8F">扩容</a></p>
</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>jdk1.7</th>
<th>jdk1.8</th>
</tr>
</thead>
<tbody>
<tr>
<td>链表插入</td>
<td>头插法</td>
<td>尾插法</td>
</tr>
<tr>
<td>扩容</td>
<td>大于等于阈值且没有空位</td>
<td>大于阈值</td>
</tr>
</tbody>
</table>
<p>源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// 默认容量： 16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;		<span class="comment">//最大容量 2^30^</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;		<span class="comment">//负载因子:数组增长率</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;				<span class="comment">//树化链长条件</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;			<span class="comment">//链化参数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;			<span class="comment">//树化数组长度条件</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;						<span class="comment">//结点数组</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,<span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; </span><br><span class="line">    Node&lt;K,V&gt; p; </span><br><span class="line">    <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">//当前结点数组为空，或长度为0</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)		</span><br><span class="line">        n = (tab = resize()).length;		<span class="comment">//新建长度为默认容量16结点数组，，更新threshold为负载因子乘上默认容量</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)		<span class="comment">//要插入的数组位置为空</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);	<span class="comment">//插入该数组</span></span><br><span class="line">    <span class="keyword">else</span> &#123;								<span class="comment">//结点数组既不为空且插入位置发生冲突</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)		<span class="comment">//原数组元素为树节点</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">//TREEIFY_THRESHOLD=8	插入第九个树化</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// key有映射</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)	<span class="comment">//true丢弃重复元素，false替换</span></span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);			<span class="comment">// LinkedHashMap</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;	<span class="comment">//返回被替换的真值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;		<span class="comment">//记录本次修改</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)		<span class="comment">//threshold比较标准是总数组元素个数，不是数组长度</span></span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);	<span class="comment">// LinkedHashMap</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="调整数组大小">调整数组大小</span></h3>
<ol>
<li>首次添加元素，才创建数组（懒惰创建数组）
<ol>
<li>新建结点数组，长度为默认容量16，更新threshold为负载因子乘上默认容量</li>
</ol>
</li>
<li>首次添加元素，但<a href="#%E6%9E%84%E9%80%A0%E6%97%B6%E5%88%9D%E5%A7%8B%E5%8C%96threshold">构造集合时初始化了数组长度</a>
<ol>
<li>指定长度大于等于最大数组容量，更新threshold为int最大值</li>
<li>指定长度小于最大数组容量，更新threshold为指定长度乘上负载因子</li>
</ol>
</li>
<li>数组总元素个数超过threshold，需要扩容（数组中挂链长度大于8但数组长度小于64，为了分解链表也会扩容，扩容至64<a href="#%E6%A0%91%E5%8C%96">树化</a>）
<ol>
<li>数组长度已经大于等于最大容量，更新threshold为int最大值</li>
<li>数组已初始化（长度大于等于默认容量）且数组长度满足扩容条件（两倍仍小于最大容量），则扩容为原来的两倍，threshold也扩大两倍</li>
<li>由于数组中已有数据，扩容时还需遍历数组，将旧数组元素转移到新数组中
<ol>
<li>当前下标元素既没树化，也没链化，则直接运算其下标存入新数组中</li>
<li>当前元素为树节点（已树化），则拆分树或拆成链表</li>
<li>当前元素已链化，分解链表</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;	<span class="comment">//调整大小		数组初始化/数组长度插入新元素后大于threshold</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;					   <span class="comment">//结点数组不为空</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;	<span class="comment">//大于等于最大容量</span></span><br><span class="line">            threshold = Integer.MAX_VALUE;	<span class="comment">//threshold设为int最大值</span></span><br><span class="line">            <span class="keyword">return</span> oldTab;				   <span class="comment">//返回旧结点数组</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//新结点数组扩容后仍小于最大容量且旧结点数组长度大于等于16（意味着已经初始化）</span></span><br><span class="line">        <span class="comment">//新结点数组长度扩大两倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;	</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)	<span class="comment">//扩容后不超过最大容量，且数组长度不小于默认长度</span></span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// newThr为oldThr两倍</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// 结点数组为空，但threshold已初始化，则按照以有的threshold初始化</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// 未初始化threshold和结点数组，表示使用默认值</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;		<span class="comment">//新结点数组长度置为默认容量（16）</span></span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);	<span class="comment">//newThr置为负载因子乘上默认容量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;	<span class="comment">//按照以有的threshold初始化</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        <span class="comment">//初始化数组长度大于等于最大容量时，新threshold设为int最大值</span></span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ? </span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;	 		<span class="comment">//更新threshold</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];		<span class="comment">//新建结点数组，长度为newCap</span></span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;			<span class="comment">//数组中尚且有元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;	<span class="comment">//当前下标有元素时</span></span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;			<span class="comment">//清除旧数组元素</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)			<span class="comment">//当前元素没有挂链</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;		<span class="comment">//直接复制到新数组中</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)		<span class="comment">//树节点</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);<span class="comment">//拆分树或链化</span></span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// 当前元素有挂链</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="comment">//1.新数组长度为旧数组两倍</span></span><br><span class="line">                    <span class="comment">//2.当前下标位置有挂链</span></span><br><span class="line">                    <span class="comment">//3.按照旧数组长度，如2^i，即看第i位是否为1，将挂链分为两条链表</span></span><br><span class="line">                    <span class="comment">//4.第i位为0的存储在原位置，为1的存储在原数组长度加上原位置的位置</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;		<span class="comment">//next指向下个元素</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;	</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);	<span class="comment">//遍历原链表结点，并赋值到新链表上</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>拆分树</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="type">int</span> index, <span class="type">int</span> bit)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; b = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// Relink into lo and hi lists, preserving order</span></span><br><span class="line">    TreeNode&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">    TreeNode&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lc</span> <span class="operator">=</span> <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="literal">null</span>; e = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)e.next;</span><br><span class="line">        e.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = loTail) == <span class="literal">null</span>)</span><br><span class="line">                loHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                loTail.next = e;</span><br><span class="line">            loTail = e;</span><br><span class="line">            ++lc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = hiTail) == <span class="literal">null</span>)</span><br><span class="line">                hiHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                hiTail.next = e;</span><br><span class="line">            hiTail = e;</span><br><span class="line">            ++hc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loHead != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)	<span class="comment">//长度小于等于6</span></span><br><span class="line">            tab[index] = loHead.untreeify(map);	<span class="comment">//链化</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index] = loHead;</span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="literal">null</span>) <span class="comment">// (else is already treeified)</span></span><br><span class="line">                loHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hiHead != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index + bit] = hiHead;</span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="literal">null</span>)</span><br><span class="line">                hiHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="构造时初始化threshold">构造时初始化threshold</span></h3>
<p>构造HashMap或HashSet时带参将初始化threshold，参数即使大于最大容量也会自降为最大容量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> + initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> + loadFactor);</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>参数大于1时，初始化的threshold值为大于等于参数且最接近参数的 2<sup>i</sup>数列	（i&gt;=4,i为正整数，最大为最大容量（2<sup>30</sup>））</p>
<blockquote>
<p>例如14、22、54的参数，则实际初始化threshold为16、32、64</p>
</blockquote>
</li>
<li>
<p>参数小于0时，抛出异常；</p>
</li>
<li>
<p>参数大于等于0小于等于1时，初始化threshold值为1</p>
</li>
<li>
<p>参数大于等于最大容量时，初始化threshold值理论上为设置的最大容量，但实际测试超过2<sup>29</sup>时， (OutOfMemoryError)异常</p>
</li>
</ol>
<p>源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;	</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;	</span><br><span class="line">    <span class="comment">//若n的二进制形式中至少有一个位为1 </span></span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;		<span class="comment">//n与自身右移1位进行或运算（有1则1），导致为1的位的右边1位必定为1</span></span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;		<span class="comment">//再与自身右移2位进行或运算，则1位右边3位都为1</span></span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;		<span class="comment">//再与自身右移4位进行或运算，则1位右边7位都为1</span></span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;		<span class="comment">//再与自身右移8位进行或运算，则1位右边15位都为1</span></span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;		<span class="comment">//再与自身右移16位进行或运算，则1位右边31位都为1</span></span><br><span class="line">    <span class="comment">//运算后n的结果：为1的最高位其后至多31位都为1</span></span><br><span class="line">    <span class="comment">//n+1：为1最高位为第i-1位,即大于等于cap且最接近的2^i^数列</span></span><br><span class="line">    <span class="comment">//上述为cap大于1的情况</span></span><br><span class="line">    <span class="comment">//cap小于1时，n&lt;0，结果为1</span></span><br><span class="line">    <span class="comment">//cap等于1时，n=0，结果也为1</span></span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="索引计算">索引计算</span></h3>
<p>计算元素插入数组的位置</p>
<p><strong>索引计算方法</strong></p>
<p><code>key.hash &amp; (capacity - 1)</code></p>
<ol>
<li>首先计算key的 hashCode()</li>
<li>再调用 HashMap 的 hash() 方法进行二次哈希：异或hashCode的高16位</li>
<li>最后和（数组容量-1）位与运算得到索引</li>
</ol>
<p><strong>为何要进行二次哈希</strong></p>
<ol>
<li>计算索引时，数组容量过小会忽略hashCode的高位数据，二次 hash() 可以综合高位数据，让哈希分布更为均匀</li>
<li>异或运算更好保留两组32位二进制数中各自的特征，且运算和或运算会导致结果偏向0或1</li>
</ol>
<p><strong>数组容量为何是 2 的 n 次幂</strong></p>
<ol>
<li>
<p>计算索引时效率更高：如果是 2 的 n 次幂可以使用位与运算代替取模</p>
<blockquote>
<p>和2<sup>n</sup>-1进行位与运算，相当于取二进制下的后n位</p>
</blockquote>
</li>
<li>
<p>扩容时重新计算索引效率更高：根据数组容量的最高位的0或1来决定元素的位置</p>
<blockquote>
<p>扩容时会拆分树、链表，需要计算拆分后链表的新位置</p>
<p>hash &amp; oldCap == 0 的元素留在原来位置 ，反之 hash &amp; oldCap == 1的</p>
<p>新位置 = 旧位置 + oldCap</p>
</blockquote>
</li>
</ol>
<ul>
<li><strong>容量是 2 的 n 次幂</strong> 这一设计计算索引效率更好，但 hash 的分散性就不好，需要二次 hash 来作为补偿，没有采用这一设计的典型例子是 Hashtable</li>
</ul>
<p>源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="哈希碰撞">哈希碰撞</span></h3>
<p>即两元素计算索引结果一致，将插入数组的同一下标</p>
<blockquote>
<p>不超过16位的值类型产生哈希碰撞，意味着它们与数组长度取模后的结果相等</p>
</blockquote>
<h3><span id="判重">判重</span></h3>
<p><code>p.hash == hash &amp;&amp;  (p.key == key || (key != null &amp;&amp; key.equals(p.key)))</code></p>
<ol>
<li>
<p>二次哈希的结果相等</p>
</li>
<li>
<p>且键的地址一致或键的equals相等，则说明两元素重复</p>
<blockquote>
<p>重复的元素一定会发生哈希碰撞</p>
</blockquote>
</li>
</ol>
<h3><span id="重复元素的处理">重复元素的处理</span></h3>
<ul>
<li>
<p>put()方法的参数onlyIfAbsent 为true时丢弃重复元素，false替换原数组元素</p>
</li>
<li>
<p>hashMap替换重复元素，hashSet丢弃重复元素</p>
</li>
</ul>
<h3><span id="树化">树化</span></h3>
<p><strong>树化意义</strong></p>
<ul>
<li>红黑树用来避免 DoS 攻击，防止链表超长时性能下降，树化应当是偶然情况，是保底策略</li>
<li>hash 表的查找，更新的时间复杂度是 $O(1)$，而红黑树的查找，更新的时间复杂度是 $O(log_2⁡n )$，TreeNode 占用空间也比普通 Node 的大，如非必要，尽量还是使用链表</li>
<li>hash 值如果足够随机，则在 hash 表内按泊松分布，在负载因子 0.75 的情况下，长度超过 8 的链表出现概率是 0.00000006，树化阈值选择 8 就是为了让树化几率足够小</li>
</ul>
<p><strong>树化规则</strong></p>
<ol>
<li>若结点数组中的链表长度超过树化阈值 8 时，先尝试扩容来减少链表长度，如果数组容量已经 &gt;=64，才会进行树化</li>
<li>将链表上的元素转换成红黑树的形式插入结点数组中</li>
</ol>
<p>源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)<span class="comment">//64</span></span><br><span class="line">        resize();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;<span class="comment">//链表上有元素</span></span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;<span class="comment">//遍历该链表</span></span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);	<span class="comment">//将结点转换为树结点</span></span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)	<span class="comment">//树节点链表插入数组中</span></span><br><span class="line">            hd.treeify(tab);	<span class="comment">//将树节点链表构建成红黑树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="链化">链化</span></h3>
<ul>
<li>情况1：在扩容时如果拆分树时，树元素个数 &lt;= 6 则会退化链表</li>
<li>情况2：remove 树节点时，若 root、root.left、root.right、root.left.left 有一个为 null ，也会退化为链表</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">untreeify</span><span class="params">(HashMap&lt;K,V&gt; map)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt; q = <span class="built_in">this</span>; q != <span class="literal">null</span>; q = q.next) &#123;</span><br><span class="line">        Node&lt;K,V&gt; p = map.replacementNode(q, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">            hd = p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tl.next = p;</span><br><span class="line">        tl = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="删除元素过程">删除元素过程</span></h3>
<ol>
<li>(tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp; (p = tab[index = (n - 1) &amp; hash]) != null</li>
<li>根据hash查找要删除元素所在数组的下标位置
<ol>
<li>查找的结点与要删除结点一致（重复），则删除数组中的结点</li>
<li>查找的结点为树节点，则从树中查找是否有要删除的结点，并删除树中的结点</li>
<li>查找的结点有挂链，则遍历链表查找是否又要删除的结点，并删除链表中的结点</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matchValue if true 只在value相等时删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> movable if false 删除时不移动其他结点</span></span><br><span class="line"><span class="comment"> * @返回结点，如果没有为空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">removeNode</span><span class="params">(<span class="type">int</span> hash, Object key, Object value,</span></span><br><span class="line"><span class="params">                           <span class="type">boolean</span> matchValue, <span class="type">boolean</span> movable)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, index;</span><br><span class="line">    <span class="comment">//结点数组不为空且长度大于0，且要删除的数组位置不为空</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;	</span><br><span class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node = <span class="literal">null</span>, e; K k; V v;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))	<span class="comment">//两元素重复</span></span><br><span class="line">            node = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="literal">null</span>) &#123;	<span class="comment">//不重复，但next指向不为空</span></span><br><span class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)	<span class="comment">//树节点</span></span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);<span class="comment">//获取树中的结点</span></span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="comment">//遍历链表</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                         (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;<span class="comment">//重复</span></span><br><span class="line">                        node = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||	 <span class="comment">//matchValue：true 只在value相等时删除</span></span><br><span class="line">                             (value != <span class="literal">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="built_in">this</span>, tab, movable);	<span class="comment">//删除树节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                tab[index] = node.next;	<span class="comment">//删除数组元素</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p.next = node.next;<span class="comment">//删除链表中结点</span></span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="并发问题">并发问题</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Entry[] newTable, <span class="type">boolean</span> rehash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> newTable.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;	<span class="comment">//遍历数组中的非空结点</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">null</span> != e) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">                e.hash = <span class="literal">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(e.hash, newCapacity);</span><br><span class="line">            e.next = newTable[i];</span><br><span class="line">            newTable[i] = e;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
  </entry>
  <entry>
    <title>面试题</title>
    <url>/post/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1><span id="java基础面试题">Java基础面试题</span></h1>
<hr>
<h2><span id="1-什么是jdbc">1. 什么是JDBC？</span></h2>
<ol>
<li>JDBC的全称是Java DataBase Connectivity</li>
<li>它是由一组用Java语言编写的类和接口组成（java.sql 和javax.sql）的标准Java API</li>
<li>用于Java编程语言与数据库连接、执⾏SQL查询，存储过程，并处理返回的结果</li>
<li>JDBC接⼝让Java程序和JDBC驱动实现了松耦合，对于多种关系型数据库提供统一访问，使得切换不同的数据库变得更加简单</li>
</ol>
<hr>
<h2><span id="2-如何理解classfornamecommysqlcjjdbcdriver">2. 如何理解<code>Class.forName(com.mysql.cj.jdbc.Driver)</code>？</span></h2>
<ol>
<li><code>com.mysql.cj.jdbc.Driver</code>是Driver驱动所在的位置</li>
<li><code>Class.forName()</code>是一个反射，但是他没有返回一个Class对象，而是初始化了Driver类，执行其中的静态代码块，即<code>DriverManager.registerDriver(new Driver());</code>注册驱动</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> <span class="keyword">extends</span> <span class="title class_">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title class_">java</span>.sql.Driver &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2><span id="3-jdbc的drivermanager是用来做什么的">3. JDBC的DriverManager是用来做什么的？</span></h2>
<p>DriverManager是一个工厂类，我们可以通过它来注册JDBC驱动，当JDBC的Driver类被加载进来时，它将被自动注册</p>
<hr>
<h2><span id="4-说下jdbc连接数据库的6个步骤">4. 说下JDBC连接数据库的6个步骤？</span></h2>
<ol>
<li>注册驱动</li>
<li>获取连接</li>
<li>创建一个Statement语句对象</li>
<li>执行SQL语句</li>
<li>处理结果集</li>
<li>关闭资源</li>
</ol>
<hr>
<h2><span id="5-statement-preparedstatement和callablestatement的区别">5. Statement 、PreparedStatement和CallableStatement的区别？</span></h2>
<table>
<thead>
<tr>
<th>Statement</th>
<th>PreparedStatement</th>
<th>CallableStatement</th>
</tr>
</thead>
<tbody>
<tr>
<td>一般用于执行固定的没有参数的SQL</td>
<td>继承于 Statement，一般用于执行有？参数预编译的SQL语句。可以防止SQL注入，安全性高于Statement</td>
<td>适用于执行存储过程</td>
</tr>
</tbody>
</table>
<hr>
<h2><span id="6-executeexecutequeryexecuteupdate的区别是什么">6. execute，executeQuery，executeUpdate的区别是什么？</span></h2>
<table>
<thead>
<tr>
<th></th>
<th>execute(String query)</th>
<th>executeQuery(String query)</th>
<th>executeUpdate(String query)</th>
</tr>
</thead>
<tbody>
<tr>
<td>应用</td>
<td>⽤来执⾏任意的SQL查询</td>
<td>⽤来执⾏select查询语句</td>
<td>⽤来执⾏insert或者update/delete（DML）语句</td>
</tr>
<tr>
<td>执行</td>
<td>如果查询的结果是⼀个ResultSet，这个⽅法就返回true。如果结果不是ResultSet，⽐如insert或者update查询，它就会返回false</td>
<td>返回ResultSet。即使查询不到记录返回的ResultSet也不会为null。如果传进来的是insert或者update语句，它会抛出错误信息为“executeQuery method can not be used for update”的java.util.SQLException</td>
<td></td>
</tr>
</tbody>
</table>
<p>当不确定是什么语句的时候才应该使⽤execute()⽅法，否则应该使⽤executeQuery或者executeUpdate⽅法</p>
<hr>
<h2><span id="7-jdbc中大数据量的分页解决方法">7. JDBC中大数据量的分页解决方法？</span></h2>
<p>使用sql语句进行分页，每次查询出的结果集中就只包含某页的数据内容</p>
<p>假设一共有38条数据，每页有10条数据，查询第3页的数据</p>
<p><strong>Oracle</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span>,rownum <span class="keyword">as</span> tempid <span class="keyword">from</span> student ) t</span><br><span class="line"><span class="keyword">where</span> t.tempid <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure>
<p><strong>mysql</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students limit <span class="number">20</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p><strong>sql server</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> top <span class="number">10</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> id <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> top <span class="number">20</span> id <span class="keyword">from</span> students <span class="keyword">order</span> <span class="keyword">by</span> id) </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> id;</span><br></pre></td></tr></table></figure>
<hr>
<h2><span id="8-在jdbc编程中处理事务的步骤">8. 在JDBC编程中处理事务的步骤？</span></h2>
<p>事务是作为单个逻辑⼯作单元执⾏的⼀系列操作</p>
<p>⼀个逻辑⼯作单元必须有四个属性，称为原⼦性、⼀致性、隔离性和持久性(ACID) 属性</p>
<p>JDBC处理事务有如下操作：</p>
<ol>
<li>conn.setAutoComit(false);设置提交⽅式为⼿⼯提交。</li>
<li>conn.commit()提交事务。</li>
<li>conn.rollback()回滚事务。</li>
<li>提交与回滚只选择⼀个执⾏。正常情况下提交事务，如果出现异常，则回滚。</li>
</ol>
<hr>
<h2><span id="9-说说数据库连接池工作原理和实现方案">9. 说说数据库连接池工作原理和实现方案？</span></h2>
<p><strong>数据库连接</strong></p>
<ol>
<li>频繁的进行数据库连接耗时长、占用大量内存资源</li>
<li>对于未能关闭的连接将导致数据库系统的内存泄露，因而不得不重启数据库</li>
<li>创建的数据库连接过多，也可能导致内存泄漏，服务器崩溃</li>
</ol>
<p>因此数据库连接是⼀种关键的、有限的、昂贵的资源，对数据库连接的管理能显著影响到程序的性能指标</p>
<p><strong>数据库连接池</strong></p>
<p>数据库连接池负责分配、管理和释放数据库连接</p>
<p>它允许应⽤程序重复使⽤⼀个现有的数据库连接，⽽不是重新建⽴⼀个</p>
<p>释放空闲时间超过最⼤空闲时间的数据库连接来避免因为没有释放数据库连接⽽引起的数据库连接遗漏</p>
<p>数据库连接池在初始化时将创建⼀定数量的数据库连接放到连接池中，这些数据库连接的数量是由最⼩数据库连接数来设定的</p>
<p>⽆论这些数据库连接是否被使⽤，连接池都将⼀直保证⾄少拥有这么多的连接数量</p>
<p>连接池的最⼤数据库连接数量限定了这个连接池能占有的最⼤连接数，当应⽤程序向连接池请求的连接数超过最⼤连接数量时，这些请求将被加⼊到等待队列中。</p>
<p>其实我们查询完数据库后，如果不关闭连接，而是暂时存放起来，当别人使用时，把这个连接给他们使用。就避免了一次建立数据库连接和断开的操作时间消耗</p>
<p>解决资源的频繁分配﹑释放所造成的问题。基本思想就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。我们可以通过设定连接池最大连接数来防止系统无尽的与数据库连接。更为重要的是我们可以通过连接池的管理机制监视数据库的连接的数量﹑使用情况，为系统开发﹑测试及性能调整提供依据。</p>
<pre><code>①   编写class 实现DataSource 接口

   ②   在class构造器一次性创建10个连接，将连接保存LinkedList中

   ③   实现getConnection  从 LinkedList中返回一个连接

   ④   提供将连接放回连接池中方法
</code></pre>
<p>**工作原理：**JAVA EE服务器启动时会建立一定数量的池连接，并一直维持不少于此数目的池连接。客户端程序需要连接时，池驱动程序会返回一个未使用的池连接并将其表记为忙。如果当前没有空闲连接，池驱动程序就新建一定数量的连接，新建连接的数量有配置参数决定。当使用的池连接调用完成后，池驱动程序将此连接表记为空闲，其他调用就可以使用这个连接。</p>
<p>**实现方案：**返回的Connection是原始Connection的代理，代理Connection的close方法，当调用close方法时，不是真正关连接，而是把它代理的Connection对象放回到连接池中，等待下一次重复利用。</p>
<h2><span id="10-jdbc规范使用到设计模式">10. jdbc规范使用到设计模式？</span></h2>
<p>桥接模式，首先DriverManager获得Connection是通过反射和类加载机制从数据库驱动包的driver中拿到连接，所以这里真正参与桥接模式的是driver，而DriverManager和桥接模式没有关系，DriverManager只是对driver的一个管理器。而我们作为使用者只去关心Connection，不会去关心driver，因为我们的操作都是通过操作Connection来实现的。这样分析下来这个桥接就清晰了逻辑——java.sql.Driver作为抽象桥类，而驱动包如com.mysql.jdbc.Driver具体的实现桥接类，而Connection是被桥接的对象。</p>
<h2><span id="11-jdbc的事务管理是什么为什么需要它">11. JDBC的事务管理是什么，为什么需要它？</span></h2>
<p>默认情况下，我们创建的数据库连接，是工作在自动提交的模式下的。这意味着只要我们执行完一条查询语句，就会自动进行提交。因此我们的每条查询，实际上都是一个事务，如果我们执行的是DML或者DDL，每条语句完成的时候，数据库就已经完成修改了。有的时候我们希望由一组SQL查询组成一个事务，如果它们都执行OK我们再进行提交，如果中途出现异常了，我们可以进行回滚。<br>
JDBC接口提供了一个setAutoCommit(boolean flag)方法，我们可以用它来关闭连接自动提交的特性。我们应该在需要手动提交时才关闭这个特性，不然的话事务不会自动提交，每次都得手动提交。数据库 通过表锁来管理事务，这个操作非常消耗资源。因此我们应当完成操作后尽快的提交事务。在这里有更多关于事务的示例程序。</p>
<h2><span id="12-jdbc里的clob和blob数据类型分别代表什么">12. JDBC里的CLOB和BLOB数据类型分别代表什么？</span></h2>
<p>CLOB意思是Character Large OBjects，字符大对象，它是由单字节字符组成的字符串数据，有自己专门的代码页。这种数据类型适用于存储超长的文本信息，那些可能会超出标准的VARCHAR数据类型长度限制（上限是32KB）的文本。<br>
BLOB是Binary Larget OBject，它是二进制大对象，由二进制数据组成，没有专门的代码页。它能用于存储超过VARBINARY限制（32KB）的二进制数据。这种数据类型适合存储图片，声音，图形，或者其它业务程序特定的数据。</p>
<h2><span id="13-java-中的反射是什么意思有哪些应用场景">13. Java 中的反射是什么意思？有哪些应用场景？</span></h2>
<p>每个类都有一个 Class 对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。类加载相当于 Class 对象的加载，类在第一次使用时才动态加载到 JVM 中。也可以使用 Class.forName,这种方式来控制类的加载，该方法会返回一个 Class 对象。<br>
反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。Class 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类：<br>
(1)Field ：可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；<br>
(2)Method ：可以使用 invoke() 方法调用与 Method 对象关联的方法；<br>
(3)Constructor ：可以用 Constructor 创建新的对象。<br>
应用举例：工厂模式，使用反射机制，根据全限定类名获得某个类的 Class 实例。</p>
<h2><span id="14-什么是反射">14. 什么是反射？</span></h2>
<p>反射是用来描述类的信息的。对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为 Java 语言的反射机制。</p>
<h2><span id="015反射的范围">015反射的范围？</span></h2>
<p>class:用来描述类本身<br>
Packge：用来描述类所属的包<br>
Field：用来描述类中的属性<br>
Method：用来描述类中的方法<br>
Constructor：用来描述类中的构造方法<br>
Annotation：用来描述类中的注解</p>
<h2><span id="016如何获取class">016如何获取Class？</span></h2>
<p>1)Class clazz=class.forName(“包名.类名”)<br>
2)Class clazz=类名.class;<br>
3)Class clazz=对象.getClass();</p>
<h2><span id="017反射中常用的方法">017反射中常用的方法?</span></h2>
<p>(1)获取类的权限修饰符---------&gt;int result=getModifiers();<br>
(2)获取名字------------&gt;string name=clazz.getName();<br>
(3)获取包名------------&gt;Packge p=clazz.getPackge();<br>
(4)寻找clazz中无参数构造方法：Clazz.getConstructor([String.class]);<br>
执行构造方法创建对象：Con.newInstance([参数]);<br>
(5)Field c=cls.getFields()：获得某个类的所有的公共（public）的字段，包括父类中的字段。<br>
Field c=cls.getDeclaredFields()：获得某个类的所有声明的字段，即包括public、private和 proteced，但是不包括父类的声明字段。</p>
<h2><span id="018反射得利与弊">018反射得利与弊?</span></h2>
<p>(1)反射得经典用法就是在xml或者properties配置文件中，然后在java类里面区解析这些内容，得到一个字符串，然后通过反射机制，通过这些字符串获得某个类得class实例，这样的话就可以动态的配置一些东西，而不需要每次都重新去new，要改的话也是直接改配置文件，代码维护起来方便很多。<br>
(2)当你在做一个软件开发的插件的时候，你连插件的类型名称都不知道，你怎么实例化这个对象呢？因为程序是支持插件的（第三方的），在开发的时候并不知道 。所以无法在代码中 New出来 ，但反射可以，通过反射，动态加载程序集，然后读出类，检查标记之后再实例化对象，就可以获得正确的类实例。<br>
(3)在编码阶段不知道那个类名,要在运行期从配置文件读取类名, 这时候就没有办法硬编码new ClassName(),而必须用到反射才能创建这个对象.反射的目的就是为了扩展未知的应用。比如你写了一个程序，这个程序定义了一些接口，只要实现了这些接口的dll都可以作为插件来插入到这个程序中。那么怎么实现呢？就可以通过反射来实现。就是把dll加载进内存，然后通过反射的方式来调用dll中的方法。很多工厂模式就是使用的反射。</p>
<h2><span id="019getname-getcanonicalname与getsimplename的区别">019getName、getCanonicalName与getSimpleName的区别?</span></h2>
<p>getSimpleName：只获取类名<br>
getName：类的全限定名，jvm中Class的表示，可以用于动态加载Class对象，例如Class.forName。<br>
getCanonicalName：返回更容易理解的表示，主要用于输出（toString）或log打印，大多数情况下和getName一样，但是在内部类、数组等类型的表示形式就不同了。</p>
<h2><span id="020一个java源文件中是否可以包含多个类不是内部类有什么限制">020一个“.java”源文件中是否可以包含多个类（不是内部类）有什么限制?</span></h2>
<p>可以；必须只有一个类名与文件名相同。</p>
<h2><span id="021byte的取值范围是多少怎么计算出来的">021byte的取值范围是多少，怎么计算出来的？</span></h2>
<p>byte 的取值范围是 -128 -&gt; 127 之间，一共是 256 位。一个 byte 类型在计算机中占据一个字节，那么就是 8 bit，所以最大就是 2^7 = 1111 1111。<br>
Java 中用补码来表示二进制数，补码的最高位是符号位，最高位用 0 表示正数，最高位 1 表示负数，正数的补码就是其本身，由于最高位是符号位，所以正数表示的就是 0111 1111 ，也就是 127。最大负数就是 1111 1111，这其中会涉及到两个 0 ，一个 +0 ，一个 -0 ，+0 归为正数，也就是 0 ，-0 归为负数，也就是 -128，所以 byte 的范围就是 -128 – 127。</p>
<h2><span id="022在-java-中如何跳出当前的多重嵌套循环">022在 Java 中，如何跳出当前的多重嵌套循环？</span></h2>
<p>在最外层循环前加一个标记如outfor，然后用break outfor;可以跳出多重循环。例如以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TestBreak &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        outfor: for (int i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">            for (int j = 0; j &lt; 10; j++)&#123;</span><br><span class="line">                if (j == 5)&#123;</span><br><span class="line">                    break outfor;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(&quot;j = &quot; + j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">j = 0</span><br><span class="line">j = 1</span><br><span class="line">j = 2</span><br><span class="line">j = 3</span><br><span class="line">j = 4</span><br></pre></td></tr></table></figure>
<h2><span id="023switch-是否能作用在-byte-上能否作用在-long-上能否作用在-string-上">023switch 是否能作用在 byte 上，能否作用在 long 上，能否作用在 String 上?</span></h2>
<p>早期的 JDK 中，switch（expr）中，expr 可以是 byte、short、char、int。从 1.5 版开始，Java 中引入了枚举类型（enum），expr 也可以是枚举，从 JDK 1.7 版开始，还可以是字符串（String）。长整型（long）是不可以的。</p>
<h2><span id="024-amp-和-ampamp-的区别">024 &amp; 和 &amp;&amp; 的区别？</span></h2>
<p>&amp;运算符是：逻辑与；&amp;&amp;运算符是：短路与。<br>
1)&amp;和&amp;&amp;在程序中最终的运算结果是完全一致的，只不过&amp;&amp;存在短路现象。如果是&amp;运算符，那么不管左边的表达式是true还是false，右边表达式是一定会执行的。当&amp;&amp;运算符左边的表达式结果为false的时候，右边的表达式不执行，此时就发生了短路现象,也就是说&amp;&amp;会更加的智能。这就是他们俩的本质区别。<br>
2)当然，&amp;运算符还可以使用在二进制位运算上，例如按位与操作。</p>
<h2><span id="025char-型变量中能不能存储一个中文汉字为什么">025char 型变量中能不能存储一个中文汉字，为什么？</span></h2>
<p>char 类型可以存储一个中文汉字，因为Java中使用的编码是Unicode编码，一个char 类型占2个字节（16 比特），所以放一个中文是没问题的。<br>
补充：使用Unicode 意味着字符在JVM内部和外部有不同的表现形式，在JVM内部都是 Unicode，当这个字符被从JVM内部转移到外部时（例如存入文件系统中），需要进行编码转换。所以 Java 中有字节流和字符流，以及在字符流和字节流之间进行转换的转换流，如 InputStreamReader和OutputStreamReader，这两个类是字节流和字符流之间的适配器类，承担了编码转换的任务。</p>
<h2><span id="026break-continue-return-的区别及作用">026break ,continue ,return 的区别及作用</span></h2>
<p>break 跳出总上一层循环，不再执行循环(结束当前的循环体) continue 跳出本次循环，继续执行下次循环(结束正在执行的循环 进入下一个循环条件) return 程序返回，不再执行下面的代码(结束当前的方法 直接返回) 另外在switch…case语句中，break不是必须的，但是会较大影响到运行结果。如果没有break,后面的一旦有case匹配成功，后面的case将无条件的向下执行其它的case。</p>
<h2><span id="027switch-是否能作用在-byte-上能否作用在-long-上能否作用在-string-上">027switch 是否能作用在 byte 上，能否作用在 long 上，能否作用在 String 上?</span></h2>
<p>早期的 JDK 中，switch（expr）中，expr 可以是 byte、short、char、int。从 1.5 版开始，Java 中引入了枚举类型（enum），expr 也可以是枚举，从 JDK 1.7 版开始，还可以是字符串（String）。长整型（long）是不可以的。</p>
<h2><span id="028mathround115等于多少mathround-115-又等于多少">028Math.round(11.5)等于多少？Math.round(- 11.5) 又等于多少?</span></h2>
<p>Math.round(11.5)的返回值是12，Math.round(-11.5)的返回值是-11。四舍五入的原理是在参数上加0.5然后进行取整。</p>
<h2><span id="029short-s1-1-s1-s1-1-有错吗short-s1-1-s1-1-有错吗">029short s1 = 1; s1 = s1 + 1; 有错吗?short s1 = 1; s1 += 1 有错吗？</span></h2>
<p>前者不正确，后者正确。<br>
对于 short s1 = 1; s1 = s1 + 1;由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。<br>
而 short s1 = 1; s1 += 1;可以正确编译，因为 s1+= 1;相当于 s1 = (short)(s1 + 1);其中有隐含的强制类型转换。</p>
<h2><span id="030数组有没有length方法string有没有length方法">030数组有没有length()方法？String有没有length()方法？</span></h2>
<p>Java中的数组没有length()方法，但是有length属性。String有length()方法。</p>
<h2><span id="031用最有效率的方法计算2乘以8">031用最有效率的方法计算2乘以8？</span></h2>
<p>2 &lt;&lt; 3，将2左移3位</p>
<h2><span id="032下面-integer-类型的数值比较输出的结果为">032下面 Integer 类型的数值比较输出的结果为？</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">       Integer f1 = 100, f2 = 100, f3 = 150, f4 = 150; System.out.println(f1 == f2);</span><br><span class="line">       System.out.println(f3 == f4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>f1==f2的结果是 true，而f3==f4 的结果是false。为什么呢？先来说说装箱的本质。当我们给一个Integer 对象赋一个 int 值的时候，会调用 Integer 类的静态方法 valueOf，如果看看valueOf的源代码就知道发生了什么。如果整型字面量的值在-128 到 127 之间，那么不会 new 新的 Integer 对象，而是直接引用常量池中的Integer对象，所以上面的面试题中f1==f2的结果是 true，而f3==f4 的结果是false。</p>
<h2><span id="033int-和-integer-有什么区别">033int 和 Integer 有什么区别?</span></h2>
<p>Java 的JDK从 1.5 开始引入了自动装箱/拆箱机制。它为每一个基本数据类型都引入了对应的包装类型（wrapper class），int的包装类就是 Integer，其它基本类型对应的包装类如下：<br>
原始类型: boolean，char，byte，short，int，long，float，double包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double</p>
<h2><span id="034什么是方法的返回值返回值的作用是什么">034什么是方法的返回值？返回值的作用是什么？</span></h2>
<p>方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能 产生结果）。返回值的作用:接收出结果，使得它可以用于其他的操作！</p>
<h2><span id="035如何将数值型字符转换为数字">035如何将数值型字符转换为数字？</span></h2>
<p>调用数值类型相应包装类中的方法 parse***(String)或 valueOf(String) 即可返回相应基本类型或包装类型数值；</p>
<h2><span id="036如何将数字转换为字符">036如何将数字转换为字符？</span></h2>
<p>将数字与空字符串相加即可获得其所对应的字符串;另外对于基本类型 数字还可调用 String 类中的 valueOf(…)方法返回相应字符串,而对于包装类型数字则可调用其 toString()方法获得相应字符串；</p>
<h2><span id="037如何取小数点前两位并四舍五入">037如何取小数点前两位并四舍五入?</span></h2>
<p>可用该数字构造一 java.math.BigDecimal 对象,再利用其 round()方法 进行四舍五入到保留小数点后两位,再将其转换为字符串截取最后两位。</p>
<h2><span id="038301-03-将会返回什么-true-还是-false">0383*0.1 == 0.3 将会返回什么? true 还是 false?</span></h2>
<p>false，因为有些浮点数不能完全精确的表示出来。</p>
<h2><span id="039java移位运算符">039Java移位运算符？</span></h2>
<p>java中有三种移位运算符<br>
&lt;&lt; :左移运算符,x &lt;&lt; 1,相当于x乘以2(不溢出的情况下),低位补0<br>
&gt;&gt; :带符号右移,x &gt;&gt; 1,相当于x除以2,正数高位补0,负数高位补1<br>
&gt;&gt;&gt; :无符号右移,忽略符号位,空位都以0补齐</p>
<h2><span id="040如何理解java中的泛型是伪泛型">040如何理解Java中的泛型是伪泛型？</span></h2>
<p>泛型中类型擦除 Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。</p>
<h2><span id="041注解的作用">041注解的作用？</span></h2>
<p>注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它主要的作用有以下四方面： 生成文档，通过代码里标识的元数据生成javadoc文档。 编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。 编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。 运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。</p>
<h2><span id="042注解的常见分类">042注解的常见分类？</span></h2>
<p><strong>Java自带的标准注解</strong>，包括@Override、@Deprecated和@SuppressWarnings，分别用于标明重写某个方法、标明某个类或方法过时、标明要忽略的警告，用这些注解标明后编译器就会进行检查。<br>
<strong>元注解</strong>:元注解是用于定义注解的注解，包括@Retention、@Target、@Inherited、@Documented @Retention用于标明注解被保留的阶段 @Target用于标明注解使用的范围 @Inherited用于标明注解可继承 @Documented用于标明是否生成javadoc文档 自定义注解，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解。</p>
<h2><span id="043java面向对象的理解面向对象的特征">043java面向对象的理解？面向对象的特征？</span></h2>
<p>整体上是封装、继承、多态、抽象。<br>
首先面向对象是一种思想。在java中万事万物皆对象。类是对相同事物的一种抽象、是不可见的，对象具体的、可见的。由对象到类的过程是抽象的过程，由类到对象的过程是实例化的过程。面向对象的三大特征分别是封装、继承和多态。<br>
封装隐藏了类的内部实现机制，对外界而言它的内部细节是隐藏的，暴露给外界的只是它的访问方法。例如在属性的修饰符上我们往往用的private私有的，这样其它类要想访问就通过get和set方法。因此封装可以程序员按照既定的方式调用方法，不必关心方法的内部实现，便于使用； 便于修改，增强 代码的可维护性。<br>
继承在本质上是特殊~一般的关系，即常说的is-a关系。子类继承父类，表明子类是一种特殊的父类，并且具有父类所不具有的一些属性或方法。比如从猫类、狗类中可以抽象出一个动物类，具有和猫、狗、虎类的共同特性（吃、跑、叫等）。通过extends关键字来实现继承。Java中的继承是单继承，即一个子类只允许有一个父类。<br>
Java多态是指的是首先两个类有继承关系，其次子类重写了父类的方法，最后父类引用指向子类对象。如Animal a=new Dog（）；这行代码就体现了多态。</p>
<h2><span id="044java中实现多态的机制是什么">044Java中实现多态的机制是什么？</span></h2>
<p>Java中的多态靠的是父类或接口定义的引用变量可以指向子类或具体实现类的实例对象，而程 序调用的方法在运行期才动态绑定，就是引用变量所指向的具体实例对象的方法，也就是内存 里正在运行的那个对象的方法，而不是引用变量的类型中定义的方法。</p>
<h2><span id="045构造方法有哪些特性">045构造方法有哪些特性？</span></h2>
<p>名字与类名相同；<br>
没有返回值，但不能用void声明构造函数；<br>
生成类的对象时自动执行，无需调用。</p>
<h2><span id="046构造器constructor是否可被重写override">046构造器（constructor）是否可被重写（override）？</span></h2>
<p>构造器不能被继承，因此不能被重写，但可以被重载。</p>
<h2><span id="047super关键字的用法">047super关键字的用法</span></h2>
<p>super可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一 个父类。<br>
super也有三种用法：<br>
1.普通的直接引用<br>
与this类似，super相当于是指向当前对象的父类的引用，这样就可以用super.xxx来引用父类的成员。<br>
2.子类中的成员变量或方法与父类中的成员变量或方法同名时，用super进行区分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person&#123; </span><br><span class="line">    protected String name; </span><br><span class="line">    public Person(String name)&#123; </span><br><span class="line">        this.name = name; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">class StudentextendsPerson&#123; </span><br><span class="line">    private String name; </span><br><span class="line">    publicStudent(String name, String name1)&#123; </span><br><span class="line">        super(name); </span><br><span class="line">        this.name = name1; </span><br><span class="line">    &#125; </span><br><span class="line">    public void getInfo()&#123; </span><br><span class="line">        System.out.println(this.name); </span><br><span class="line">        System.out.println(super.name); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">public class Test&#123; </span><br><span class="line">    public static void main(String[] args)&#123; </span><br><span class="line">        Student s1 = new Student(&quot;Father&quot;, &quot;Child&quot;); </span><br><span class="line">        s1.getInfo(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.引用父类构造函数<br>
super（参数）：调用父类中的某一个构造函数（应该为构造函数中的第一条语句）。<br>
this（参数）：调用本类中另一种形式的构造函数（应该为构造函数中的第一条语句）。</p>
<h2><span id="048this与super的区别">048this与super的区别？</span></h2>
<p>super:它引用当前对象的直接父类中的成员（用来访问直接父类中被隐藏的父类中成员<br>
数据或函数，基类与派生类中有相同成员定义时如：super.变量名 super.成员函数据名 （实参）<br>
this：它代表当前对象名（在程序中易产生二义性之处，应使用this来指明当前对象；如果函数的形参与类中的成员数据同名，这时需用this来指明成员变量名）<br>
super()和this()区别是<br>
[1]super()在子类中调用父类的构造方法，this()在本类内调用本类的其它构造方法。<br>
[2]super()和this()均需放在构造方法内第一行。尽管可以用this调用一个构造器，但却不能调用两个。<br>
[3]this和super不能同时出现在一个构造函数里面，因为this必然会调用其它的构造函数，其它的构造函数必然也会有super语句的存在，所以在同一个构造函数里面有相同的语 句，就失去了语句的意义，编译器也不会通过。<br>
[4]this()和super()都指的是对象，所以，均不可以在static环境中使用。包括：static变<br>
量,static方法，static语句块。从本质上讲，this是一个指向本对象的指针, 然而super是一个Java关键字。</p>
<h2><span id="049java中重写和重载有哪些区别">049Java中重写和重载有哪些区别？</span></h2>
<p>方法的重载和重写本质都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态。<br>
方法重载的规则：<br>
1）方法名一致，<br>
2）参数列表不同（参数顺序不同或者参数类型不同或者参数个数不同）。<br>
3）重载与方法的返回值无关，这个很关键。<br>
方法重写的规则：<br>
1）参数列表和返回值类型必须完全与父类的方法一致<br>
2）构造方法不能被重写，声明为 final 的方法不能被重写，声明为 static 的方法不能被重写，但是能够被再次声明。<br>
3）访问权限不能比父类中被重写的方法的访问权限更低。<br>
4）重写的方法能够抛出任何检查异常（编译时异常），但是重写的方法不能抛出比被重写方法声明的更广泛的运行时异常。</p>
<h2><span id="050接口和抽象类有哪些区别">050接口和抽象类有哪些区别？</span></h2>
<p>1）接口中的所有方法都是抽象的，而抽象类可以有抽象方法，也可以有实例方法。<br>
2）类需要继承，接口需要实现。一个类可以实现多个接口，但只能继承一个父类但接口却可以继承多接口。<br>
3）接口与实现它的类不构成继承体系，即接口不是类体系的一部分。因此，不相关的类也可以实现相同的接口，而抽象类是属于类的继承体系，并且一般位于类体系的顶层。</p>
<h2><span id="051接口是否可继承extends接口-抽象类是否可实现implements-接口-抽象类是否可继承具体类concrete-class">051接口是否可继承（extends）接口? 抽象类是否可实现（implements） 接口? 抽象类是否可继承具体类（concrete class）？</span></h2>
<p>接口可以继承接口。抽象类可以实现(implements)接口，抽象类可继承具体类，但前提是具体类必须有明确的构造函数。</p>
<h2><span id="052描述一下值传递和引用传递的区别">052描述一下值传递和引用传递的区别？</span></h2>
<p>值传递是指在调用函数时将实际参数复制一份到函数中，这样的话如果函数对其传递过来的形式参数进行修改，将不会影响到实际参数。<br>
引用传递是指在调用函数时将对象的地址直接传递到函数中，如果在对形式参数进行修改，将影响到实际参数的值。</p>
<h2><span id="053java中和equals有哪些区别">053Java中==和equals有哪些区别？</span></h2>
<p>equals 和== 最大的区别是一个是方法一个是运算符。<br>
1）基本类型中，==比较的是数值是否相等。equals方法是不能用于基本数据类型数据比较的，因为基本数据类型压根就没有方法。<br>
2）引用类型中，==比较的是对象的地址值是否相等。equals方法比较的是引用类型的变量所指向的对象的地址是否相等。应为String这个类重写了equals方法，比较的是字符串的内容。</p>
<h2><span id="054hashcode方法的作用">054hashCode()方法的作用？</span></h2>
<p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码 的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在JDK的Object.java中，这就 意味着Java中的任何类都包含有hashCode()函数。</p>
<h2><span id="055hashcode方法和equals方法区别">055hashcode方法和equals方法区别？</span></h2>
<p>在Java中，每个对象都可以调用自己的hashCode方法得到自己的哈希值（hashCode），相当于对象的指纹信息，通常说世界上没有完全一样的指纹，但是在Java中没有这么绝对，我们依然可以用hashCode值来做一些提前的判断。<br>
1)如果两个对象的hashCode值不一样，那么他们肯定是不同的两个对象；<br>
2)如果两个对象的hashCode值一样，也不代表就是同一个对象；<br>
3)如果两个对象的equals方法相等，那么他们的hashCode值一定相等。<br>
在Java的一些集合类的实现中，在比较两个对象的值是否相等的时候，会根据上面的基本原则，先调用对象的hashCode值来进行比较，如果hashCode值不一样，就可以认定这是两个不一样的数据，如果hashCode值相同，我们会进一步调用equals（）方法进行内容的比较。</p>
<h2><span id="056为什么重写-equals-方法必须重写-hashcode-方法">056为什么重写 equals 方法必须重写 hashcode 方法？</span></h2>
<p>equals 方法是用来比较对象大小是否相等的方法，hashcode 方法是用来判断每个对象 hash 值的一种方法。如果只重写 equals 方法而不重写 hashcode 方法，很可能会造成两个不同的对象，它们的 hashcode 也相等，造成冲突。<br>
例如：String str1 = “通话”; String str2 = “重地”;<br>
它们两个的 hashcode 相等，但是 equals 可不相等。</p>
<h2><span id="057两个对象值相同xequalsy-true但却可有不同的hash-code这句话对不对">057两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对？</span></h2>
<p>不对，如果两个对象x和y满足x.equals(y) == true，它们的哈希码（hash code）应当相同。<br>
Java对于eqauls方法和hashCode方法是这样规定的：<br>
(1)如果两个对象相同（equals方法返回true），那么它们的hashCode值一定要相同；<br>
(2)如果两个对象的hashCode相同，它们并不一定相同。<br>
当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对 象可以出现在Set集合中，同时增加新元素的效率会大大下降（对于使用哈希存储的系统，如 果哈希码频繁的冲突将会造成存取性能急剧下降）。</p>
<h2><span id="058抽象的abstract方法是否可同时是静态的static-是否可同时是本地方法native是否可同时被-synchronized">058抽象的(abstract)方法是否可同时是静态的(static)， 是否可同时是本地方法(native)，是否可同时被 synchronized？</span></h2>
<p>都不能。<br>
1）抽象方法需要子类重写，而静态的方法是无法被重写的，因此二者是矛盾的。<br>
2）本地方法是由本地代码（如 C++ 代码）实现的方法，而抽象方法是没有实现的，也是矛盾的。<br>
3）synchronized 和方法的实现细节有关，抽象方法不涉及实现细节，因此也是相互矛盾的。</p>
<h2><span id="059final关键字的用法">059final关键字的用法?</span></h2>
<p>修饰类:当用final修饰一个类时，表明这个类不能被继承。正如String类是不能被继承的。final类中的成员变量可以根据需要设为final，但是要注意final类中的所有成员方法都会被隐式地指定为final方法。<br>
修饰方法:使用final修饰方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。在最近的Java版本中，不需要使用final方法进行这些优化了。因此，只有在想明确禁止该方法在子类中被覆盖的情况下才将方法设置为final。(注：一个类中的private方法会隐式地被指定为final方法)<br>
修饰变量:对于被final修饰的变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。虽然不能再指向其他对象，但是它指向的对象的内容是可变的。</p>
<h2><span id="060final和static的区别">060final和static的区别？</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo1 &#123;</span><br><span class="line">    public static void main(String[] args)  &#123;</span><br><span class="line">        MyClass myClass1 = new MyClass();</span><br><span class="line">        MyClass myClass2 = new MyClass();</span><br><span class="line">        System.out.println(myClass1.i);</span><br><span class="line">        System.out.println(myClass2.i);</span><br><span class="line">        System.out.println(myClass1.j);</span><br><span class="line">        System.out.println(myClass2.j);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyClass &#123;</span><br><span class="line">    public final double i = Math.random();</span><br><span class="line">    public static double j = Math.random();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.3222977275463088</span><br><span class="line">0.2565532218939688</span><br><span class="line">0.36856868882926397</span><br><span class="line">0.36856868882926397</span><br></pre></td></tr></table></figure>
<p>每次打印的两个j值都是一样的，而i的值却是不同的。从这里就可以知道final和static变量的区别了。static属于类级别的不可变，而final是对象级别的不可变。</p>
<h2><span id="061final与finally-finalize-的区别">061final与finally、finalize 的区别？</span></h2>
<p>1)final：用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，被其修饰的类不可继承。<br>
2)finally：异常处理语句结构的一部分，表示总是执行。<br>
3)finalize：Object 类的一个方法，当java对象没有更多的引用指向的时候，系统会自动的由垃圾回收器来负责调用此方法进行回收前的准备工作和垃圾回收。</p>
<h2><span id="062静态变量和实例变量区别">062静态变量和实例变量区别？</span></h2>
<p>静态变量： 静态变量由于不属于任何实例对象，属于类的，所以在内存中只会有一份，在类的 加载过程中，JVM只为静态变量分配一次内存空间。<br>
实例变量： 每次创建对象，都会为每个对象分配成员变量内存空间，实例变量是属于实例对象 的，在内存中，创建几次对象，就有几份成员变量。</p>
<h2><span id="063静态方法和实例方法有何不同">063静态方法和实例方法有何不同？</span></h2>
<p>静态方法和实例方法的区别主要体现在两个方面：<br>
在外部调用静态方法时，可以使用&quot;类名.方法名&quot;的方式，也可以使用&quot;对象名.方法名&quot;的 方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。<br>
静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法）， 而不允许访问实例成员变量和实例方法；实例方法则无此限制。</p>
<h2><span id="064指出下面程序的运行结果">064指出下面程序的运行结果？</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A&#123; </span><br><span class="line">    static&#123; </span><br><span class="line">        System.out.print(&quot;1&quot;); </span><br><span class="line">    &#125; </span><br><span class="line">    public A()&#123; </span><br><span class="line">        System.out.print(&quot;2&quot;); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">class B extends A&#123; </span><br><span class="line">    static&#123; </span><br><span class="line">        System.out.print(&quot;a&quot;); </span><br><span class="line">    &#125; </span><br><span class="line">    public B()&#123; </span><br><span class="line">        System.out.print(&quot;b&quot;); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">public class Hello&#123; </span><br><span class="line">    public static void main(String[] ars)&#123; </span><br><span class="line">        A ab = new B(); //执行到此处,结果: 1a2b </span><br><span class="line">        ab = new B(); //执行到此处,结果: 1a2b2b </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>输出结果为 1a2b2b；<br>
分析：类的 static 代码段,可以看作是类首次加载(虚拟机加载)执行的代码,而对于类加载,首先要执行其基类的构造,再执行其本身的构造。</p>
<h2><span id="065访问修饰符publicprivateprotected以及不写默认时的区别">065访问修饰符public,private,protected,以及不写（默认）时的区别？</span></h2>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>当前类</th>
<th>同包</th>
<th>子类</th>
<th>其它包</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>protected</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>默认(缺省)</td>
<td>是</td>
<td>是</td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td>private</td>
<td>是</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody>
</table>
<p>类的成员不写访问修饰时默认为default。默认对于同一个包中的其他类相当于公开 （public），对于不是同一个包中的其他类相当于私有（private）。受保护（protected）对 子类相当于公开，对不是同一包中的没有父子关系的类相当于私有。Java中，外部类的修饰符 只能是public或默认，类的成员（包括内部类）的修饰符可以是以上四种。</p>
<h2><span id="066java有没有goto">066Java有没有goto？</span></h2>
<p>goto 是Java中的保留字，在目前版本的Java中没有使用。（根据James Gosling（Java之 父）编写的《The Java Programming Language》一书的附录中给出了一个Java关键字列 表，其中有goto和const，但是这两个是目前无法使用的关键字，因此有些地方将其称之为保 留字，其实保留字这个词应该有更广泛的意义，因为熟悉C语言的程序员都知道，在系统类库 中使用过的有特殊意义的单词或单词的组合都被视为保留字）</p>
<h2><span id="067java-的接口和-c的虚类的相同和不同处">067Java 的接口和 C++的虚类的相同和不同处?</span></h2>
<p>由于 Java 不支持多继承，而有可能某个类或对象要使用分别在几个类或对象里面的方法或属性，现有的单继承机制就不能满足要求。与继承相比，接口有更高的灵活性，因为接口中没有任何实现代码。当一个类实现了接口以后，该类要实现接口里面所有的方法和属性，并且接口里面的属性在默认状态下面都是public static,所有方法默认情况下是 public.一个类可以实现多个接口。</p>
<h2><span id="068string-是最基本的数据类型吗">068String 是最基本的数据类型吗?</span></h2>
<p>不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type）外，剩下的都是引用类型（reference type）</p>
<h2><span id="069string-stringbuffer-stringbuilder区别及使用场景">069String、StringBuffer、StringBuilder区别及使用场景？</span></h2>
<p>1）String是只读的字符串，因此String引用的字符串内容是不能被改变的。<br>
String str = “abc”；<br>
str = “bcd”;<br>
如上，第一行str 仅仅是一个引用对象，它指向一个字符串对象“abc”。第二行代码的含义是让 str 重新指向了一个新的字符串“bcd”对象，而“abc”对象并没有任何改变<br>
2）StringBuffer/StringBuilder 表示的字符串对象可以直接进行修改。<br>
3）StringBuilder 是 Java5 中引入的，它和 StringBuffer 的方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方法都没有被 synchronized 修饰，因此它的效率理论上也比 StringBuffer 要高。</p>
<h2><span id="070string-str-i-和string-str-new-string1一样吗">070String str = “i” 和String str = new String(“1”)一样吗？</span></h2>
<p>不一样，因为内存的分配方式不一样。String str = &quot;i&quot;的方式JVM会将其分配到常量池中，而 String str = new String(“i”)JVM会将其分配到堆内存中。</p>
<h2><span id="071是否可以继承string类">071是否可以继承String类？</span></h2>
<p>String 类是final类，不可以被继承。<br>
补充：继承String本身就是一个错误的行为，对String类型最好的重用方式是关联关系 （Has-A）和依赖关系（Use-A）而不是继承关系（Is-A）。</p>
<h2><span id="072string-snew-stringxyz创建了几个字符串对象">072String s=new String(“xyz”);创建了几个字符串对象</span></h2>
<p>两个对象，一个是静态存储区的&quot;xyz&quot;,一个是用 new 创建在堆上的对象。</p>
<h2><span id="073string类的常用方法有哪些">073String类的常用方法有哪些？</span></h2>
<p>indexof();返回指定字符的的索引。<br>
charAt();返回指定索引处的字符。<br>
replace();字符串替换。<br>
trim();去除字符串两端空格。<br>
splt()；字符串分割，返回分割后的字符串数组。<br>
getBytes()；返回字符串byte类型数组。<br>
length()；返回字符串长度。<br>
toLowerCase();将字符串转换为小写字母。<br>
toUpperCase();将字符串转换为大写字母。<br>
substring();字符串截取。<br>
equals();比较字符串是否相等。</p>
<h2><span id="074数组有没有-length方法string-有没有-length方法">074数组有没有 length()方法?String 有没有 length()方法？</span></h2>
<p>数组没有 length()方法，有 length 的属性。String 有 length()方法。JavaScript 中，获得字符串的长度是通过 length 属性得到的，这一点容易和 Java混淆</p>
<h2><span id="075怎样将-gb2312-编码的字符串转换为-iso-8859-1-编码的字符串">075怎样将 GB2312 编码的字符串转换为 ISO-8859-1 编码的字符串？</span></h2>
<p>String s1 = “你好”; String s2 = newString(s1.getBytes(“GB2312”), “ISO-8859-1”);</p>
<h2><span id="076string-中的-equals-是如何重写的">076String 中的 equals 是如何重写的？</span></h2>
<p>首先会判断要比较的两个字符串它们的引用是否相等。如果引用相等的话，直接返回 true ，不相等的话继续下面的判断，然后再判断被比较的对象是否是 String 的实例，如果不是的话直接返回 false，如果是的话，再比较两个字符串的长度是否相等，如果长度不想等的话也就没有比较的必要了；长度如果相同，会比较字符串中的每个 字符 是否相等，一旦有一个字符不相等，就会直接返回 false。</p>
<h2><span id="077如何实现字符串的反转及替换">077如何实现字符串的反转及替换？</span></h2>
<p>用递归实现字符串反转，代码如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static String reverse(String originStr) &#123;</span><br><span class="line">   if(originStr == null || originStr.length() &lt;= 1)</span><br><span class="line">       return originStr;</span><br><span class="line">   return reverse(originStr.substring(1)) + originStr.charAt(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>string.substring(from)：相当于从from位置截取到原字符串末尾</p>
<p>charAt() 方法用于返回指定索引处的字符。索引范围为从 0 到 length() - 1。</p>
<h2><span id="078写一个函数要求输入一个字符串和一个字符长度对该字符串进行分隔">078写一个函数，要求输入一个字符串和一个字符长度，对该字符串进行分隔</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public String[] split(String str, int chars)&#123; </span><br><span class="line">    int n = (str.length()+ chars - 1)/chars; </span><br><span class="line">    String ret[] = new String[n]; </span><br><span class="line">    for(int i=0; i&lt;n; i++)&#123; </span><br><span class="line">        if(i &lt; n-1)&#123; </span><br><span class="line">            ret[i] = str.substring(i*chars , (i+1)*chars); </span><br><span class="line">        &#125;else&#123; </span><br><span class="line">            ret[i] = str.substring(i*chars); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    return ret; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2><span id="079写一个函数2-个参数1-个字符串1-个字节数返回截取的字符串要求字符串中的中文不能出现乱码如我-abc4应该截为我-ab输入我abc-汉-def6应该输出为我-abc而不是我-abc汉的半个">079写一个函数，2 个参数，1 个字符串，1 个字节数，返回截取的字符串，要求字符串中的中文不能出现乱码：如（“我 ABC”，4）应该截为“我 AB”，输入（“我ABC 汉 DEF”，6）应该输出为“我 ABC”而不是“我 ABC+汉的半个”</span></h2>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public String subString(String str, int subBytes) &#123; </span><br><span class="line">    int bytes = 0; // 用来存储字符串的总字节数 </span><br><span class="line">    for (int i = 0; i &lt; str.length(); i++) &#123; </span><br><span class="line">        if (bytes == subBytes) &#123; </span><br><span class="line">            return str.substring(0, i); </span><br><span class="line">        &#125; </span><br><span class="line">        char c = str.charAt(i); </span><br><span class="line">        if (c &lt; 256) &#123; </span><br><span class="line">            bytes += 1; // 英文字符的字节数看作 1 </span><br><span class="line">        &#125; else &#123; </span><br><span class="line">            bytes += 2; // 中文字符的字节数看作 2 </span><br><span class="line">            if(bytes - subBytes == 1)&#123; </span><br><span class="line">                return str.substring(0, i); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    return str; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="080用程序给出随便大小的-10-个数序号为-1-10按从小到大顺序输出并输出相应的序号">080用程序给出随便大小的 10 个数，序号为 1-10，按从小到大顺序输出，并输出相应的序号</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package test; </span><br><span class="line">import java.util.ArrayList; </span><br><span class="line">import java.util.Collections; </span><br><span class="line">import java.util.Iterator; </span><br><span class="line">import java.util.List; </span><br><span class="line">import java.util.Random; </span><br><span class="line">public class RandomSort &#123; </span><br><span class="line">    public static void printRandomBySort() &#123; </span><br><span class="line">        Random random = new Random(); // 创建随机数生成器 </span><br><span class="line">        List list = new ArrayList(); // 生成 10 个随机数，并放在集合 list 中 </span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123; </span><br><span class="line">            list.add(random.nextInt(1000)); </span><br><span class="line">        &#125; </span><br><span class="line">        Collections.sort(list); // 对集合中的元素进行排序 </span><br><span class="line">        Iterator it = list.iterator(); </span><br><span class="line">        int count = 0; </span><br><span class="line">        while (it.hasNext()) &#123; // 顺序输出排序后集合中的元素 </span><br><span class="line">            System.out.println(++count + &quot;: &quot; + it.next()); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    public static void main(String[] args) &#123; </span><br><span class="line">        printRandomBySort(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2><span id="081写一个方法输入一个文件名和一个字符串统计这个字符串在这个文件中出现的次数">081写一个方法,输入一个文件名和一个字符串,统计这个字符串在这个文件中出现的次数</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int countWords(String file, String find) throws Exception &#123; </span><br><span class="line">    int count = 0; </span><br><span class="line">    Reader in = new FileReader(file); </span><br><span class="line">    int c; </span><br><span class="line">    while ((c = in.read()) != -1) &#123; </span><br><span class="line">        while (c == find.charAt(0)) &#123; </span><br><span class="line">            for (int i = 1; i &lt; find.length(); i++) &#123; </span><br><span class="line">                c = in.read(); </span><br><span class="line">                if (c != find.charAt(i)) </span><br><span class="line">                    break; </span><br><span class="line">                if (i == find.length() - 1) </span><br><span class="line">                    count++; </span><br><span class="line">             &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    return count; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="082介绍一下object类中的方法">082介绍一下Object类中的方法？</span></h2>
<p>Object类提供了如下几个常用方法：<br>
Class&lt;?&gt; getClass()：返回该对象的运行时类。<br>
boolean equals(Object obj)：判断指定对象与该对象是否相等。<br>
int hashCode()：返回该对象的hashCode值。在默认情况下，Object类的hashCode()方法根据该对象的地址来计算。但很多类都重写了Object类的hashCode()方法，不再根据地址来计算其hashCode()方法值。<br>
String toString()：返回该对象的字符串表示，当程序使用System.out.println()方法输出一个对象，或者把某个对象和字符串进行连接运算时，系统会自动调用该对象的toString()方法返回该对象的字符串表示。Object类的toString()方法返回 运行时类名@十六进制hashCode值 格式的字符串，但很多类都重写了Object类的toString()方法，用于返回可以表述该对象信息的字符串。<br>
另外，Object类还提供了wait()、notify()、notifyAll()这几个方法，通过这几个方法可以控制线程的暂停和运行。Object类还提供了一个clone()方法，该方法用于帮助其他对象来实现“自我克隆”，所谓“自我克隆”就是得到一个当前对象的副本，而且二者之间完全隔离。由于该方法使用了protected修饰，因此它只能被子类重写或调用。</p>
<h2><span id="083为什么要重写hashcode和equals">083为什么要重写hashCode()和equals()？</span></h2>
<p>Object类提供的equals()方法默认是用==来进行比较的，也就是说只有两个对象是同一个对象时，才能返回相等的结果。而实际的业务中，我们通常的需求是，若两个不同的对象它们的内容是相同的，就认为它们相等。鉴于这种情况，Object类中equals()方法的默认实现是没有实用价值的，所以通常都要重写。</p>
<h2><span id="084object类中finalize方法作用">084Object类中finalize()方法作用？</span></h2>
<p>垃圾回收器回收对象前,会调用此方法,可以在此方法中做释放资源等清理操作</p>
<h2><span id="085systemgc-和-runtimegc-作用">085System.gc() 和 Runtime.gc() 作用？</span></h2>
<p>这两个方法用来提示 JVM 要进行垃圾回收。但是，立即开始还是延迟进行垃圾回收是取决于 JVM 的。</p>
<h2><span id="086如何格式化日期">086如何格式化日期？</span></h2>
<p>利用 java.text.DataFormat 的子类（如 SimpleDateFormat 类）中的 format(Date)方法可将日期格式化。</p>
<h2><span id="087打印昨天的当前时刻">087打印昨天的当前时刻。</span></h2>
<p>参考如下源代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class YesterdayCurrent&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.add(Calendar.DATE, -1);</span><br><span class="line">        System.out.println(cal.getTime());</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="088如何在java中生成随机数">088如何在Java中生成随机数？</span></h2>
<p>使用Math.random()可以生成0.1到1.0范围内的随机数字，然后通过数学方法实现生成 符合要求的随机数。</p>
<h2><span id="089什么是内部类">089什么是内部类？</span></h2>
<p>在Java中，可以将一个类的定义放在另外一个类的定义内部，这就是 内部类 。内部类本身就 是类的一个属性，与其他属性定义方式一致。</p>
<h2><span id="090内部类的分类有哪些">090内部类的分类有哪些？</span></h2>
<p>内部类可以分为四种： 成员内部类、局部内部类、匿名内部类和静态内部类 。</p>
<h2><span id="091内部类可以引用它的包含类外部类的成员吗有没有什么限制">091内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制</span></h2>
<p>一个内部类对象可以访问创建它的外部类对象的成员，包括私有成员。</p>
<h2><span id="092anonymous-inner-class匿名内部类是否可以继承其它类是否可以-实现接口">092Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以 实现接口</span></h2>
<p>可以继承其他类或实现其他接口，在 Swing 编程中常用此方式来实现事件监听和回调</p>
<h2><span id="093简单概述下异常">093简单概述下异常。</span></h2>
<p>Throwable 是 Java 语言中所有错误与异常的超类。<br>
Error 类及其子类：程序中无法处理的错误，表示运行应用程序中出现了严重的错误。<br>
Exception 程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：运行时异常和编译时异常。</p>
<p><img src="http://www.bjpowernode.com/Public/Uploads/article/20220920/1663637207@de13957bbd8247bc2511ec86fba6c130.png" alt="img"></p>
<p><strong>运行时异常</strong> 都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。 运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。<br>
**非运行时异常 （编译异常）**是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。</p>
<h2><span id="094异常如何处理的">094异常如何处理的？</span></h2>
<p>异常需要处理的时机分为编译时异常(也叫受控异常)也叫 CheckedException 和运行时异常(也叫非受控异常)也叫 UnCheckedException。Java认为Checked异常都是可以被处理的异常，所以Java程序必须显式处理Checked异常。如果程序没有处理Checked 异常，该程序在编译时就会发生错误无法编译。这体现了Java 的设计哲学：没有完善错误处理的代码根本没有机会被执行。<br>
对Checked异常处理方法有两种：<br>
● 第一种：当前方法知道如何处理该异常，则用try…catch块来处理该异常。<br>
● 第二种：当前方法不知道如何处理，则在定义该方法时声明抛出该异常。<br>
运行时异常只有当代码在运行时才发行的异常，编译的时候不需要try…catch。Runtime如除数是0和数组下标越界等，其产生频繁，处理麻烦，若显示申明或者捕获将会对程序的可读性和运行效率影响很大。所以由系统自动检测并将它们交给缺省的异常处理程序。当然如果你有处理要求也可以显示捕获它们。</p>
<h2><span id="095异常处理中的throws-throw-try-catch-finally-分别如何使用">095异常处理中的throws、throw、try、catch、finally 分别如何使用？</span></h2>
<p>Java 的异常处理是通过 5 个关键词来实现的：try、catch、throw、throws 和 finally。<br>
一般情况下是用 try 来执行一段程序，如果出现异常，系统会抛出（throw）一个异常，这时候你可以通过它的类型来捕捉（catch）它，或最后（finally）由缺省处理器来处理；try 用来指定一块预防所有“异常”的程序；catch 子句紧跟在 try 块后面，用来指定你想要捕捉的“异常”的类型；throw 语句用来明确地抛出一个“异常”；throws 用来标明一个成员函数可能抛出的各种“异常”；finally 为确保一段代码不管发生什么“异常”都被执行一段代码；可以在一个成员函数调用的外面写一个 try 语句，在这个成员函数内部写另一个 try 语句保护其他代码。每当遇到一个 try 语句，“异常”的框架就放到栈上面，直到所有的try 语句都完成。如果下一级的 try 语句没有对某种&quot;异常&quot;进行处理，栈就会展开，直到遇到有处理这种&quot;异常&quot;的 try 语句。</p>
<h2><span id="096try里有一个-return-语句那么紧跟在这个-try-后的-finally里的-code-会不会被执行什么时候被执行在-return-前还是后">096try{}里有一个 return 语句，那么紧跟在这个 try 后的 finally{}里的 code 会不会被执行，什么时候被执行，在 return 前还是后?</span></h2>
<p>会执行，在方法返回调用者前执行。Java 允许在 finally 中改变返回值的做法是不好的，因为如果存在 finally 代码块，try 中的 return 语句不会立马返回调用者，而是记录下返回值待 finally 代码块执行完毕之后再向调用者返回其值，然后如果在 finally 中修改了返回值，这会对程序造成很大的困扰，C#中就从语法上规定不能做这样的事。</p>
<h2><span id="097error-和-exception-有什么区别">097Error 和 Exception 有什么区别？</span></h2>
<p>Error 表示系统级的错误和程序不必处理的异常，是恢复不是不可能但很困难的情况下的一种严重问题；比如内存溢出，不可能指望程序能处理这样的情况；Exception 表示需要捕捉或者需要程序进行处理的异常，是一种设计或实现问题；也就是说，它表示如果程序运行正常，从不会发生的情况。</p>
<h2><span id="098异常编程题下面代码的输出结果">098异常编程题：下面代码的输出结果？</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int getNum() &#123; </span><br><span class="line">   try &#123; </span><br><span class="line">      int a = 1 / 0; </span><br><span class="line">      return 1; </span><br><span class="line">   &#125; catch (Exception e) &#123;</span><br><span class="line">      return 2; </span><br><span class="line">   &#125; finally &#123; </span><br><span class="line">      return 3; </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析：代码走到第3行的时候遇到了一个MathException，这时第4行的代码就不会执行了，代码直接跳转到catch语句中，走到第 6 行的时候，异常机制有一个原则：如果在catch中遇到了return或者异常等能使该函数终止的话那么有finally就必须先执行完finally代码块里面的代码然后再返回值。因此代码又跳到第8行，可惜第8行是一个return语句，那么这个时候方法就结束了，因此第6行的返回结果就无法被真正返回。因此上面返回值是3。</p>
<h2><span id="099类-example-a-继承-exception类-exampleb-继承-example-a">099类 Example A 继承 Exception，类 ExampleB 继承 Example A</span></h2>
<p>有如下代码片断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">    throw new ExampleB(“b”)；</span><br><span class="line">&#125;catch（ExampleA e）&#123;</span><br><span class="line">    System.out.printfln（“ExampleA”）；</span><br><span class="line">&#125;catch（Exception e）&#123;</span><br><span class="line">    System.out.printfln（“Exception”）；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出的内容应该是：ExampleA</p>
<h2><span id="100常见的异常有哪些">100常见的异常有哪些？</span></h2>
<p>●java.lang.NullPointerException 空指针异常；出现原因：调用了未经初始化的对象或者是不存在的对象。<br>
● java.lang.IndexOutOfBoundsException 数组角标越界异常，常见于操作数组对象时发生。<br>
● java.lang.ClassNotFoundException 指定的类找不到；出现原因：类的名称和路径加载错误；通常都是程序试图通过字符串来加载某个类时可能引发异常。<br>
● java.lang.ClassCastException 数据类型转换异常。<br>
● java.lang.SQLException SQL异常，常见于操作数据库时的 SQL 语句错误。</p>
<h2><span id="101throw-和-throws-的区别">101throw 和 throws 的区别？</span></h2>
<p>● throw：<br>
throw 语句用在方法体内，表示抛出异常，由方法体内的语句处理。<br>
throw是具体向外抛出异常的动作，所以它抛出的是一个异常实例，执行throw一定是抛出了某种异常。<br>
● throws：<br>
throws语句是用在方法声明后面，表示如果抛出异常，由该方法的调用者来进行异常的处理。<br>
throws主要是声明这个方法会抛出某种类型的异常，让它的使用者要知道需要捕获的异常的类型。</p>
<h2><span id="102java-7-的-try-with-resource">102Java 7 的 try-with-resource?</span></h2>
<p>如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void automaticallyCloseResource() &#123;</span><br><span class="line">    File file = new File(&quot;./tmp.txt&quot;);</span><br><span class="line">    try (FileInputStream inputStream = new FileInputStream(file);) &#123;</span><br><span class="line">        // use the inputStream to read a file</span><br><span class="line">    &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">        log.error(e);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        log.error(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="103异常的底层">103异常的底层？</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void simpleTryCatch() &#123;</span><br><span class="line">   try &#123;</span><br><span class="line">       testNPE();</span><br><span class="line">   &#125; catch (Exception e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用javap来分析这段代码（需要先使用javac编译）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//javap -c Main</span><br><span class="line">public static void simpleTryCatch();</span><br><span class="line">    Code:</span><br><span class="line">       0: invokestatic  #3                  // Method testNPE:()V</span><br><span class="line">       3: goto          11</span><br><span class="line">       6: astore_0</span><br><span class="line">       7: aload_0</span><br><span class="line">       8: invokevirtual #5                  // Method java/lang/Exception.printStackTrace:()V</span><br><span class="line">      11: return</span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">           0     3     6   Class java/lang/Exception</span><br></pre></td></tr></table></figure>
<p>异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下<br>
1)from 可能发生异常的起始点<br>
2)to可能发生异常的结束点<br>
3)target上述from和to之前发生异常后的异常处理者的位置<br>
4)type异常处理者处理的异常的类信息</p>
<h2><span id="104什么是io流">104什么是IO流？</span></h2>
<p>IO流就是以流的方式进行输入输出。主要用来处理设备之间的传输，文件的上传，下载和复制。<br>
流分输入和输出，输入流从文件中读取数据存储到进程中，输出流从进程中读取数据然后写入到目标文件。</p>
<h2><span id="105java-中有几种类型的流">105Java 中有几种类型的流？</span></h2>
<p>按照流的方向：输入流（inputStream）和输出流（outputStream）<br>
按照实现功能分：节点流（可以从或向一个特定的地方（节点）读写数据。如 FileReader）和处理流（是对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写。如 BufferedReader。处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。）<br>
按照处理数据的单位： 字节流和字符流。字节流继承于 InputStream 和 OutputStream， 字符流继承于Reader 和 Writer 。</p>
<h2><span id="106字节流和字符流的区别">106字节流和字符流的区别？</span></h2>
<p>1)字节流读取的时候，读到一个字节就返回一个字节；字符流读取的时候会读到一个或多个字节（这个要根据字符流中编码设置，一般中文对应的字节数是两个，在UTF-8码表中是3个字节）<br>
2)字节流可以处理所有类型数据，如：图片，MP3，AVI视频文件，而字符流只能处理字符数据。只要是处理纯文本数据，就要优先考虑使用字符流，除此之外都用字节流。<br>
3)字节流在操作时本身不会用到缓冲区（内存），是文件本身直接操作的，而字符流在操作时使用了缓冲区，通过缓冲区再操作文件。<br>
案例1：在写操作的过程中，没有关闭字节流操作，但是文件中也依然存在了输出的内容代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123; </span><br><span class="line">    // 第1步：使用File类找到一个文件 </span><br><span class="line">    File f = new File(&quot;d:&quot; + File.separator + &quot;test.txt&quot;); // 声明File 对象 </span><br><span class="line">    // 第2步：通过子类实例化父类对象 </span><br><span class="line">    OutputStream out = new FileOutputStream(f); </span><br><span class="line">    // 第3步：进行写操作 </span><br><span class="line">    String str = &quot;Hello World!!!&quot;; // 准备一个字符串 </span><br><span class="line">    byte b[] = str.getBytes(); // 字符串转byte数组 </span><br><span class="line">    out.write(b); // 将内容输出 </span><br><span class="line">    // 第4步：关闭输出流 </span><br><span class="line">    // out.close();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>案例2：在写操作的过程中，没有关闭字符流操作，发现文件中没有任何内容输出。代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;         </span><br><span class="line">    // 第1步：使用File类找到一个文件    </span><br><span class="line">    File f = new File(&quot;d:&quot; + File.separator + &quot;test.txt&quot;);// 声明File 对象    </span><br><span class="line">    // 第2步：通过子类实例化父类对象    </span><br><span class="line">    Writer out = new FileWriter(f);            </span><br><span class="line">    // 第3步：进行写操作    </span><br><span class="line">    String str = &quot;Hello World!!!&quot;; // 准备一个字符串    </span><br><span class="line">    out.write(str); // 将内容输出</span><br><span class="line">    out.flush();     </span><br><span class="line">    // 第4步：关闭输出流    </span><br><span class="line">    // out.close();  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>这是因为字符流操作时使用了缓冲区，而在关闭字符流时会强制性地将缓冲区中的内容进行输出，但是如果程序没有关闭，则缓冲区中的内容是无法输出的。当然如果在不关闭字符流的情况下也可以使用Writer类中的flush()强制性的清空缓存，从而将字符流的内容全部输出。</p>
<h2><span id="107怎么样把字节流转换成字符流说出它的步骤">107怎么样把字节流转换成字符流,说出它的步骤？</span></h2>
<p>解题思路：把字节流转成字符流就要用到适配器模式，需要用到OutputStreamWriter。它继承了Writer接口，但要创建它必须在构造函数中传入一个OutputStream的实例，OutputStreamWriter的作用也就是将OutputStream适配到Writer。它实现了Reader接口，并且持有了InputStream的引用。利用转换流OutputStreamWriter.创建一个字节流对象,将其作为参数传入转换流OutputStreamWriter中得到字符流对象.</p>
<h2><span id="108什么是序列化">108什么是序列化？</span></h2>
<p>序列化是指把对象转换为字节序列的过程，序列化后的字节流保存了对象的状态以及相关的描述信息，从而方便在网络上传输或者保存在本地文件中，达到对象状态的保存与重建的目的。<br>
反序列化:客户端从文件中或网络上获得序列化后的对象字节流后，根据字节流中所保存的对象状态及描述信息，通过反序列化重建对象。<br>
序列化的优势：一是实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上（通常存放在文件里），二是，利用序列化实现远程通信，即在网络上传送对象的字节序列。三是通过序列化在进程间传递对象；</p>
<h2><span id="109io如何实现序列化和反序列化">109IO如何实现序列化和反序列化？</span></h2>
<p>(1)java.io.ObjectOutputStream：表示对象输出流；它的writeObject(Object obj)方法可以对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中；<br>
(2)java.io.ObjectInputStream：表示对象输入流；它的readObject()方法源输入流中读取字节序列，再把它们反序列化成为一个对象，并将其返回；<br>
注意：只有实现了Serializable或Externalizable接口的类的对象才能被序列化，否则抛出异常！</p>
<p><strong>序列化和反序列化的示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SerialDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">	    //序列化</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;object.out&quot;);</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(fos);</span><br><span class="line">        User user1 = new User(&quot;xuliugen&quot;, &quot;123456&quot;, &quot;male&quot;);</span><br><span class="line">        oos.writeObject(user1);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">		//反序列化</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;object.out&quot;);</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(fis);</span><br><span class="line">        User user2 = (User) ois.readObject();</span><br><span class="line">        System.out.println(user2.getUserName()+ &quot; &quot; + </span><br><span class="line">	    user2.getPassword() + &quot; &quot; + user2.getSex());</span><br><span class="line">        //反序列化的输出结果为：xuliugen 123456 male</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private String userName;</span><br><span class="line">    private String password;</span><br><span class="line">    private String sex;</span><br><span class="line">    //全参构造方法、get和set方法省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="110printstream-bufferedwriter-printwriter-的比较">110PrintStream、BufferedWriter、PrintWriter 的比较？</span></h2>
<p>\1. PrintStream 类的输出功能非常强大，通常如果需要输出文本内容，都应该将输出流包装成PrintStream 后进行输出。它还提供其他两项功能。与其他输出流不同，PrintStream 永远不会抛出 IOException；而是，异常情况仅设置可通过 checkError 方法测试的内部标志。另外，为了自动刷新，可以创建一个 PrintStream<br>
2.BufferedWriter:将文本写入字符输出流，缓冲各个字符从而提供单个字符，数组和字符串的高效写入。通过 write()方法可以将获取到的字符输出，然后通过 newLine()进行换行操作。BufferedWriter 中的字符流必须通过调用 flush 方法才能将其刷出去。并且 BufferedWriter 只能对字符流进行操作。如果要对字节流操作，则使用 BufferedInputStream<br>
3.PrintWriter 的 println 方法自动添加换行，不会抛异常，若关心异常，需要调用 checkError方法看是否有异常发生，PrintWriter 构造方法可指定参数，实现自动刷新缓存(autoflush)。</p>
<h2><span id="111如果我要对字节流进行大量的从硬盘读取要用那个流为什么">111如果我要对字节流进行大量的从硬盘读取,要用那个流,为什么？</span></h2>
<p>因为明确说了是对字节流的读取，所以肯定是InputStream或者他的子类，又因为要大量读取，肯定要考虑到高效的问题，自然想到缓冲流BufferedInputStream。<br>
原因：BufferedInputStream是InputStream的缓冲流，使用它可以防止每次读取数据时进行实际的写操作，代表着使用缓冲区。不带缓冲的操作，每读一个字节就要写入一个字节，由于涉及磁盘的IO操作相比内存的操作要慢很多，所以不带缓冲的流效率很低。带缓冲的流，可以一次读很多字节，但不向磁盘中写入，只是先放到内存里。等凑够了缓冲区大小的时候一次性写入磁盘，这种方式可以减少磁盘操作次数，速度就会提高很多！并且也可以减少对磁盘的损伤。</p>
<h2><span id="112什么是集合">112什么是集合?</span></h2>
<p>集合就是一个放数据的容器，准确的说是放数据对象引用的容器;集合类存放的都是对象的引用，而不是对象的本身;集合类型主要有3种：set(集）、list(列表）和map(映射)。</p>
<h2><span id="113集合框架中的泛型有什么优点">113集合框架中的泛型有什么优点？</span></h2>
<p>Java1.5引入了泛型，所有的集合接口和实现都大量地使用它。泛型允许我们为集合提供一个可以容纳的对象类型，因此，如果你添加其它类型的任何元素，它会在编译时报错。这避免了在运行时出现ClassCastException，因为你将会在编译时得到报错信息。泛型也使得代码整洁，我们不需要使用显式转换和instanceOf操作符。它也给运行时带来好处，因为不会产生类型检查的字节码指令。</p>
<h2><span id="114iterator是什么">114Iterator是什么？</span></h2>
<p>Iterator接口提供遍历任何Collection的接口。我们可以从一个Collection中使用迭代器方法来获取迭代器实例。迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者在迭代过程中移除元素。</p>
<h2><span id="115集合和数组的区别">115集合和数组的区别?</span></h2>
<p>数组是固定长度的；集合可变长度的。<br>
数组可以存储基本数据类型，也可以存储引用数据类型；集合只能存储引用数据类型。<br>
数组存储的元素必须是同一个数据类型；集合存储的对象可以是不同数据类型。</p>
<h2><span id="116常用的集合类有哪些">116常用的集合类有哪些？</span></h2>
<p>Map接口和Collection接口是所有集合框架的父接口：<br>
Collection接口的子接口包括：Set接口和List接口<br>
Map接口的实现类主要有：HashMap、TreeMap、Hashtable、ConcurrentHashMap以及Properties等<br>
Set接口的实现类主要有：HashSet、TreeSet、LinkedHashSet等<br>
List接口的实现类主要有：ArrayList、LinkedList、Stack以及Vector等</p>
<h2><span id="117collection-和-collections-有什么区别">117Collection 和 Collections 有什么区别？</span></h2>
<p>java.util.Collection 是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。<br>
Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。</p>
<h2><span id="118set和list的区别">118Set和List的区别？</span></h2>
<p>Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素。都可以存储null值，但是set不能重复所以最多只能有一个空元素。<br>
Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 &lt;实现类有HashSet,TreeSet&gt;。<br>
List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变 &lt;实现类有ArrayList,LinkedList,Vector&gt; 。</p>
<h2><span id="119arraylist与-linkedlist-异同">119Arraylist与 LinkedList 异同？</span></h2>
<p>1)Arraylist 底层使用的是Object数组；LinkedList 底层使用的是双向循环链表数据结构；<br>
2)ArrayList 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。插入末尾还好，如果是中间，则（add(int index, E element)）接近O（n）；LinkedList 采用链表存储，所以插入，删除元素时间复杂度不受元素位置的影响，都是近似 O（1）而数组为近似 O（n）。对于随机访问get和set，ArrayList优于LinkedList，因为LinkedList要移动指针。<br>
3)LinkedList 不支持高效的随机元素访问，而ArrayList 实现了RandmoAccess 接口，所以有随机访问功能。快速随机访问就是通过元素的序号快速获取元素对象(对应于get(int index)方法)。所以ArrayList随机访问快，插入慢；LinkedList随机访问慢，插入快。<br>
4)ArrayList的空 间浪费主要体现在在list列表的结尾会预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗比ArrayList更多的空间（因为要存放直接后继和直接前驱以及数据）。</p>
<h2><span id="120arraylist和vector有何异同点">120ArrayList和Vector有何异同点？</span></h2>
<p>ArrayList和Vector在很多时候都很类似。<br>
(1)两者都是基于索引的，内部由一个数组支持。<br>
(2)两者维护插入的顺序，我们可以根据插入顺序来获取元素。<br>
(3)ArrayList和Vector的迭代器实现都是fail-fast的。<br>
(4)ArrayList和Vector两者允许null值，也可以使用索引值对元素进行随机访问。<br>
以下是ArrayList和Vector的不同点。<br>
(1)Vector是同步的，而ArrayList不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。<br>
(2)ArrayList比Vector快，它因为有同步，不会过载。<br>
(3)ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。</p>
<h2><span id="121遍历一个list有哪些不同的方式">121遍历一个List有哪些不同的方式？</span></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strList = new ArrayList&lt;&gt;();</span><br><span class="line">//使用for-each循环</span><br><span class="line">for(String obj : strList)&#123;</span><br><span class="line">  System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">//using iterator</span><br><span class="line">Iterator&lt;String&gt; it = strList.iterator();</span><br><span class="line">while(it.hasNext())&#123;</span><br><span class="line">  String obj = it.next();</span><br><span class="line">  System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="122hashset如何检查重复">122HashSet如何检查重复？</span></h2>
<p>当把对象加入到HashSet中时，HashSet会先计算对象的hashCode值来判断对象加入的下标位置，同时也会与其他的对象的hashCode进行比较，如果没有相同的，就直接插入数据；如果有相同的，就进一步使用equals来进行比较对象是否相同，如果相同，就不会加入成功。</p>
<h2><span id="123hashmap如何遍历">123HashMap如何遍历？</span></h2>
<p>1.使用foreach循环遍历</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; hashMap = new HashMap&lt;String,String&gt;();</span><br><span class="line">hashMap.put(&quot;1&quot;, &quot;good&quot;);</span><br><span class="line">hashMap.put(&quot;2&quot;, &quot;study&quot;);</span><br><span class="line">hashMap.put(&quot;3&quot;, &quot;day&quot;);</span><br><span class="line">hashMap.put(&quot;4&quot;, &quot;up&quot;);</span><br><span class="line">for (Map.Entry&lt;String, String&gt; entry : hashMap.entrySet()) &#123;</span><br><span class="line">    System.out.println(entry.getKey()+&quot;:&quot;+entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.使用foreach迭代键值对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; hashMap = new HashMap&lt;String,String&gt;();</span><br><span class="line">hashMap.put(&quot;1&quot;, &quot;good&quot;);</span><br><span class="line">hashMap.put(&quot;2&quot;, &quot;study&quot;);</span><br><span class="line">hashMap.put(&quot;3&quot;, &quot;day&quot;);</span><br><span class="line">hashMap.put(&quot;4&quot;, &quot;up&quot;);</span><br><span class="line">for (String key : hashMap.keySet()) &#123;</span><br><span class="line">    System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line">for (String value : hashMap.values()) &#123;</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.使用迭代器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; hashMap = new HashMap&lt;String,String&gt;();</span><br><span class="line">hashMap.put(&quot;1&quot;, &quot;good&quot;);</span><br><span class="line">hashMap.put(&quot;2&quot;, &quot;study&quot;);</span><br><span class="line">hashMap.put(&quot;3&quot;, &quot;day&quot;);</span><br><span class="line">hashMap.put(&quot;4&quot;, &quot;up&quot;);</span><br><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = hashMap.entrySet().iterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;String, String&gt; next = iterator.next();</span><br><span class="line">    System.out.println(next.getKey()+&quot;:&quot;+next.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.使用lambda表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; hashMap = new HashMap&lt;String,String&gt;();</span><br><span class="line">hashMap.put(&quot;1&quot;, &quot;good&quot;);</span><br><span class="line">hashMap.put(&quot;2&quot;, &quot;study&quot;);</span><br><span class="line">hashMap.put(&quot;3&quot;, &quot;day&quot;);</span><br><span class="line">hashMap.put(&quot;4&quot;, &quot;up&quot;);</span><br><span class="line">hashMap.forEach((k,v)-&gt; System.out.println(k+&quot;:&quot;+v));</span><br></pre></td></tr></table></figure>
<h2><span id="124hashmap-和-hashtable-的区别">124HashMap 和 Hashtable 的区别?</span></h2>
<p>相同点：<br>
都是实现来Map接口（hashTable还实现了Dictionary 抽象类）。<br>
不同点：<br>
\1. 历史原因:Hashtable 是基于陈旧的 Dictionary 类的，HashMap 是 Java 1.2 引进的 Map 接口<br>
的一个实现，HashMap把Hashtable 的contains方法去掉了，改成containsvalue 和containsKey。因为contains方法容易让人引起误解。<br>
\2. 同步性:Hashtable 的方法是 Synchronize 的，线程安全；而 HashMap 是线程不安全的，不是同步的。所以只有一个线程的时候使用hashMap效率要高。<br>
\3. 值：HashMap对象的key、value值均可为null。HahTable对象的key、value值均不可为null。<br>
\4. 容量：HashMap的初始容量为16，Hashtable初始容量为11，两者的填充因子默认都是0.75。<br>
\5. HashMap扩容时是当前容量翻倍即:capacity * 2，Hashtable扩容时是容量翻倍+1 即:capacity * 2+1。</p>
<h2><span id="125hashset-和-hashmap-区别">125HashSet 和 HashMap 区别？</span></h2>
<p>HashSet 底层就是基于 HashMap 实现的。只不过HashSet里面的HashMap所有的value都是同一个Object而已，因此HashSet也是非线程安全的。</p>
<p><img src="http://www.bjpowernode.com/Public/Uploads/article/20220826/1661484027@1dcee0974910ac94ad1a2bf44a5dd6ed.png" alt="img"></p>
<h2><span id="126haspmap与treemap的区别">126HaspMap与TreeMap的区别？</span></h2>
<p>\1. HashMap通过hashcode对其内容进行快速查找，而TreeMap中所有的元素都保持着某种固定的顺序，如果你需要得到一个有序的结果你就应该使用TreeMap（HashMap中元素的排列顺序是不固定的）。<br>
\2. 在Map 中插入、删除和定位元素，HashMap是最好的选择。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。使用HashMap要求添加的键类明确定义了hashCode()和 equals()的实现。</p>
<h2><span id="127arraylist自动扩容">127ArrayList自动扩容？</span></h2>
<p>每当向数组中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。数组扩容通过ensureCapacity(int minCapacity)方法来实现。在实际添加大量元素前，我也可以使用ensureCapacity来手动增加ArrayList实例的容量，以减少递增式再分配的数量。 数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时，要在构造ArrayList实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用ensureCapacity方法来手动增加ArrayList实例的容量。</p>
<h2><span id="128arraylist的fail-fast机制">128ArrayList的Fail-Fast机制？</span></h2>
<p>ArrayList也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。</p>
]]></content>
      <categories>
        <category>第五阶段</category>
      </categories>
  </entry>
</search>
