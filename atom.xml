<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>biyixia</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-28T11:35:42.727Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>biyixia</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>继承</title>
    <link href="http://example.com/post/%E7%BB%A7%E6%89%BF/"/>
    <id>http://example.com/post/%E7%BB%A7%E6%89%BF/</id>
    <published>2022-12-28T09:20:20.160Z</published>
    <updated>2022-12-28T11:35:42.727Z</updated>
    
    
    <summary type="html">&lt;p&gt;is a”代表的是类之间的继承关系，比如PC机是计算机，工作站也是计算机。PC机和工作站是两种不同类型的计算机，但都继承了计算机的共同特性。因此在用 Java语言实现时，应该将PC机和工作站定义成两种类，均继承计算机类。&lt;/p&gt;
&lt;p&gt;“has a”代表的是对象和它的成员的从属关系。同一种类的对象，通过它们的属性的不同值来区别。比如一台PC机的操作系统是Windows，另一台PC机的操作系统是Linux。操作系统是PC机的一个成员变量，根据这一成员变量的不同值，可以区分不同的PC机对象。&lt;/p&gt;
&lt;p&gt;is a 是如果A是B，那么B就是A的基类。比如：等边三角形是使是三角形，那么，三角形就是等边三角形的基类。&lt;br&gt;
has a 是如果A中有B，那么，B就是A的组成部分&lt;/p&gt;
&lt;p&gt;如果你确定两件对象之间是is-a的关系，那么此时你应该使用继承；比如菱形、圆形和方形都是形状的一种，那么他们都应该从形状类继承而不是聚合。&lt;br&gt;
如果你确定两件对象之间是has-a的关系，那么此时你应该使用聚合；比如电脑是由显示器、CPU、硬盘等组成的，那么你应该把显示器、CPU、硬盘这些类聚合成电脑类，而不是从电脑类继承。&lt;/p&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>super</title>
    <link href="http://example.com/post/super/"/>
    <id>http://example.com/post/super/</id>
    <published>2022-12-28T07:32:06.577Z</published>
    <updated>2022-12-28T11:37:23.836Z</updated>
    
    
    <summary type="html">&lt;p&gt;super	超类的&lt;/p&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>多态</title>
    <link href="http://example.com/post/%E5%A4%9A%E6%80%81/"/>
    <id>http://example.com/post/%E5%A4%9A%E6%80%81/</id>
    <published>2022-12-28T01:02:20.541Z</published>
    <updated>2022-12-28T07:24:58.933Z</updated>
    
    
    <summary type="html">&lt;p&gt;当我们使用代码描述主人喂养宠物的场景，首先在这个场景当中应该有“宠物对象” ，宠物对象应该有吃的行为，另外还需要一个“主人对象” ，主人对象应该有一个喂的行为。然而对于不同的宠物，吃的行为也不相同，或许是吃的东西不同，也或许是吃的方式不同，此时每当出现新的宠物时，我们就需要修改对于宠物吃行为的描述，这不符合OCP原则。对于需要更改的“宠物对象”，应当将其“封装”起来，在新的模块中对宠物不同的吃行为进行描述，而无需修改原本“宠物对象”的描述。&lt;/p&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>包装类的使用</title>
    <link href="http://example.com/post/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/post/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-12-27T12:19:56.147Z</published>
    <updated>2022-12-27T13:25:56.442Z</updated>
    
    
    <summary type="html">&lt;p&gt;针对八种基本数据类型定义相应的引用类型—包装类&lt;/p&gt;
&lt;p&gt;首先,Java语言是一个面向对象的语言,但是Java中的基本数据类型却是不面向对象的，为了实现一 切皆对象,将每个基本数据类型设计一个对应的类进行代表，这种方式增强了Java面向对象的性质。&lt;/p&gt;
&lt;p&gt;其次，如果仅仅有基本数据类型，那么在实际使用时将存在很多的不便，很多地方都需要使用对象。比如，在集合类中，我们是无法将int 、double等类型放进去的，因为集合的容器要求元素是Object类型。而包装类型的存在使得向集合中传入数值成为可能，包装类的存在弥补了基本数据类型的不足。&lt;/p&gt;
&lt;p&gt;此外，包装类还为基本类型添加了属性和方法，丰富了基本类型的操作。如当我们想知道int取值 范围的最小值，我们需要通过运算，如下面所示，但是有了包装类，我们可以直接使Integer.MAX_VALUE即可。&lt;/p&gt;
&lt;p&gt;注意:为什么要保留基本数据类型？Java种创建的对象都是存储在堆里的，使用的时候需要通过栈中的引用， 所以常用的基本数据类型，不需要使用new在堆上创建，而是直接在栈内存中存储不创建对象，就会比较高效。&lt;/p&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>抽象类和接口</title>
    <link href="http://example.com/post/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
    <id>http://example.com/post/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</id>
    <published>2022-12-27T09:00:50.059Z</published>
    <updated>2022-12-27T11:21:10.745Z</updated>
    
    
    <summary type="html">&lt;p&gt;在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象时，这样的类往往被称为抽象类。&lt;/p&gt;
&lt;p&gt;抽象类是为了把&lt;strong&gt;相同的但不确定&lt;/strong&gt;的东西的提取出来，为了以后的重用。定义成抽象类的目的，就是为了在子类中实现抽象方法。&lt;/p&gt;
&lt;p&gt;当然，随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。父类足够抽象时，以至于它没有具体的实例。&lt;/p&gt;
&lt;p&gt;然而，有时必须从几个类中抽象出共同的行为特征，继承它们所有的属性和方法。但是，Java不支持多重继承。这时，使用接口可以达到多重继承的效果。 例如：鼠标、键盘、打印机、扫描 仪、摄像头、充电器、MP3机、手机、数码相机、移动硬盘等都支持USB连接。&lt;/p&gt;
&lt;p&gt;接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要…则必须 能…”的思想。继承是一个&amp;quot;是不是&amp;quot;的关系，而接口实现则是 &amp;quot;能不能&amp;quot;的关系。&lt;/p&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>Object类</title>
    <link href="http://example.com/post/Object%E7%B1%BB/"/>
    <id>http://example.com/post/Object%E7%B1%BB/</id>
    <published>2022-12-26T12:24:31.027Z</published>
    <updated>2022-12-27T12:19:46.758Z</updated>
    
    
    <summary type="html">&lt;p&gt;Object类是所有类的根类,如果一个类没有显示的继承其他类,默认继承Object&lt;/p&gt;
&lt;p&gt;Object的类型变量可以指向任意类型的子类对象&lt;/p&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>static、final关键字</title>
    <link href="http://example.com/post/static%E3%80%81final%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://example.com/post/static%E3%80%81final%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2022-12-26T06:49:08.031Z</published>
    <updated>2022-12-26T12:02:28.740Z</updated>
    
    
    <summary type="html">&lt;h1&gt;static&lt;/h1&gt;
&lt;h2 id=&quot;修饰属性&quot;&gt;修饰属性&lt;/h2&gt;
&lt;p&gt;static修饰的属性称为：静态变量、全局变量、静态属性、全局属性、类变量、类属性，非static修饰的属性可称为实例变量&lt;/p&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>流程控制</title>
    <link href="http://example.com/post/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/post/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2022-12-14T07:23:26.274Z</published>
    <updated>2022-12-14T10:42:08.006Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>常用模板</title>
    <link href="http://example.com/post/IDEA%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF/"/>
    <id>http://example.com/post/IDEA%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF/</id>
    <published>2022-12-14T06:08:59.321Z</published>
    <updated>2022-12-14T06:21:28.695Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模板&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;psvm&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;可生成 main</summary>
        
      
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>IDEA常用快捷键</title>
    <link href="http://example.com/post/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://example.com/post/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2022-12-14T03:32:16.345Z</published>
    <updated>2022-12-14T11:23:30.714Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;执行运行&lt;/td&gt;
&lt;td&gt;Shift +</summary>
        
      
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>运算符</title>
    <link href="http://example.com/post/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://example.com/post/%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2022-12-12T12:20:26.198Z</published>
    <updated>2022-12-27T13:25:42.115Z</updated>
    
    
    <summary type="html">&lt;h1&gt;引言&lt;/h1&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>编码与数制</title>
    <link href="http://example.com/post/%E7%BC%96%E7%A0%81%E4%B8%8E%E6%95%B0%E5%88%B6/"/>
    <id>http://example.com/post/%E7%BC%96%E7%A0%81%E4%B8%8E%E6%95%B0%E5%88%B6/</id>
    <published>2022-12-11T13:07:17.205Z</published>
    <updated>2022-12-17T13:27:25.250Z</updated>
    
    
    <summary type="html">&lt;h1&gt;引言&lt;/h1&gt;
&lt;p&gt;1、2、3、4……，我们从小便学习这么计数，并使用到现在。但是这样的计数方式从何而来呢？又如何发展成如今计算机的计数方式？&lt;/p&gt;</summary>
    
    
    
    <category term="计算机组成与原理" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>数据类型</title>
    <link href="http://example.com/post/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/post/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-12-10T01:21:48.429Z</published>
    <updated>2022-12-14T03:25:35.606Z</updated>
    
    
    <summary type="html">&lt;h1&gt;引言&lt;/h1&gt;
&lt;p&gt;赋值变量的过程中，不仅需要注意变量类型与数据类型是否一致，还需观察数据大小是否在数据类型的范围中。所以灵活使用数据类型能使我们更好的运用数据，根据数值大小将变量分配在合理的类型范围中，能有效减少存储空间。&lt;/p&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>变量</title>
    <link href="http://example.com/post/%E5%8F%98%E9%87%8F/"/>
    <id>http://example.com/post/%E5%8F%98%E9%87%8F/</id>
    <published>2022-12-09T12:51:53.924Z</published>
    <updated>2022-12-10T01:21:18.186Z</updated>
    
    
    <summary type="html">&lt;h1&gt;引言&lt;/h1&gt;
&lt;p&gt;由于变量能够把程序中准备使用的每一段数据都赋给一个简短、易于记忆的名字，因此它们十分有用。变量可以保存程序运行时用户输入的数据、特定运算的结果以及要在窗体上显示的一段数据等。简而言之，变量是用于跟踪几乎所有类型信息的简单工具。&lt;/p&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>标识符</title>
    <link href="http://example.com/post/%E6%A0%87%E8%AF%86%E7%AC%A6/"/>
    <id>http://example.com/post/%E6%A0%87%E8%AF%86%E7%AC%A6/</id>
    <published>2022-12-09T11:49:37.315Z</published>
    <updated>2022-12-09T13:24:48.953Z</updated>
    
    
    <summary type="html">&lt;h1&gt;引言&lt;/h1&gt;
&lt;p&gt;标识符是指用来标识某个实体的一个符号，在不同的应用环境下有不同的含义。.在计算机 编程语言 中，标识符是用户编程时使用的名字，用于给变量、 常量 、 函数 、语句块等命名，以建立起名称与使用之间的关系。标识符通常由字母和数字以及其它字符构成。&lt;/p&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>Java文档注释</title>
    <link href="http://example.com/post/Java%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/"/>
    <id>http://example.com/post/Java%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/</id>
    <published>2022-12-09T11:40:20.095Z</published>
    <updated>2022-12-09T11:50:52.353Z</updated>
    
    
    <summary type="html">&lt;h1&gt;引言&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注释可以提高代码的可读性，清晰完整的注释便于程序调试的过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;于编程者而言，书写注释是编程路上必须具有的良好习惯&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对代码的解释说明,就像产品的说明书一样,良好的注释会减少团队的沟通成本&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>常用文本编辑快捷键</title>
    <link href="http://example.com/post/%E5%B8%B8%E7%94%A8%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://example.com/post/%E5%B8%B8%E7%94%A8%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2022-12-09T11:26:25.849Z</published>
    <updated>2022-12-09T12:48:07.303Z</updated>
    
    
    <summary type="html">&lt;h1&gt;引言&lt;/h1&gt;
&lt;p&gt;掌握一些最基本的快捷方式，对快速编辑有很好的效果。下面列举一些常用的快捷方式，如下所示：&lt;/p&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>Java加载及执行原理</title>
    <link href="http://example.com/post/Java%E5%8A%A0%E8%BD%BD%E5%8F%8A%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/post/Java%E5%8A%A0%E8%BD%BD%E5%8F%8A%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/</id>
    <published>2022-12-09T10:35:42.688Z</published>
    <updated>2022-12-09T12:46:42.321Z</updated>
    
    
    <summary type="html">&lt;h1&gt;Java程序执行原理&lt;/h1&gt;
&lt;p&gt;编程人员编写.Java源文件，经过编译器编译(javac)成.class字节码文件，字节码文件通过JVM的类加载器加载至执行引擎，执行引擎执行(java)字节码文件并与操作系统交互。&lt;/p&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>JDK的安装及环境变量的配置</title>
    <link href="http://example.com/post/JDK%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/post/JDK%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/</id>
    <published>2022-12-08T12:09:05.524Z</published>
    <updated>2022-12-14T03:18:28.120Z</updated>
    
    
    <summary type="html">&lt;h1&gt;引言&lt;/h1&gt;
&lt;p&gt;JDK是Java开发的重要工具，安装JDK是学好Java的第一步&lt;/p&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>Java语言概述</title>
    <link href="http://example.com/post/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/post/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</id>
    <published>2022-12-08T11:19:36.508Z</published>
    <updated>2022-12-08T13:13:14.645Z</updated>
    
    
    <summary type="html">&lt;h1&gt;介绍&lt;/h1&gt;
&lt;p&gt;Java 是一种&lt;strong&gt;高级的、面向对象的、健壮的、多线程的、可跨平台的&lt;/strong&gt;程序设计语言&lt;/p&gt;</summary>
    
    
    
    <category term="第一阶段" scheme="http://example.com/categories/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    
    
  </entry>
  
</feed>
